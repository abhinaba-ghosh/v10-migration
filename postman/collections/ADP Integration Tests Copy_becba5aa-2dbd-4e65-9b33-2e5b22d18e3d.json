{
	"info": {
		"_postman_id": "4dff1761-1be1-4af8-8988-05c4f1ffadc4",
		"name": "ADP Integration Tests Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "f9992e7c-aba4-4133-8a88-def4d1b63e8f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b36c9424-7969-4f5c-ac31-d6673ef6a86c"
							}
						}
					],
					"id": "f67a1d1c-f6a7-4513-8922-3f7849192e05",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "0ce056ca-40cf-4ccf-80b7-4b1f266d1193"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "47770883-66af-416d-93c9-cfb25212aad2"
							}
						}
					],
					"id": "e3600d74-9e29-417b-b6ca-2223902176d7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "20112cb9-18d1-4b2c-a713-46f62791d615"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "8709ed53-ff7f-4c4d-9356-5b3c2b373ee1"
							}
						}
					],
					"id": "462bbed6-ac49-462a-b0b4-e5697288a8b9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "27b037eb-8bfe-4cd9-9b9e-41fc1b984d8d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "6a96c380-8bce-4660-b33d-d3d97a621c27"
							}
						}
					],
					"id": "dd8f6e66-319f-41ca-96d4-aa73b9ebdf47",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "98619d96-b943-4348-8b54-4f596477855c"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "f0746b45-2fcb-41bf-9b21-28a1fb5a10da"
							}
						}
					],
					"id": "35a1c86b-cf17-4d8a-b890-87b9d726a769",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "a339ccf5-0eb8-4914-a84f-69626efc5da7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "3562da73-2f72-4ef4-94de-3091cedbe74f"
							}
						}
					],
					"id": "344fe0fb-70dc-4beb-8ffe-af72c73e21b5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "d84b7b8f-919b-4d26-891e-d26bc81a7dfa"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "1e146a2d-684b-4074-a693-6ffcc4c55881"
							}
						}
					],
					"id": "21fb6080-7287-47a7-9f64-74d09da94730",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "3b629207-90a2-42e6-88aa-f91afed9c70b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "270ffe41-ed50-4113-8aa1-2a94a9c3ab67"
							}
						}
					],
					"id": "06203e5d-4bf3-416d-98d7-1446eb8958e7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4ab6dca8-b245-43ca-a53f-928e66c305cb"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "7c2df302-6949-4ee7-851f-87941fb6ec64"
							}
						}
					],
					"id": "384b77fa-d46d-4856-a778-0b26f1307382",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "a3cb0610-5c79-48bc-9f12-cfd6f28ac2f2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "6b94d062-c53c-40f6-8d5a-3a580f987f35"
							}
						}
					],
					"id": "7c085dab-9503-4ccc-bc42-0023dd865860",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "569cffe2-aadf-47be-9a06-b4b8a3fb282d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "de25c8c2-6d01-4be6-89f5-7ef58ed54f4d"
							}
						}
					],
					"id": "81dac079-bfca-4619-bb52-29eff030b986",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "ecad363e-c5c5-49b7-96a4-22dcdfce0401",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "d1e8fa5f-dced-4ed1-9f6b-0e563ddad27f",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "9d599b79-da7d-4de7-b8d8-f7c7e9f300c8",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "c8ff4cdf-8d52-4c5b-8786-cdecaa70d1aa"
							}
						}
					],
					"id": "c4b661dd-c01c-460a-a30a-4388387e6f20",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "4a056f86-df6c-4297-a74b-8284fa6e818c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "696629d1-cb24-4fb1-ae4d-ec928955c9a8"
							}
						}
					],
					"id": "7372636f-3d7a-4b66-bb5d-9deacce6ffd3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "e29a243c-935d-4a87-9518-2a858f0dc581"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "b4ec4d6c-cc28-4233-973e-ca81393c25e3"
							}
						}
					],
					"id": "d988f824-6742-490f-b9da-a42b9f5e453f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "3d9990da-f2e4-40c5-a62d-16d0e32d3733"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "1e1840f4-4260-4591-a830-a46f77f33334"
							}
						}
					],
					"id": "e6a31d57-398c-4e4b-b321-ec87d7cd634b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "d4c2c71c-faf7-4927-b5d2-ae07f31f0f57",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "c211b292-5640-4eb0-a49b-748530d85f3e",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "37a2b49a-543a-465d-b5a4-c042b4ad0f95",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "480a5842-71d2-40fe-8d1f-985c02e22112"
							}
						}
					],
					"id": "8c489548-62c4-4c40-817f-86c0f33e9c5c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "33e1e57a-d58f-4479-9b3b-79918b686016"
		},
		{
			"name": "Setup Copy",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "0e2889cc-5fc1-4574-a4b0-defbd268c1f7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3b27179b-c4a1-44b9-8452-903bec870dd2"
							}
						}
					],
					"id": "e3450763-43a2-4fcb-b133-76ba4ee00b37",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "871e1b8b-a4b0-4bca-bbd9-8b205df54251"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "ede2d38c-9e11-4d6a-a66c-7284078675a0"
							}
						}
					],
					"id": "620c4a5f-ee62-4e79-9cc8-fbffe13714c5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "175406d6-258e-4ef2-a7dd-e9b644444db2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b7e5867e-43b0-4ad0-99cb-c972df850c07"
							}
						}
					],
					"id": "eddb3b81-574c-43e8-9990-64fdc27d899e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "1309c6cd-0c3e-4d94-990f-de1c0322d9f6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "175f6062-c6d7-4bbd-a5a4-e89ce7d56aca"
							}
						}
					],
					"id": "bb3b58ca-dadd-4fbb-bc4f-74531e2f4a59",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d193cb47-8cb8-41da-ac19-ce7d276c735b"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "aedc1129-3a05-4a18-870a-e77b39042a9c"
							}
						}
					],
					"id": "e83dc96a-cafb-4384-84fe-8748cff35b7a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "90bf0db6-8daf-490f-9482-d230f363f564"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "1f71a043-7914-4749-a0bb-6312c89666b3"
							}
						}
					],
					"id": "744490a2-140a-4670-8768-634e5a762c06",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "c86b453b-40f9-41f7-9bcc-b1750304f0d1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "eae3cc5c-cb00-414a-b83f-fa54bc6f07b7"
							}
						}
					],
					"id": "50bc6276-392a-4621-a26b-62be7a139e25",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "122d0607-ea92-47a3-a95e-a21d897ce1a5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3d4ed07e-861d-4999-9139-b8c8a9dc3f67"
							}
						}
					],
					"id": "2de64e26-9d04-4824-b333-668500c98ed9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f8628a77-b687-4796-861d-5c46e6bc7c3c"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "3fe7677e-9b9b-41e9-ab59-d4ec049193d8"
							}
						}
					],
					"id": "aad3e235-0472-4e42-9444-c925f8c2cf8f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "3069be33-49c6-49e5-b25f-7e11c32b6bba"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "0878c39f-0d1d-4818-9f6f-f13c7074a88c"
							}
						}
					],
					"id": "54155a91-bb0f-484e-98cc-32015209e44c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "e594b2e7-aa1a-43f6-8c92-8e8a5d1f99b7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "5925e496-a503-4823-b21f-1c0a72d71787"
							}
						}
					],
					"id": "3000ea4c-0e34-4048-8c19-62e48dc64092",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "bcdb5d7e-ee04-46e1-beb0-9ab2f401aeab",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "b3525a79-1613-40f8-b412-0863eca03027",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "be636527-14df-468d-be02-a6df31f26ad8",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "f5f835ef-058a-48b8-87b2-c17abc34827b"
							}
						}
					],
					"id": "74ffc008-cbd5-485e-8068-895733244e7c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "057f4c2f-cc33-4c33-8181-ef5967c1329c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "e7746efa-e45c-4556-8e5d-a3770dd5e16d"
							}
						}
					],
					"id": "226266ba-1cd4-4da9-88ef-2c25be514a26",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "b0c4e9aa-c0ef-4803-acdf-eb63ca3edcbf"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "61b7f243-9d06-4fe6-a293-7b92f61390d5"
							}
						}
					],
					"id": "ce3efc9b-a380-425e-8421-c48859094ddc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "ab8e5114-5780-4348-98ed-45c17c076289"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "40aac285-c66e-432f-a5bf-775186c7507e"
							}
						}
					],
					"id": "c1f99292-795d-4357-b242-c9d1f9c74a8f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "6ff76ce5-503b-4a94-9c31-090bef9822c9",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "c50b06a4-6ffe-4782-9781-0b0da52cc001",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "2c5da55b-4533-4867-bab9-366acf9c9110",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "e351971d-d6a1-439f-9cb4-bc2611b2ff59"
							}
						}
					],
					"id": "77574d10-515e-43c5-a009-5a0ae603e779",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "1b353661-e22b-4c16-9b73-2b0ee370782c"
		},
		{
			"name": "Setup Copy 2",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "65a8df26-962c-4151-8d13-ba64eebd2fbd"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4638ddcf-eefc-4044-b5cf-1bc4dc094bbc"
							}
						}
					],
					"id": "b568269f-458f-4403-8fbb-f656c36a88ca",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "46a0c036-34d8-4a32-b4cd-81da18e81d97"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "68f51eef-92ae-400a-88bf-31ed6a942fa2"
							}
						}
					],
					"id": "24b9c4f7-b725-4c3c-ab36-1412c6d9e27f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "3b903852-0c4c-46b8-a988-ed8166daa39d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "af92f4ca-ceac-4070-971a-e150147578ac"
							}
						}
					],
					"id": "8f4ae509-b348-466f-9378-50f9ff5fb24d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "90e7b0b0-c00a-401e-9b4b-af701819fdef"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d748d656-00de-41ef-901b-9dbdfbd99066"
							}
						}
					],
					"id": "fa4ac56e-af70-48d1-af74-586da60d691d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "930a627b-86cd-4eb0-8398-7f3b5e97b789"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "3cceb71d-712e-4cf9-8397-67fcd571f481"
							}
						}
					],
					"id": "aac719af-840a-465e-899f-3a01247a7f5b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "08b09188-9d1f-40d7-b5fa-84a81091ce65"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "d6fc4dd6-650e-4005-814f-28a72cb09829"
							}
						}
					],
					"id": "143d4a71-3b29-4a50-baec-8b8b21f3381b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "70f9b861-dbad-4468-8e1e-a7f94da6e065"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3f09d36c-93f1-480a-8e90-7aebb80eb3bc"
							}
						}
					],
					"id": "36d8a53b-7eae-4c94-9000-c380331947ce",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "f526bdc1-ddab-4257-bef4-54dc01bb6410"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3e706343-4a53-4c44-9e35-5e7b8ddc6531"
							}
						}
					],
					"id": "1d5c4efd-948e-4796-b95e-30fa5834f45d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a4bb5a24-0933-486c-b5de-d42aa3f02ddd"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "8f7b8d5c-62d1-4a14-a3ad-54b1950e9cb7"
							}
						}
					],
					"id": "9cf783db-b511-4e8b-b29b-960a2c16e190",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "eb9d8066-c592-47d4-b156-608327d45f00"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "9a93fdb8-d1fd-448f-83eb-5eda184fe940"
							}
						}
					],
					"id": "13ee5f52-ef47-4474-9301-95fc79a018b3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "009c6f43-1f6f-4e78-b71f-59db9a8d083f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "a030d933-66dd-41dc-9054-45142bc3cfef"
							}
						}
					],
					"id": "b9b28036-1bcc-4231-a7f8-3530450f5f9a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "1214a149-43d4-460e-b708-2fb361bd8680",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "8885123b-a7e8-4c53-b9c8-6895850f19f1",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "93994de5-d97e-41b9-9f68-1952961b3c26",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "7faa15b1-8882-45c1-9d66-32f7ab834410"
							}
						}
					],
					"id": "eb4eba53-14ac-42b4-ade6-e446954c70f5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "e4146c6d-589d-4274-ab50-21e9c651866b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "13ded5c3-5d42-4500-8ca4-1ad81907a095"
							}
						}
					],
					"id": "8f0c3cc6-01d8-4a78-937e-c4216457e460",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "8beaea1e-3cca-43c5-9892-8cdb4375c45a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "137fa2db-b404-4e8c-bbfd-2ad3d731965e"
							}
						}
					],
					"id": "f7baf47c-b2ff-48f6-aa9c-72bffeae9496",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "2fc1f223-0e04-4251-8c5b-da4de1d2e246"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "1a1d0a59-d0d2-4f9f-a5af-54c4a7187a6f"
							}
						}
					],
					"id": "22ceec4b-f28a-4f46-a987-65c3ae554771",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "d52fa732-07cf-40ee-bb40-ef8f259bc57b",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "9aad365d-0084-408b-b6e0-8a6eb878bdd1",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "539d2d44-aa82-4e5b-ad32-0e6a99e275ac",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "c814d47e-4c6a-4c70-99c2-584c59e7d509"
							}
						}
					],
					"id": "b2d0c76e-6ef9-477e-abc3-57eac7cad0da",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "e7784126-f22b-4b9a-9c62-d9b3d57da7f2"
		},
		{
			"name": "Setup Copy 3",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "eb0a9b48-702d-4a39-9ec2-8e737f038539"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "12f151c6-f6ba-4e8a-9e26-bd857bc07c1f"
							}
						}
					],
					"id": "aca61cac-5b5b-4830-8f05-5127c105fc55",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "a0b800b0-b6df-4b4f-893f-4ac599641974"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "c8529325-3ec3-4de9-b25b-063e999d503c"
							}
						}
					],
					"id": "e70b49f3-311e-410a-9570-65f0dbbfbcf3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "fe64a0bd-1699-4333-a042-a2163cd3f6ce"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4f01bb0f-4df1-42d0-bdf6-a232887470fe"
							}
						}
					],
					"id": "9fe72637-c8c9-448b-aaad-b974d90f58af",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "788e2efa-1db4-479d-b97f-4fea75882050"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e9387b6f-c2c2-44ce-bf89-66dbb9034015"
							}
						}
					],
					"id": "79cad353-7df3-4ccb-a59f-4f435bf1b7b4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f9bd9893-e544-4a47-b9be-ba42355d6aa8"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "53604125-6b7f-4c3e-a9e2-a2d3ca6d8f70"
							}
						}
					],
					"id": "61afb107-7c4d-4939-8f33-769b3295cca8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "9eb9a405-750b-4b55-a770-21e805c8a426"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "5129ac36-d719-4266-aa32-dd99b627f207"
							}
						}
					],
					"id": "c9b6bfe8-3f25-45ca-851a-a2d6cb52b599",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "1cb3c710-0772-4379-bf45-5023b540ab41"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "97bbff4d-24a5-472d-8452-f9a486e1f3e9"
							}
						}
					],
					"id": "2990b163-d078-4440-a3a1-f10dbb66f196",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "b39a6677-74d2-469c-900f-f63849b2ba59"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "2340d04b-4131-4416-b483-96a2df154165"
							}
						}
					],
					"id": "f73f6147-5397-4b40-b69c-8072a7a03252",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "22602f3a-e6b8-4b4a-9323-41d2d2f2a993"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "c6554296-c895-4199-a410-09b32885f760"
							}
						}
					],
					"id": "77a1051e-7f7d-44a3-9e48-f021a9e98828",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "b58af81a-d4aa-43fb-a944-91b0ff0c04a8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "ac9d34db-0f97-4c4c-ae4d-febcfd6ffba0"
							}
						}
					],
					"id": "664de45c-a188-4f1d-b5b8-8f9d25a75708",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "00355de6-e4cb-42d2-bcea-1ab9837560ad"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "a842707b-6ed8-41dd-825d-4d5680f1901b"
							}
						}
					],
					"id": "aff6d038-f8d4-4a33-8e4b-e8fe9a256544",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "59e4ca9f-7273-45f2-817b-8c943e7808bc",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "1e82db5b-386f-48e6-8fde-1f54495a0708",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "d50d1586-9702-4d0a-8e5e-c241bb09536f",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "e9330149-de9a-420d-93d6-e4e3ebbdd52e"
							}
						}
					],
					"id": "70208d90-f894-4a8f-9809-4d1b5b8b755b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "1ed2f5e4-61e0-43ef-8d6c-34c187fe0bde"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "9a1ab177-7082-4336-a1bd-8a97807cac4c"
							}
						}
					],
					"id": "5746c5f9-e06b-46ba-9aea-9296f42cf2dd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "4c5a92d5-15c1-44c0-98a4-e93ed7026c33"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "7b8866a6-5896-44e4-a0b7-a2b1d30059c0"
							}
						}
					],
					"id": "3b4f09d8-5fa1-4388-8db3-97ca00f56a65",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "109aba0a-b017-418a-92ec-f2cf0b17eba0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "538dca75-0424-4996-9e0b-c96fc30029d0"
							}
						}
					],
					"id": "444ad78a-7de6-4f0a-894f-90d069fa50b5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "3ff1a985-b50a-4530-a0a0-7285522bf32c",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "19beb7e4-b42b-4216-a403-0f59aafdf738",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "654de2ee-d690-43a7-8c70-9c6e7c6e2488",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "86b0b07d-b17a-40da-a1a5-a1ebb4de11e1"
							}
						}
					],
					"id": "c4930d49-a3db-451f-8dfd-a0f41ba11b48",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "f466aa88-9fd1-445e-a14d-4c0ec1ccc09c"
		},
		{
			"name": "Setup Copy 4",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "185de06d-caee-49d4-a250-d1bba85d0a5f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "066efc47-aa99-435c-b863-5d132859961a"
							}
						}
					],
					"id": "a3d2c736-28e9-45cf-87ea-69e2a3850dfd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "16a67673-9f64-43ef-90c7-dc147ebe7d79"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "ce63aab4-1846-4235-b7ef-62351cf71e44"
							}
						}
					],
					"id": "c20f5554-16cf-46fc-abb1-efb33d8b7ff1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "29296d84-79ca-4021-8629-7dcd269ac5a8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "abf10481-094b-4ed0-9fc2-ccdb8920f6d4"
							}
						}
					],
					"id": "d8aac04f-007f-4dc0-9c3e-2e10ccf40d2f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "04f35f97-99be-4339-ac91-e6c52fd29ca0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "65574ae7-d17f-408c-8f16-9f8f79764131"
							}
						}
					],
					"id": "d8dbf825-4358-47c9-8059-534c27e3c77e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "41439084-da2f-4bdf-981b-9f7e7ec85d7e"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "92806b97-6f59-4fe3-ae8c-69744e3bfd5b"
							}
						}
					],
					"id": "e2cd7223-0e16-4a0a-a0c9-d21428863379",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "1ee8810c-7700-4c87-9cb4-9ef480cef470"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "f339f8d8-af20-486d-b840-4748e24fc9b2"
							}
						}
					],
					"id": "4cf9f7ff-64ce-45f9-b71f-5bbd824b11b4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "5112a587-d38f-46d8-bdca-cd52e9dbfbb0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "fc20d2f0-7819-45ce-aa80-859ecf53cd14"
							}
						}
					],
					"id": "793045b8-f308-4bea-a340-fa6a4e71c97a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "8d6ccfd1-3878-4822-be5e-4e80e9721e70"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b85e0981-4bf4-44f1-8689-d5792aa71aae"
							}
						}
					],
					"id": "ae7d81c2-8d27-4c0c-8311-278c0d535e74",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "f68443fa-4fa4-43c2-82a9-3404b31c8a46"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "c5f700fb-4231-442d-99db-c47df51dca93"
							}
						}
					],
					"id": "5ad59fa9-f15d-45e4-a794-429fe0a1aadc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "b9f1bd07-18fa-4f53-bebe-e31ce818f368"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "d6e26d3f-e73f-4ee5-80c3-d58860851f0b"
							}
						}
					],
					"id": "bbfe7044-a096-4920-94e0-770ca5bb0349",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "018dce5a-9450-4b38-baa1-8c280974dc3a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "5270c8c1-1543-4c86-b44a-ba5334bdd556"
							}
						}
					],
					"id": "d69f4a8f-99e1-41a3-97ab-1faae2ab54ca",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "538eaffd-fa70-4c0c-aa1b-a8dce42fa52f",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "ed72c644-b063-43df-89c0-bf0cff32f28b",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "d61707d4-27da-4e4b-ae21-00c3667ed155",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "2b7dae0a-e258-4349-96a6-3c1ccde0decd"
							}
						}
					],
					"id": "21099c13-2bb4-4c13-8908-5d5a9490d552",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "fa83f71b-c997-4fc9-8974-49c2b75b10e7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "47fb7a69-c09a-4de6-82bd-e98880e0ee12"
							}
						}
					],
					"id": "48c75922-8622-48f8-af90-8813f0d37c50",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "6ee5a9a8-c48b-4571-a184-09341b815721"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "4d67c1df-3923-4c07-a477-33c3b53a21e4"
							}
						}
					],
					"id": "b15903cd-5af5-4761-9cec-861096b96be1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "3bbc0e9f-d7a9-483a-b279-382f95b8b21f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "498a9238-46ea-47c3-a2e7-561ccd36f94d"
							}
						}
					],
					"id": "47bb6076-9f8d-49b7-a9fd-e702ab4162a3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "5356f71d-22b2-492b-b9e5-c25557612618",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "d5dad36c-fcb7-4ba6-88e5-a792ed33194f",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "a6ed179b-c3ee-4100-aa2f-b1ca4376fc4d",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "7ff685f6-a35f-4b5e-a2a2-d022f4f735bb"
							}
						}
					],
					"id": "c6a21ca5-8aa8-4f0f-8aa4-211aad8fe587",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "bbb0a866-d416-4ce5-bd31-2ef9f62a8aaf"
		},
		{
			"name": "Setup Copy 5",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "54b043dc-c905-4671-bac5-5e0e1d5cc18b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d0f00f32-4ec3-4e3d-959e-83f522d32f20"
							}
						}
					],
					"id": "0848ad65-82da-45ed-8469-f32864e022fe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "973029f8-6307-4e75-a951-52b21534336c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "506076c5-0478-4f92-adab-0da85503461c"
							}
						}
					],
					"id": "93e27687-61a0-4cf8-8e3a-b9065181815c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "f2269fc9-2ddd-46a4-8c74-a59a3ca6d7a6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "49eec7ac-c978-426f-82cf-7eb02f1a9797"
							}
						}
					],
					"id": "5f1ffb82-e47d-4351-b20a-2738031090f4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "caa1a1b3-a7ed-4d3f-89f4-4534f793e6a4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "cfd2e402-4608-4703-9d4b-87dc9c7a817a"
							}
						}
					],
					"id": "eddcf851-0832-4b0d-9947-df337e3c5232",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "5e0d7b9a-1bb6-4adf-8c3e-37bd03009de9"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "94ae37ae-61f8-416a-b4ee-0ded6dcd93ed"
							}
						}
					],
					"id": "c7f0bba3-1889-4edc-930f-a2e0d2c90fbb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "53aea24e-3efc-4f44-8b12-c2f92112a9fc"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "ecb8fd8b-0616-4f7f-93b1-00af374ddfb7"
							}
						}
					],
					"id": "e6f8e0a5-b66f-4f72-a773-64090dc7ef7a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "e39be565-bf94-4611-8ba6-b4cb51fc6092"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "2c524f53-6b80-4fe2-b46a-254683ba3422"
							}
						}
					],
					"id": "a3510423-d38a-4cbd-9cee-90eaca2642f4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "9c7f653c-f4fe-4c2d-94df-f547d0c91787"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "00d8da98-6353-4d22-9b68-3707c6aef21f"
							}
						}
					],
					"id": "ec32cb31-8aad-4e20-b39a-fbd18a870fc4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b4ca8ea6-212f-42f3-89b3-dbdc264d0962"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "1ab2e351-d000-4f8f-9695-9daf47ac3fca"
							}
						}
					],
					"id": "75e81db5-89da-40fb-85a0-f0cb7be1231a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "e43f6310-e43e-4755-8862-37851c339004"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "e3195ae0-972a-420b-b5ed-31bf6a1e6035"
							}
						}
					],
					"id": "88678667-743b-4ab6-bf0c-93a5aa8ddfed",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "513dbd38-9293-48b1-b13e-67a72e0b3362"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "79260bc2-aeba-45fb-8afd-dfb2d93c0e89"
							}
						}
					],
					"id": "69677ec6-e75e-432f-8e35-34c21fb7493b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "91d01e35-c93d-4021-9a62-264a762db999",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "779ec5ad-9461-49b2-9e20-3e19bba7efcd",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "9bd69322-e88d-4738-8ebf-69eb34bdc712",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "fe2708dc-f6c5-4d34-a0de-4d7d702b428c"
							}
						}
					],
					"id": "ed6f36ed-e4d9-4fe5-9a5c-d8fdfee2ed17",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "5357c959-abb5-4bb6-8bda-aaee619cb871"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "5095fc66-6897-4124-9197-7763ed2b17d8"
							}
						}
					],
					"id": "e84a9e2f-7b8e-4e79-af64-009ca80a08e9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "29211853-9131-4d04-8fa0-d9f46334a0c8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "7624acd3-6572-42bb-a251-e8ab9a1ce8b4"
							}
						}
					],
					"id": "123acd6e-5155-4be0-b7d8-d8994e5310db",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "79ef6967-616e-4077-9c22-981e8844461c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "c926e129-57c7-4486-b323-7a5852b3b6ab"
							}
						}
					],
					"id": "3302ee51-c4d0-4534-953b-deb5584c864d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "511b04f4-5b3a-4554-8180-60a4436df4b0",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "b95308de-da99-4efe-bd82-4ea4441c4c3c",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "f0f7e4c3-f83f-4755-af1f-c0930303d8a1",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "69c86157-6120-4954-ba44-2d09079082a8"
							}
						}
					],
					"id": "715b3985-3c7a-4cb2-ba02-c32899902c8d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "d22c551c-9791-4b43-a481-22f9ba9f280c"
		},
		{
			"name": "Setup Copy 6",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "287b6f5d-412b-4cb8-b5ad-d3d76544973c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "78fd81f9-82af-44e6-a420-cdbda2db2120"
							}
						}
					],
					"id": "25258838-67f5-40a1-84a7-3cd4c4cedaa8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "14ae7745-80c9-41ac-b7c8-99b1af0148ac"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "fec8668c-0d84-420b-8f27-c1eb3272e210"
							}
						}
					],
					"id": "2bf94b48-cb97-4c38-9e55-8ab3ff45342b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "13d02dfe-5795-4e2e-9252-3d8f80b925c0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "6d66be74-1a2d-4e86-a5d6-06e79fcdb03e"
							}
						}
					],
					"id": "2b06cf45-7546-4d6a-80bf-156428608a68",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "08dc6565-6998-436f-aecc-efaef51dccae"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "dfd6107f-29b8-4aaf-8fac-ffd4e957d85d"
							}
						}
					],
					"id": "bc6107fb-1b25-4310-9391-533a273429b9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4f29223d-e9a4-49e5-b3b2-902c07764ee8"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "0449dfa2-1801-49e1-a2aa-a36b3a127786"
							}
						}
					],
					"id": "d0fdf2a5-6cef-4abb-aaaf-84ff93454328",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "7e01d7ca-a855-43e0-aac9-dd4c7b7e4dc7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "ef41ce32-bc9e-4470-b35e-b3c88c6d9995"
							}
						}
					],
					"id": "f3f5d2a1-6eee-400f-b838-6f4f9be5192a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "6d656a31-0b58-4530-9f73-3a73661cedec"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "3d57e30e-f145-437f-b83c-c358ddace6ce"
							}
						}
					],
					"id": "b1989103-1929-4063-90d9-01ec623b5a3e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "c79c10ce-dce9-4789-a0e2-1e0172085e71"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "0a99797b-b632-4329-b592-43a07123ab7e"
							}
						}
					],
					"id": "b50f863d-860c-4b31-a5e3-081cd5672365",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "564a8715-1f86-48aa-8320-2ef59a27e67f"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "b64a57ac-91cc-4c44-93a7-9aa4a64f8f25"
							}
						}
					],
					"id": "f6109119-b5e7-45ab-b551-d92187d46087",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "0f88620f-bb25-4f1e-9116-502cdb15267d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "4a257e3d-4b34-46ef-82f3-133be028cf8c"
							}
						}
					],
					"id": "eb08fa91-bffd-4841-903a-7d68c4a3194d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "9386d62c-4d0e-4662-97f9-dd9398d62efd"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "d73d22a9-370f-489e-8f28-4eac0b08d389"
							}
						}
					],
					"id": "57ed6b24-c66d-4ec0-8fb7-3770fde43254",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "aa83b272-cfba-421d-b91d-32ffa3bb32ce",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "994fbd8e-cab4-47b6-bb5f-987513923b32",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "45cc8193-a802-4d53-83c4-0b8cda913251",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "1e2190ea-092e-4be9-b2de-5f593fa2ed5e"
							}
						}
					],
					"id": "c5597e1a-04d4-4e88-a9eb-c282d124dd78",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "041691a5-da46-47de-81e3-f7528ed17d92"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "a9333675-ad60-43e4-ae28-89009bc4b420"
							}
						}
					],
					"id": "c533bc23-2439-4f9c-8f83-f39ea40888bc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "80b4c235-958a-4126-b1e5-9b8c3a49a125"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "2939f712-d28f-449b-9825-8aff690e00b8"
							}
						}
					],
					"id": "11b61f39-8eca-4589-a9f9-c7db18ecb4cd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "9d56fd45-32c5-4cab-bf7a-6c2a9e9b0b14"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "03d44926-8188-425f-8eda-93b227441d2c"
							}
						}
					],
					"id": "b9076c34-e5fa-453f-bff5-db3dd4919c0a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "d6d47e5f-540f-4c56-96cf-2a5ae7e35bca",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "48eefa08-9705-470e-81b3-136c72f83373",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "c776e756-cb58-44ee-9cb6-184942f8cfb2",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "d460c528-1360-4d0b-ba75-24eadc0985a2"
							}
						}
					],
					"id": "c7528091-f42d-4405-a51d-8790d23a6cad",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "9a9723ea-7a12-4870-bd18-5d3aedc8aeca"
		},
		{
			"name": "Setup Copy 7",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "af9bf762-48b7-40b3-9be7-c9b25ed581e7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "7e6cf518-e4c6-4909-943a-2071917c2d1d"
							}
						}
					],
					"id": "2b07739d-6601-4e5f-b1dc-a6a7825a93eb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "767c5ece-aa66-490c-b0c8-48069084c584"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "e956d025-e1c3-46b0-b413-508dbcd6d9d3"
							}
						}
					],
					"id": "c235850f-b52c-4878-8f93-50f54ce39dc3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "0fade7d9-a493-4a6c-aefe-df862a87aeb9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "60aab9e5-639f-4531-b629-5c3ff4672b0e"
							}
						}
					],
					"id": "9848fd51-7d05-423a-bc53-40e573c39a58",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "7cf2c692-9a9b-4137-8dbe-97852aa6439f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c1a923f8-e208-47ec-bbb3-9328e514f807"
							}
						}
					],
					"id": "7f0c2018-f544-4d9a-8585-d9eae730df05",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "fa7908fa-3522-4069-8e96-843f0b811232"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "631b53ce-1b0b-4f64-9c95-807133ff0fb9"
							}
						}
					],
					"id": "962896aa-7d48-4043-8044-3cf2ecf9d662",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "cdaca0e1-1e8f-4c59-95f3-f8e68b9185a5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "71326229-57db-44cd-9f80-affd08385df1"
							}
						}
					],
					"id": "91a68080-4fba-4a4e-8a81-8c4820dbb411",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "8c1680c8-8d87-4b06-9624-d8adbfcc69f7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "5b13d06e-9924-40a4-9ccf-146f43c3d1ef"
							}
						}
					],
					"id": "43616a12-ab0c-4ddf-bd20-62265a2060e6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "3deef4b8-7bd9-4bfd-87d4-41d9b1015b8b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "13a4b3f3-487c-4330-b01b-1dba8403fef8"
							}
						}
					],
					"id": "f526767d-cd3e-4970-adbc-6ff6750400eb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "09014e3a-9652-4c7f-bfa6-82296e34c7a7"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "222f752a-7f0f-4085-a354-14d59a87e3c6"
							}
						}
					],
					"id": "fbe1b797-77d6-4781-9f88-870f081ff464",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "090b157c-dea8-494c-92ef-41548914009b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "b4e90f45-2954-42b6-814a-3e67bbe06b06"
							}
						}
					],
					"id": "a7789d39-87d0-4e22-9ba8-1c73b2b86a30",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "316dfa67-8e12-42da-a9cd-f940c97b0e13"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "61d853f0-3b95-4486-890f-d546e3c4939a"
							}
						}
					],
					"id": "b88a7731-0592-4f2e-9750-63f74547808c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "da1ca869-7bdf-4ff2-b436-ea4763a6eee7",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "ffc4d953-4f2b-4074-ba75-0be96b455f22",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "4bd471b2-226b-4bc3-8efd-c008ac50da14",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "75497473-a618-48c5-af19-a23543663e15"
							}
						}
					],
					"id": "6ddaefb4-4967-437f-b520-4d646fd1cbc6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "c3649e7b-1752-4c5d-9ce3-e83cca1fd7d1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "4bee3264-6127-49ef-b94a-cc05690f6487"
							}
						}
					],
					"id": "4881f230-52e5-41da-a2f9-7ccf2c044d25",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "51503cb3-42f6-459a-84ba-ccc102146f76"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "f53a030e-cd2e-4564-867e-565c97a55cbf"
							}
						}
					],
					"id": "24327a22-c377-4c3c-9288-1782738354f5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "b170a4ba-51e5-49a7-a451-3df435c3e30f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "6cc5b777-b966-4dd1-b7da-b83b5e97b62a"
							}
						}
					],
					"id": "dbdb2c01-53d4-4a04-8ac6-5d2e57c58fe1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "249a2ded-7c20-487e-afa3-cb0e3fa4285d",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "934a4b36-3555-4cf6-92bb-1129cd95fdfe",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "51d345fc-d090-4442-baa1-443658c97225",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "d6e99345-46d0-4ce3-9376-43e70350cb5f"
							}
						}
					],
					"id": "1b047c90-c6f7-483b-b88a-452f027d9a80",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "55fc7344-d5b0-4e85-a35d-ccdaf9474214"
		},
		{
			"name": "Setup Copy 8",
			"item": [
				{
					"name": "[Setup] Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"admin_userid\", _.get(pm.response.json(), \"user_id\"));",
									"    pm.environment.set(\"admin_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "285a7d06-8588-49cf-a4ed-39d4d4b68288"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a92b98b5-46ae-4787-9738-7158b7c085af"
							}
						}
					],
					"id": "fd1938d0-308c-419b-a946-86d6c8812c96",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{admin_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_editor_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									""
								],
								"type": "text/javascript",
								"id": "f93f70fa-1aa3-4655-a6d2-2fa54637598f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-editor-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_editor_username\", userpass);",
									"pm.environment.set(\"api_editor_password\", userpass);",
									"pm.environment.set(\"api_editor_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "88adfadf-2c9c-4320-88c2-294ee17e159d"
							}
						}
					],
					"id": "89e72b1b-b2d6-4c45-b657-3c00ba05d153",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_editor_username}}\",\n    \"email\": \"{{api_editor_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_editor_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "5a02ac6a-ed37-47f1-8b87-786b621853cc"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4152239a-1f03-4d9b-857e-40fe3a127f49"
							}
						}
					],
					"id": "536754e5-3d31-4dfb-acda-92d9bf85edd3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_editor_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Editor To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_editor_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "2bb616b6-71dd-402f-99ab-005f5716287b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "1a0c28ff-d769-4c25-8ed4-5a7889f5907e"
							}
						}
					],
					"id": "2e1419ca-c805-4e30-b548-1a9e6ce21560",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_editor_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Editor Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "943cb727-e363-4cb7-8f18-c1b439648c9a"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "b5ca9242-4546-4d45-b623-58ab1cfb4d63"
							}
						}
					],
					"id": "11fd51e4-0f8b-4ee2-8e38-ad8fd7454261",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_editor_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/associate_with_team?user_id={{api_editor_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup]  API Viewer Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code=== 200) {",
									"",
									"    pm.environment.set(\"api_viewer_user_id\",pm.response.json().user_id);",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"     postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "a7d692d6-7981-41df-baa3-f65e6d105a34"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userpass = \"api-viewer-\" + Math.round((Math.random()*100000)).toString();",
									"",
									"pm.environment.set(\"api_viewer_username\", userpass);",
									"pm.environment.set(\"api_viewer_password\", userpass);",
									"pm.environment.set(\"api_viewer_email\", userpass + \"@getpostman.com\");"
								],
								"type": "text/javascript",
								"id": "bd68c593-8488-4e7d-8b10-d373ba804457"
							}
						}
					],
					"id": "73b11887-8689-4fd1-a12e-0b1c492404f8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n\t\"username\": \"{{api_viewer_username}}\",\n    \"email\": \"{{api_viewer_email}}\",\n    \"password\": \"{{admin_password}}\",\n\t\"targetApiVersion\": \"1\",\n\t\"terms\": {\n\t\t\"accepted\": true\n\t},\n\t\"silent\": true\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signup",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.environment.set(\"api_viewer_access_token\", _.get(pm.response.json(), \"access_token\"));",
									"}",
									"else {",
									"    console.log(\"Something went wrong while signingup!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}"
								],
								"type": "text/javascript",
								"id": "b608407a-5810-41f2-b76f-4fc6ce1fedf6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d2d334dc-acb6-4eaf-968b-1800dfe08448"
							}
						}
					],
					"id": "b410363e-974e-4125-9939-df1997046d88",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"{{api_viewer_username}}\",\n\t\"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/signin",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Invite API Viewer To Quality Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const lodash = require('lodash');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invites sent', function () {",
									"    let data = pm.response.json();",
									"",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"",
									"    if (data.result !== 'success') { return; }",
									"",
									"    lodash.forEach(data.invites, (invite) => {",
									"        let code = invite.code,",
									"            userType = invite.roles[0];",
									"",
									"        pm.globals.set('api_viewer_invite_code', code);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"id": "bd5ee317-4629-4760-a7fc-4b344d15625e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "58798354-f1e2-42df-ad8d-072bcc97ec60"
							}
						}
					],
					"id": "4b5d91de-336b-4a9d-802b-3a00fcab452b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{admin_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"emails\": [\n    {\n      \"email\": \"{{api_viewer_email}}\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/{{quality_team_id}}/invites?access_token={{admin_access_token}}&user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								"{{quality_team_id}}",
								"invites"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Accept Team Invite",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "810de911-63be-440b-b006-6bbb9db0f3ef"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test('Invite accepted', function () {",
									"    let data = pm.response.json();",
									"    ",
									"    console.log(data)",
									"   ",
									"    pm.response.to.have.status(200);",
									"    pm.expect(data.result).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "0945b5a9-1163-437e-a034-32f4d8763dc2"
							}
						}
					],
					"id": "dce2d05d-5e61-460e-84ca-51f65b475d24",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"invite\",\n    \"invite_code\": \"{{api_viewer_invite_code}}\"\n}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/associate_with_team?user_id={{api_viewer_user_id}}",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"associate_with_team"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong while creating personal workspace!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('personal_workspace_id', worskapceID);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "e882716d-e58f-43fc-afad-2e7cade22073"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "73029889-ec58-417c-9f83-722b13e00313"
							}
						}
					],
					"id": "7670e81a-220a-4362-9a02-6b5d14a4538c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Personal Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"personal\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Personal Workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Personal Workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"personal_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "528f3902-dfcb-46f4-bd57-9acac8c9ffec"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "61804920-9647-4d22-9df2-f66b441ea243"
							}
						}
					],
					"id": "e6d8ba6f-032f-4e58-9e14-408bd8ed06a6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{personal_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{personal_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "845b8dd3-9dac-494d-90a3-417ca5e941ad",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "d86e8bde-5fe1-446e-a7e0-a8e31ce48d3b",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "d750da4a-10af-43ab-8981-e757d3243164",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create Schema PW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create schema PW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"personal_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "7c9759da-e584-4d6e-bb46-3cb14ac670f9"
							}
						}
					],
					"id": "e9f7e448-c598-4d6a-9d61-dd08dfa874d4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}",
								"versions",
								"{{personal_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cteate Team Workspace- Check and Store the team workapce id\", function () {",
									"    const worskapceID = pm.response.json().data.id;",
									"    pm.expect(worskapceID).not.to.be.null;",
									"    pm.environment.set('team_workspace_id', worskapceID);",
									"});"
								],
								"type": "text/javascript",
								"id": "dfeec697-e1d2-4cf6-a0a1-c653d933a4aa"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace?user_id=${pm.environment.get('api_editor_user_id')}` : `${pm.environment.get('url')}/api/workspace?user_id=${pm.environment.get('api_editor_user_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "7765ef70-3bb2-43a3-adf4-951ac9f578bf"
							}
						}
					],
					"id": "87992b75-31ee-4735-9ceb-3d2479703fab",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"name\": \"Team Stuff!\",\n  \"description\": \"This is a team locker.\",\n  \"type\": \"team\"\n}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] API Viewer Joins Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Join Non Admin user to Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "8f339f0d-5ec1-4a09-bd03-69cec4defd4f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_invite_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}` : `${pm.environment.get('url')}/api/workspace/join/${pm.environment.get('team_workspace_id')}?user_id=${pm.environment.get('api_viewer_user_id')}`",
									"",
									"pm.environment.set('workspace_invite_url', workspace_invite_url);"
								],
								"type": "text/javascript",
								"id": "7eaac9d7-d54e-4ae9-9215-127b08590345"
							}
						}
					],
					"id": "5475bf5b-90ea-465f-905d-46a0e40bdd33",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_invite_url}}",
							"host": [
								"{{workspace_invite_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Setup] Create an API in Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"// check and store new API data",
									"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
									"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"v0.0.1\"]);",
									"})",
									"",
									"if (!(jsonData && jsonData.model_id)) {",
									"    return postman.setNextRequest(null);",
									"}",
									"",
									"pm.environment.set(\"team_workspace_api_id\", jsonData.model_id);",
									"pm.environment.set(\"team_workspace_api_version_id\", jsonData.data.versions[0].id);",
									""
								],
								"type": "text/javascript",
								"id": "f6632b25-3446-4ed7-9fec-bc8550aaae83"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const a = new Date();",
									"",
									"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
								],
								"type": "text/javascript",
								"id": "21179d1a-0be0-4233-b3f8-f223cb213ac3"
							}
						}
					],
					"id": "65171c53-ce0b-45d3-869f-971ec06b0603",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{team_workspace_api_name}}\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{team_workspace_id}}",
									"description": "Required. This is the workspace ID in which this API will be created in."
								}
							]
						},
						"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
					},
					"response": [
						{
							"id": "e602dd38-713c-447a-a984-43db9d577ff7",
							"name": "Create an API (w/ an API Version that does not have any relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "cf8792e5-5d88-4aba-9077-76b013bcfa07",
							"name": "Success: Create an API",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "5fbe25b1-ae6f-4b50-853d-cd0b13771bee",
							"name": "Create an API (w/ API Version and relations)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{workspaceId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
						}
					]
				},
				{
					"name": "[Setup] Add Schema to the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    console.log(\"Something went wrong!\");",
									"    console.log(pm.response.text());",
									"    postman.setNextRequest('[Cleanup] Delete the Personal Workspace API');",
									"}",
									"",
									"pm.test(\"Create Schema TW- Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code !== 200) {",
									"    return postman.setNextRequest(null);",
									"}",
									"    ",
									"pm.test(\"Create schema TW- Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.exist;",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'schema',",
									"        action: 'create'",
									"    });",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"    pm.expect(jsonData.data.type).to.eql(\"openapi3\")",
									"});",
									"",
									"pm.environment.set(\"team_workspace_api_schema_id\", jsonData.data.id);",
									""
								],
								"type": "text/javascript",
								"id": "6ceaec72-e977-4285-a06b-81a1aa471098"
							}
						}
					],
					"id": "7d0a6563-e206-4fad-8338-554f514249dc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"type\": \"openapi3\",\n\t\"schema\": {{yamlSchema}},\n\t\"language\": \"yaml\"\n}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}/schemas",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}",
								"versions",
								"{{team_workspace_api_version_id}}",
								"schemas"
							]
						}
					},
					"response": []
				}
			],
			"id": "a1663a56-09a2-4880-afbb-b32dd25f062f"
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "0a8e2366-3c9f-416a-a227-ff1036606446"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "3afae015-e0b4-400d-84c5-5bbe52abb5d0"
											}
										}
									],
									"id": "c198ffab-d933-4ec6-a6ad-fda5fa9c1309",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "6ac41099-fe8d-4ccf-a46f-fee1ab836ea5"
											}
										}
									],
									"id": "233b0700-24a8-4067-9ba0-df3bf76a8fb9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "914edf44-8ce9-451a-a81f-6fd4a6d822ee"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "1ccd66f1-e4b1-45af-9506-f102706230dd"
											}
										}
									],
									"id": "fe48195d-a39b-4b2e-829f-f8354c1a08d9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "c3298ab5-4afd-45ca-9cb4-41910e259b3e"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "a3bf6c5a-047b-4754-9c2b-e5b044c39ac3"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "cd8b7a43-2b0e-430f-b482-dd05bac6e5f4"
											}
										}
									],
									"id": "5c1d3cd8-de15-48e0-ad33-f2e0d4726d33",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "28262a1e-2a8c-48cd-a324-683b2688fc73"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "a0c166f5-3d96-4fe5-825d-02eb4cd3d537"
											}
										}
									],
									"id": "3e9783b1-9a05-4d5e-adf7-36114c01fd9d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ddeae0ef-fae9-4a52-a389-f1d3a06033d7"
											}
										}
									],
									"id": "8ff257f4-ec5e-470b-ba83-84a9d6391696",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b3cca8a5-490f-43f2-a5b9-f4d362fbf6ab"
											}
										}
									],
									"id": "7507d1c7-7e51-4df5-8ffb-0a4f341ce5ef",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "da35ec04-b16f-48ce-926b-53a7fcdc2432"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "15012b2a-2bfe-492f-bd16-a5787e737868"
											}
										}
									],
									"id": "79c51137-29a7-4e19-a945-c6d63041104c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "4b7d3293-dedf-4102-b9e9-99d392c65a60"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "745afc26-d0e9-47be-82c1-b65397c903b6"
											}
										}
									],
									"id": "84ca51b4-511f-4767-aeda-d4a9906d3a22",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "39e15c6b-ace1-4ab9-826f-29bb6cb5deee"
						}
					],
					"id": "3edae598-ed71-4fbe-af8d-798460ebf9b4",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "ba56784e-3044-4743-a3b4-bc40f317ef6a"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "15482932-b885-481b-95cd-5810220d1a22"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "27f7915b-cf2f-42c8-ac82-22e121b35588"
											}
										}
									],
									"id": "1549b62a-614b-49f7-b734-f449d3fbce14",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "d547ce7c-ba7e-4b8a-b720-d40cdc3045f0"
											}
										}
									],
									"id": "d7de2cda-d4a8-4993-92fa-0710d31f8da4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "253b84c1-21a4-424a-8eda-e167ef6de6c6"
											}
										}
									],
									"id": "e1d67f59-55d1-41b4-a06f-bcb4d47b24b3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "76188a4a-e230-413c-906e-9f6d02524614"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "68595ed8-770f-4bf5-8560-e78455016205"
											}
										}
									],
									"id": "a12f7441-2d9c-4cca-ac24-079380060f99",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "e0e13c01-7565-44ba-93cd-4f5d3474c218"
											}
										}
									],
									"id": "4f148837-fd9d-4793-a324-ccd1a0e5fb0a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "00234e20-5564-40c9-b09a-625d166523c1"
											}
										}
									],
									"id": "b745c7dc-2179-4e38-a30a-e8b43aabbf91",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "f92dbd3c-ecbb-4722-9ebc-94aa2506779e"
						}
					],
					"id": "f67b6230-24d4-44f7-9577-401288186d48"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "002dfb2f-49d9-4a66-bd69-0189bb7c74af"
													}
												}
											],
											"id": "a08e7d06-c5ff-4ed1-a716-226e02162f31",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "ba723881-58b5-48ba-987e-a9dd2f922d36"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "ae1687d1-24c1-4e01-ab6f-912afba72721"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "fe99de5a-84cb-48de-a400-9fd5be3112ad"
													}
												}
											],
											"id": "ae46ef91-cdad-4cc8-bc69-3dd330ba9885",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "c0ddb8bf-cd95-4dd9-b1f6-42cb3ced9fba"
													}
												}
											],
											"id": "1ca86dd4-742c-4d89-856d-643b42175ce0",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "c34ef323-9c2f-4102-915b-36d799dd8aab"
													}
												}
											],
											"id": "d5da9554-0368-455f-a2b3-024450ed0187",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "5cbc537b-82fd-4de9-a814-4e9240e87258"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "1ca23131-033d-460e-971d-3960ad487180"
													}
												}
											],
											"id": "c54e5e95-22e9-4d0b-9920-ca000897a45b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "a15954f6-e082-44b7-a7f7-23bd40e2e141"
													}
												}
											],
											"id": "2beb461b-2207-4b6a-9a42-a6c98114748e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "79d21b77-1703-4cb9-8f21-a0c32d241ac4"
													}
												}
											],
											"id": "098ebfc9-1d00-4092-b1eb-d347c8b8d27e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "337ffa7d-fb1d-49b5-9090-39e0ff9f74ec"
													}
												}
											],
											"id": "47231196-5168-43a2-b268-4c806b5c345b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "b29e8fab-0a27-4a71-9b39-67d8feb27b76"
													}
												}
											],
											"id": "a88933db-0e08-457a-9890-db8e61ce9294",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "c0121111-02f6-437c-ad4c-4933cbbefdc0"
													}
												}
											],
											"id": "e426ebc7-c259-45ef-8985-82f89f353736",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "faea7964-2bcb-48d2-b228-5310f2808553"
								}
							],
							"id": "877ebcbb-651b-414e-8dcf-3ec5629fdeab",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "f2e4e621-93de-44f6-bd43-94d2d1ed2dbf"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "7bbe7497-3a8a-4435-8aca-61c3495643d6"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "9600563c-8f69-4289-96cb-ac1387451e3d"
													}
												}
											],
											"id": "1ec5fb18-883b-4f1f-ab66-09ebe64bc723",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "13b87609-ce8d-499a-a22d-d69ea105b52e",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "ceb22e4a-4170-48ca-8d4c-5660128c1675"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "17de0462-4d63-4056-9044-e4d57078c37d"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "6bff4c22-4300-42be-8505-a6df488b603c"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "2e3dbc54-0021-48da-8cf7-e93443ff6515"
													}
												}
											],
											"id": "8b305369-7709-4a40-ad2a-dcba413e7a51",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "a1ed5857-9c1c-4900-b188-7964a5b02c8c"
													}
												}
											],
											"id": "bf3aaa20-34b3-4567-96a9-e2055a26c516",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "43f9bfdb-c6c7-4370-954d-bbbc64c7baf1"
													}
												}
											],
											"id": "e508f3bb-28c2-491d-b2bb-5af8801366be",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "042a9e24-e354-4334-8e87-c291b838fe6f"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "70a42121-208a-42dd-ad73-517667d9b9e3"
													}
												}
											],
											"id": "155b0313-d8b1-45e5-a32b-4ceffa32d0f1",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "0aa0e14e-20db-457d-9ff8-4233a3b58386"
													}
												}
											],
											"id": "ec4b8a80-7910-47cd-8c8b-dd62ef09179f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "34b2aa2a-f4a6-4b86-af46-4b530acddbff"
													}
												}
											],
											"id": "2661f12d-85fa-42dc-8ca2-22fc2565f946",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "bab144d6-17fb-47af-adba-81e239cf3abd"
													}
												}
											],
											"id": "78c10c35-487c-45ec-83a3-f9bc01d85789",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "3190a0a8-c59a-4b1d-b37b-a3c67ea016c1"
													}
												}
											],
											"id": "1d359b23-4b80-4c11-971f-d1507d3e55c7",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "6aefe953-8779-4344-a894-ae0043e7a6f1"
													}
												}
											],
											"id": "870bf045-57fd-40ea-a1f4-dc75080dba28",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "4c93ea9b-6fa2-4b3c-bfcf-8a9e2ecbe162"
								}
							],
							"id": "2e9580a9-4154-42e2-a4de-4f2ade5af2c1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "51e36de7-cc36-4e64-be83-60470bc8dbae"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "68165e21-1c18-4b4b-ad2b-242da1d37140"
									}
								}
							]
						}
					],
					"id": "c2a5c663-fab3-4833-9d2a-df1cdaf1938a",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "f77b622d-9cf8-4fb5-bddd-08a0380a2f96"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "2c4e2410-9662-432d-a88c-cece7af8e6cc"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "e28398a2-c278-41dd-9fe5-6449df77e251",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "d40aaaf1-18b0-488f-8ffd-020cfa3e45e2"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "c6483510-2341-41e3-a431-c4eccc678562"
											}
										}
									],
									"id": "bcab0760-358f-4376-9d37-f7456db28403",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "f8780b2e-514b-47ce-9f2e-0f837ae3cb1e"
											}
										}
									],
									"id": "55a0dd13-b626-4b2c-ada9-c4a3c08a1766",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "1a4dd8f6-7a10-493f-a5d7-705e48577716",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "45144130-2116-4f4c-9709-c4ed421f0817",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "0858221e-e05f-4c3f-81d6-10fae4069127",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "461260fd-3c21-4f13-af56-d962b9070afc",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "a558d1ff-25ba-43b0-9d8a-9dda5d049b9f"
											}
										}
									],
									"id": "91760e36-bfc1-4007-8d4b-aa036248831b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "d57d1fb5-1ee4-45d8-a4dd-363ffe0261e5",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "0c737369-9b18-43aa-90ff-64c9fc9debf0",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "19c712e1-1140-46d4-a718-009c7b0cc67f",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "9bfc569f-b6ce-4427-a810-b5e696c6d0d2",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "88a4db06-1eb9-43e1-84ea-3dbb6cb9b815"
											}
										}
									],
									"id": "bab0efe8-a248-4bdb-b3d7-5be69c584832",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "b0efa724-0d0a-4c8b-8519-52c25f64d7f3"
											}
										}
									],
									"id": "48367fb3-281c-4641-bd64-7f576cc1de91",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "9f8fa9b4-f019-4416-a723-d1972de21ea3",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "419854fd-94b6-4e64-a848-dd5f983338eb",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "97af588c-821a-4089-8f49-364e84a1454b",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "f2606c9b-0ea6-4667-b312-0f3af87cf92f",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ce5043c9-af9f-4635-9d05-e6d7c2e5c702"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "e36efb87-b510-4c0d-a306-ac3da03b4db1"
											}
										}
									],
									"id": "80579750-ab27-49e2-84ae-d968f6a9aafc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "88647f3c-8f46-4e2d-9592-65ef5eb6f942"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "fe075183-7ca2-4a3b-9f78-cf74caffaf8f"
											}
										}
									],
									"id": "dc188d3d-ca12-459a-938c-d6d8a6bf5048",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "59f336f6-6bac-49bd-bce2-423475bef50b",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "3a566c27-44dc-43c1-bf55-09026b3bd350",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "75d57afc-d1d0-49b9-a632-52b600e5074a"
											}
										}
									],
									"id": "0bc36ec4-f068-4606-83e5-a0500c3ec284",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "d0067626-212b-4075-8c00-1ffeb586d050",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "0c4add69-4f28-49f9-bf2d-6792732fba03",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "96b32d92-e612-47c8-92d7-2056442ffd57",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "241e418b-5084-44f3-875c-254e82d54461",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "dd2362c5-6863-48e9-a556-78d8fac687ac"
											}
										}
									],
									"id": "d13eb081-5732-477a-b78b-c3eb0e85e26b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "a0585b94-3a66-4ced-a2b0-551e8618d88f",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "fba27fc0-314e-4a41-a801-4ea6b6de07f5",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "bfe68406-b73a-4953-823d-2ea9a75ef342",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "69587e5f-ff2d-4f59-b5c3-be60125105b5",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "4e80a3c0-2556-42cd-9225-989dc7f2d0e1"
											}
										}
									],
									"id": "e5db435e-69f7-40bc-a30a-87e1e4e1edeb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "9ef888e3-a7cb-4eb5-8f40-ad718c600fc4",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "f1bb04e1-18c8-437d-87b1-b9c846cf3520",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "de43807d-55e6-4735-bb89-71d01e73b277",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "83d1a2d5-9516-4e8c-b1e6-455979fe791f"
											}
										}
									],
									"id": "ad516826-238c-4f80-85e9-fdb6ad959b1e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "4a22b675-7603-4ffd-a735-d7cecb356b43",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "7ab16377-f5bb-4ce9-ac53-c7a6411bbf58",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "87991f04-2e80-4519-9b47-763e9474e52e",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "6fbc8614-eaf9-437d-9b75-915b571cf000",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "6fecde06-27d6-4695-a7c3-20125ed9fd51"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "331c66d5-693b-4531-9643-b2d86c12e176"
											}
										}
									],
									"id": "657087f1-6e07-48a8-a605-d3a17b84156f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "db529e6e-1264-4b4c-a983-0ca539db4eeb"
											}
										}
									],
									"id": "f2812c72-9fc1-49d7-84b9-c87b66274ca4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "1454da96-497e-4f91-914c-69995a466a1a",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "53602b62-8b50-4d73-99fb-14c487d6c3b8",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "6d4a7ca9-8e03-4524-9cfa-26981e95dac6"
											}
										}
									],
									"id": "1fd62253-ce87-4452-8878-af557fe7b1e7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "0cc26f57-4a40-4d15-a271-3fe1a0add5b0",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "2346f842-73d7-441b-b400-38da84617f73",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "2e5ad793-b12b-47f2-84ce-7ab8cdc7c617",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "57d282ce-6d17-403f-8470-bb7cbf9f5621",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "e3530745-d582-4184-833c-35cae5ee3d76"
											}
										}
									],
									"id": "a9992540-4b2b-4bc8-8f78-67fab629eb3a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "44a254f6-d2e3-4811-958e-9432caa7ce9e",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "160cfe79-69be-466a-b40d-5b7a1cdd0158",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "f34285e7-92af-4996-b525-be16fa25dfe2",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "462d33fa-bfdf-4dec-af2d-c7e5d86e6a10",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "508aa89a-b2c9-4182-a8e6-7086d058f531"
											}
										}
									],
									"id": "bc873fce-fe95-4f45-bde5-9fa4481ba1f3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "ad9cd3e3-6455-4401-992b-7a5a420797b8",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "072ce708-43d7-41a7-8de0-5526957446f3",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "ad9b360b-3f45-4e6f-9294-5200efa96c66",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "64472407-7688-46bd-9dd1-b830811f3437"
											}
										}
									],
									"id": "e68195f3-1496-4534-b082-d48e350d2e45",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "9a8eb8a4-dd29-42f6-b5d6-4de9c81cfc35",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "fd069328-1c42-416e-bb2e-952d2bc03624",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "1c15a4a0-b63d-4c62-a607-46090b20e55f",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "6dfa1847-569d-4c2a-977a-ce259a47852b",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "be8e86b7-f12c-435b-9dcb-5fb637ebeb61"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "004f53d8-7df5-4662-9b20-7e44959cac51"
											}
										}
									],
									"id": "60f343d7-2eb0-4040-98c1-bf7def2cdb29",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "8a55a451-4f09-4719-9d20-ee981946c001"
											}
										}
									],
									"id": "44bdddea-260e-4203-8e71-a4efe8866b2a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "90408998-1bcb-4a3f-8d53-6f27930365c4",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "f53279aa-6645-40e7-b685-a0439939de6f",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "8a195638-3e6f-484b-9beb-a17858f189c6"
											}
										}
									],
									"id": "bfdd274d-b088-4f82-aac9-8f84a2fedbaa",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "fada0084-7ec4-4145-bc43-4254c8563e6f",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "51032b1d-64bf-44fb-8baf-f236febbd1d2",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "18bf9b9a-cb59-43a3-bfe6-9aed091f4cc3",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "d9645fd8-0408-48af-805a-adf270ded6b8"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "6481e328-a92f-42ed-b5f5-ff6121e25def"
											}
										}
									],
									"id": "03bc7f83-d725-4be0-b32d-96180e8aa2a5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "2c4658fb-1404-4f61-b9d7-f2065e9888fe"
						}
					],
					"id": "26426faf-5cc5-4799-bbaa-0d768f33a7c2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "b376116b-0994-4182-a024-7f294adcd3ac"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "ce5eee6b-b2f4-42ec-bc16-b7a4ee5dddba"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "3bec18da-7e03-4114-aec1-3d73d792b977"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "b254f3bf-dea8-4959-a4d5-d96f0f12b974"
									}
								}
							],
							"id": "725b813c-8727-4d7e-9229-790bc1cf0c58",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "d9df2c53-1c56-4dd2-91b5-0bee5bd9a5f0",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "76d870ca-d492-478f-9760-3a15b96841b3",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "043198af-8d05-4d93-a80b-c92716b76eb6",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "477d23ca-c47b-46a0-bbec-998131adb681"
									}
								}
							],
							"id": "6ba225e4-bd50-44c2-adb6-c2871ac07964",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "c9b4ef23-4094-471a-88c7-7c76c7490d5f"
									}
								}
							],
							"id": "8e01df6b-c2f0-49c4-a7c5-15169514fed3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "863ef033-2eda-4ce2-91d3-51032de3085a"
									}
								}
							],
							"id": "8c9688f3-58f3-4859-a7d3-25f03f09bd42",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "e5f49cf9-1158-4e00-a098-b6beb1fdab5e",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "25cb1ca1-c311-43d5-b640-c593288d057c"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "6b37b778-41d4-4fa5-9a2f-de0f83699313"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "a57e4ffa-4d3f-4db8-852d-61b6afaf72ca"
									}
								}
							],
							"id": "d17e876b-e57e-4dae-9f96-48f2014e172f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "f3bf78cf-42f1-48b5-b009-cf6c3c1d40c7"
									}
								}
							],
							"id": "e2b00c9e-bef3-4815-9512-9816193d5360",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "02144cc1-284a-46e1-bd84-6b6323e70776",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "f7cd9515-1c3f-4466-ba78-bbf8a444391c"
									}
								}
							],
							"id": "b9d40416-613d-4156-8c0c-232cd9e9da05",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "795ddde1-72d9-413d-944d-badd0ad18890",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "2ea29cf7-3ee8-4b8d-b19f-eee8f0337019"
									}
								}
							],
							"id": "e3a2cd96-284f-4d46-bdb9-2e685ffed011",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "8e32e0ac-a0c4-42d4-8047-a42818e0a08c",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "93d06151-6fe1-472b-9478-f76fe63bdf7f"
				}
			],
			"id": "c8eef885-53cc-4342-a578-b868f0de5f47"
		},
		{
			"name": "Tests Copy",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "e5cb667c-79d5-4576-b5d9-39419b04ec54"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "d88bd79a-f744-4f78-9c3e-a06c27bf03f2"
											}
										}
									],
									"id": "185ae3f1-c6e2-4042-9e3c-b7f0c3a09d0d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "a4510a4c-b51e-43d7-9edb-cb7f2ad979e6"
											}
										}
									],
									"id": "24caebc4-4bb7-44fb-a0e2-a7eb44877446",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "a14d780d-b10a-482e-979a-bcd316165551"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "892d3e5f-caf6-440c-b600-939fbfa47780"
											}
										}
									],
									"id": "2c6fc0f3-7c73-4641-b455-257bdbcadaf5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "f05f2251-1825-4be2-8d6b-3139bb5736b5"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "3f74791f-aa02-421a-b781-335c1c4b5b2f"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "72660cb6-90d5-4483-b6fa-26a45239f210"
											}
										}
									],
									"id": "bac5cf78-ffa9-47bb-bc95-7a5839e3e2f4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "fd6863f1-f9f6-44f7-8170-31b54912d95d"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "63dcc736-9488-4c86-9d4a-4723476b27fb"
											}
										}
									],
									"id": "14520ec9-f156-4c20-8f48-f36a8460e1d6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "9a1f2652-c521-4d3b-87c1-ca0892d402e5"
											}
										}
									],
									"id": "bac98edd-1145-420c-b667-de67ba68327c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "053a174f-b4fa-4243-973c-d2a6bb6a5272"
											}
										}
									],
									"id": "eb25f0c8-32fc-4783-8af7-289a43da3349",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "e86e3d54-ba7f-4969-b59b-f1b885d0c9fc"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "61969aaa-8b3f-4976-850e-ef59c5b17453"
											}
										}
									],
									"id": "118a8d2d-6737-4873-84f8-74d70a13e4c5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "30863b00-7191-434d-9396-b1dda7f1533b"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "4c68e588-d9ab-4fcc-9279-2fba90cce9ba"
											}
										}
									],
									"id": "08f38769-13df-4c49-bf28-2ca7578068ee",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "a47b7461-d534-4618-ac2d-65252f15dc64"
						}
					],
					"id": "6430b584-21b1-45bc-a8fa-ed8a0ec20b26",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "26e3158f-6099-4b9a-8e9e-b3467257ded1"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "96314c62-b645-493e-9cb1-56f4c74366d8"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "4a13c8d5-0069-405f-9afc-915559748605"
											}
										}
									],
									"id": "76354f59-63f1-4035-8d0e-2ccfbaab1a6b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "57af46e8-97d1-4f14-88e0-aaa271e38399"
											}
										}
									],
									"id": "a690552e-04bf-4dab-87fb-b86d27a95f43",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "2a49a4fc-8ea5-4f81-9bfc-a02fa0c542cd"
											}
										}
									],
									"id": "e2ba525d-11c5-44da-ab2b-34583756b99c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "40e309bc-cfdc-4c95-b11e-47177b466083"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "b37ab5e4-0f63-4b99-905e-1ef7d3cbf78e"
											}
										}
									],
									"id": "408745b7-d605-4f5f-9a70-01df491d30ec",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "5006ed45-d861-4194-a379-54c898b8543d"
											}
										}
									],
									"id": "d04fdf4d-7c0c-4233-83e9-8533037efaaf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "d8164738-0270-4f97-b7b6-48f322f8cc83"
											}
										}
									],
									"id": "9447423a-147d-4212-b180-6278fddc7787",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "507f6f29-04d5-4ad5-a31e-ca36a81db72c"
						}
					],
					"id": "88d0899e-d101-40bb-898b-3c1a389e552b"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "6bc4ffdb-7f95-49b7-b906-5ca9ead1ec87"
													}
												}
											],
											"id": "aaa7d61f-6e3c-4ed8-a487-743f6febf958",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "7b3935e3-ac7f-481b-a1c1-081b32da4d26"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "38621cec-5743-454c-9055-9d3aa12aadaa"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "deb29fab-3457-4946-9236-33cd02da133c"
													}
												}
											],
											"id": "bb578041-cb7c-4481-8f5a-d7e45950c28a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "0dc4bebd-3b30-4596-8910-6142ac137b82"
													}
												}
											],
											"id": "7ee97b17-b92a-4752-a4e8-47bdacb3e98f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "965b60a4-8edf-4bfb-bc21-38698839bb24"
													}
												}
											],
											"id": "fc2a03cf-3cfc-46f3-9d7f-5eaa3aeebbe2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "651276f7-496a-4e26-808b-370a4eb9d930"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "1ba3986b-8c3c-451e-a3cd-a6fbfd325861"
													}
												}
											],
											"id": "19345471-0732-41cf-bad0-316bb8b7409b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "47874065-0f76-45c4-87ed-d5b2442a6aa2"
													}
												}
											],
											"id": "d96dce06-7b1b-4856-ab38-762e866d6b0d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "c5bfa968-0d01-4bd7-8fa1-352ef53f378f"
													}
												}
											],
											"id": "a2a8a365-50c0-40c9-b630-540a9546d2ea",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "968d47e2-0c1d-4a39-a32c-542bfbfa8081"
													}
												}
											],
											"id": "b42058aa-b9b1-4f39-ab1b-3f68c0ab2982",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "cb345008-91d9-47ec-b12c-6c6d138f0e49"
													}
												}
											],
											"id": "44b58981-99a2-4ddc-ae8e-dae08093e737",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "eae356f2-6e50-48fa-b20b-ceebad8ffcf6"
													}
												}
											],
											"id": "fd5aa0ea-338b-497c-b6f3-8f7449f4a339",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "1b31393c-7ded-4278-830c-4a145106d529"
								}
							],
							"id": "63e7ae0b-d063-4c15-995f-48420237ad07",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "508a8f54-ef0d-44a2-a985-0fc7b404a502"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "d858ea38-4296-4f4b-b3f3-1ae3c6efe281"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "7dbfbc28-684d-4c0a-a1d2-205cc071e925"
													}
												}
											],
											"id": "4748d214-85f2-40c9-bff3-73dcb81941de",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "0e5befbf-e485-4e0a-a1b6-7048dbee6eb3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "766d8c3f-ec7b-4e99-80b5-5d813f3c3865"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "746d3d83-ae1f-46e4-b08e-77fd0edde921"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "e371cdff-5ee9-4743-89f0-543400438855"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "f7c52f57-e24e-4c8d-9d98-689e1ce47a47"
													}
												}
											],
											"id": "4b6fb30a-e8a9-4b76-85ae-e2df6cee94b9",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "e5fcab11-28cb-40ad-b318-e74827cd235d"
													}
												}
											],
											"id": "184b4b7b-d68f-4220-b3a0-a2db4c67c88b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "f3d7c7a2-8498-492a-817d-8a82a9d90f63"
													}
												}
											],
											"id": "46547fe7-ec3a-4de3-9aee-094d0751734f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "87947691-077f-446e-ad37-2c2c3825fbc2"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "9460c804-7ad5-4656-94fd-0a492703a5c7"
													}
												}
											],
											"id": "5b8b9922-f538-4dc1-98e7-9d81d06511ea",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "1fd9973b-7a5d-4ba4-91a1-edcd234bb3af"
													}
												}
											],
											"id": "aa36aad7-3c6b-465c-98ab-3e41c52dbe20",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "51acdbd6-2f18-41a3-b247-ea2fb0f39651"
													}
												}
											],
											"id": "672839ee-19a8-4e6b-b086-54f3b401d6b6",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "d3d848b6-ec3d-4b40-a3f3-ff09a87c6c71"
													}
												}
											],
											"id": "610ad69d-1bad-47bd-a15b-1c0432657cf3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "31aaefa4-f3e0-4d2f-857d-191c367e1d1a"
													}
												}
											],
											"id": "61542ab9-60e3-43fb-8e20-46c31925898e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "d273536f-857e-40eb-ad07-60ea87bd57cc"
													}
												}
											],
											"id": "ebd00c79-a370-4c5e-b91e-78b581b03fa8",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "b4a62895-73b8-4554-8570-29525a0a8b72"
								}
							],
							"id": "c0ceb77c-87f8-4636-985f-4e30841d24d1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "7f2c1f41-723d-47a9-a42e-c82fb5b3e6c8"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "b05ab84f-e6f2-4c9a-ba45-949cde945a57"
									}
								}
							]
						}
					],
					"id": "5ef00554-44cf-4d2a-bbea-44c5f90f7241",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "01485f54-925b-4747-bd5a-33786836876d"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "03728a00-eed4-41c2-808c-e2ffc6a01ad8"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "b4eef1e2-f5f6-406c-af99-04039b789c52",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "ae67e894-ae8b-49a4-9b65-1a9996c799e4"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "6b6d1df1-7862-4b75-b65a-3df6d09e556c"
											}
										}
									],
									"id": "1e3eaf63-db21-478f-9760-0d7da3d2f034",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "7b9ba3c7-1765-4b20-a097-4c0907267acd"
											}
										}
									],
									"id": "5511f2db-6ff8-47bf-b5c2-5f984574b284",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "14ab6db3-8328-431d-9be7-ca3f3f874d9e",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "c42d138f-5a2c-4594-9ba7-ba3ea2a80384",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "14388e76-ee70-4e44-aad7-2336058f7c92",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "6071d4d6-01a4-4d14-a1e6-9532c079f08c",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "c99832ea-bf74-4587-add9-192682726305"
											}
										}
									],
									"id": "e7e281c0-5ac2-4dbf-945e-b76beef48f47",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "c002c75e-9448-4b5a-9fb2-66136317497a",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "ff04c48c-2969-4a46-af3c-aa85c0ec9931",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "fa30a77a-f524-44c5-a0be-4ff689fc5dd6",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "0c061d28-a242-4710-ad29-c274b0cd6866",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b07d1a5c-7e31-47d5-bd29-662837cc3962"
											}
										}
									],
									"id": "fd6cce4c-6489-4d21-82c1-53ed4e84ec35",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "76dcde71-5483-4b31-8596-174a81d3db90"
											}
										}
									],
									"id": "6773e4ca-f46f-4d31-91ea-ab810b423428",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "e1301f8d-9c20-430a-ae0e-5d36aff57797",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "7ed3e049-0f3d-41eb-ba6e-97d80fb0c810",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "d92a67d0-b9f2-42cf-bceb-fc88a4e5664b",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "1a70cfe4-0e62-4fe4-9008-cc9d9a64f2b2",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "a81ea03f-de00-4aea-9e38-1300f33ff1c6"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "b9d3ebf9-6721-467e-a23e-636dbb196d82"
											}
										}
									],
									"id": "764a7232-2bf1-4720-974a-d0b00e2ff915",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "92d5e79b-7b80-4ad6-80fd-6a806ba5dd80"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "7a43407c-dc1d-4455-aea4-207c730d5d21"
											}
										}
									],
									"id": "4c529572-6ffc-4564-bc09-0ebfeba3f3d4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "6733a9eb-9df9-4a0f-9fb6-e065b43ea723",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "4c16fc64-111c-4583-8be8-9ce3ba2e749f",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b4896d76-b90d-4099-8673-84e7553ed64a"
											}
										}
									],
									"id": "43219a7f-379b-4084-838c-7925acd4a1c1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "efee1444-e1de-4149-a9fa-887b53c66730",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "e1846b71-4a36-450a-ac8f-cf736f471244",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "344be948-4181-45d0-b749-b333d1362186",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "8d80dae6-5332-4caa-b01f-04fa5829d6ee",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "3ec6ff24-50af-4264-aa48-5110abf817bd"
											}
										}
									],
									"id": "39f90d7a-94f6-4786-b0bf-06d165a2de37",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "3372ea8d-529e-4053-b3a4-8e7a6379adc5",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "cd325bf8-067a-46d1-a5a8-6f114f3aec00",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "7eba9f81-e502-4185-8f0f-9598798abf74",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "b7df8f2b-2b28-4bce-a4ac-a584dc6ac61d",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "cc68970a-e5b3-49a2-ad60-535e5e0fde55"
											}
										}
									],
									"id": "973e18d5-3ded-437a-bc61-c778f1790bea",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "7cc59119-57a2-4bee-952a-d2a8b63f166a",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "572d2c9a-2fe9-485e-b2b7-1112dd96c598",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "a207e4ec-5aa3-49ba-9998-ac28100ef3dc",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "d8bc10f4-77bf-4d13-917d-eee18cdbf5dd"
											}
										}
									],
									"id": "435f5237-a27d-4ca9-8fa5-2ce52c75946f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "b9d3cf0c-b326-46e4-8fb2-ca8397ab5215",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "c598cddc-53f5-4da1-bf88-ae38e626cabf",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "25cc8a51-77b5-423d-9977-6044b58bbbe2",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "a5470c77-9f79-434f-90e9-766509d273a9",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "c37d2e41-dc60-4c13-b86e-b980a43d070d"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "ca5fb956-b090-4f10-888b-8733a9cbe73b"
											}
										}
									],
									"id": "eac31a8a-81ba-4896-a2a7-6e316202ea2e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "2bf47155-bd01-4223-bf48-42b2da78b25d"
											}
										}
									],
									"id": "52a40f9f-668e-49f7-8223-d4044f8931c4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "18d976d6-c886-49ab-9aac-9bbc3480f216",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "7430ad35-7445-4a89-9270-16f64a967975",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "f0024bae-0c84-4576-ad9e-d1b50e99c5b9"
											}
										}
									],
									"id": "775f6b63-ba8f-497d-ad21-813455d878ef",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "6eb7a38f-b3b7-4a97-9eb9-a2a9660a5852",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "da04c316-6cdf-461e-ac2d-d939b4f8f9a0",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "d06266c9-4b15-4a60-97bd-962f0b0752e3",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "f6e8a483-4f57-423d-97e5-780ca0b13b89",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "e1a3a775-f666-4450-bf9a-7de6d804078c"
											}
										}
									],
									"id": "d69f6c94-e473-4317-b879-a2371476e96e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "c109ebcc-a78f-4863-bef0-8e78546257f5",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "b72467eb-d183-43e3-a775-6422d20948ed",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "a10efb19-1c4d-44c5-bb2e-3515ffda7347",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "df4bacfa-20d7-458e-bc5a-353b1b4c9350",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "6e863dc8-5319-4ea0-8e35-c3a1032e0d9e"
											}
										}
									],
									"id": "c1479d21-5ee2-485b-82d0-75e66916a659",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "6e2fe9ae-af0e-47bb-bc92-bf2c465a4e14",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "51fc5ed4-a73e-4688-9eed-0deb014a141d",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "234509d6-1ab4-4c23-88cc-7b107b4eb1ce",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "5e65ac51-221d-4fc3-afdc-da878278f3f4"
											}
										}
									],
									"id": "f1e1cfb7-b256-4f5c-801b-46c6c50a8d5f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "a46f17d9-0364-40d0-8833-7ed3a04c1a39",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "2073db8b-12c0-4404-afbc-d0ee47caaa00",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "60164f0b-c994-4510-80aa-88901f3958cd",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "e834660c-32c1-4719-b524-d992946cafeb",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "bce839f2-05ff-4d01-aade-a88b9f6f6823"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "a1d35a0e-4d62-419d-bf2a-a39b46c44092"
											}
										}
									],
									"id": "736c81f0-e438-499d-91d9-27bec98532c5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "5cd1331f-3f48-4ab0-bdbf-f416aea0885f"
											}
										}
									],
									"id": "2fdcfb46-72cf-4c0d-b90e-7b7d4e5de426",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "bba57640-e846-48d1-aa18-01be6323230b",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "b3a81799-e8d3-4de7-b715-ed6a9b926e77",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "f822b8d5-5c12-4c47-933f-827e251eee6d"
											}
										}
									],
									"id": "43486f62-882a-4b56-b4f7-de5c1801e369",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "41997e8e-e5e9-4226-bced-60b3de7608a4",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "d961327e-bcc9-4ffc-8912-9edbc9333fc3",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "426bdc2c-c789-404f-9e3c-091a6bd1a386",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "2b67aa27-84d0-4839-8b5c-053c8240b8f7"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "09847c20-67d2-4c2c-abad-a43f0a3a70cf"
											}
										}
									],
									"id": "c85896fa-7dd9-4516-af0e-9b7f198be276",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "76652587-bca2-46f6-a55a-5cb7db567ded"
						}
					],
					"id": "5bc62cf6-4ab4-4024-8474-2c6a03c26a21",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "a9e7fee4-a9bd-408c-96f3-eb389bd249ae"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "f4209a1d-3352-446d-b978-7e80cd64980c"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "9c7463ef-2eab-4b09-a324-7f8ee9d3a765"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "f2a39891-c73c-447d-afb0-4aa7c859568d"
									}
								}
							],
							"id": "d51fef22-56cf-42f1-b837-f9e69520d127",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "db7ee567-5ff4-4b96-aa9a-3963dcd38711",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "ff2177de-e3ca-40a6-8d7e-e4a63b5e119f",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "6ea9c9a4-4854-4ea3-bcf4-f1a0443d0983",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "c0a8ee6c-d2f7-4719-89fb-0873c08503fc"
									}
								}
							],
							"id": "cce29c31-0013-4ff1-849f-f051aa49155d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "7eda50b9-9deb-4a20-a6b0-67811b1388a1"
									}
								}
							],
							"id": "dd7826c9-e35e-4397-9523-aeb0d57d3c8f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "2bee09c2-e240-4882-953f-f8d8e5dfd260"
									}
								}
							],
							"id": "9356401d-ee9d-4193-8c5d-5a1678dae432",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "94931769-8b2f-4815-a4e0-2dba9adc506f",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "cae90d15-c259-43ab-b8f1-bcde36dacaef"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "dc0743f5-34b4-463e-8cb5-5fb0ac286f9b"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "e3b0bd16-1c69-4259-8a7d-b75032d1e811"
									}
								}
							],
							"id": "4113650f-8f8b-4a6f-a28f-0a258c5c2bc2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "4053577b-5434-4655-9fbe-fcd919f1ba17"
									}
								}
							],
							"id": "1f946da8-3656-4586-8fc6-44c6f6bc433e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "ad35d9d1-fdcb-4d37-94ac-75cf93ad9a5a",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "14d88263-61d5-4c4c-aa6f-3bf705e58e68"
									}
								}
							],
							"id": "4659ab5d-5b7d-458d-b77f-ac972089a1cb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "610876c9-298e-41e9-a986-bd6e802202f0",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "d15a021a-25fb-4ffc-a8e3-0d709fdc206c"
									}
								}
							],
							"id": "44f81e21-e317-4042-aa04-ac8634196c01",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "1c07cdae-3b57-430a-abd6-fd03974030ce",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "c4a33ab5-d3ba-40b4-97a1-3f9e00413a7c"
				}
			],
			"id": "79b3599c-c7cc-41bf-852f-5ece2127b675"
		},
		{
			"name": "Tests Copy 2",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "0ac8fff6-2562-4926-8112-7b52f85ff670"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "b79eceb6-6184-4344-9ac3-6723a0bc2bb1"
											}
										}
									],
									"id": "df84402d-587f-4c3f-a2cf-cf6bb719c741",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "7ddcb6e8-f18e-4b2f-b2c4-a46586a6bb7b"
											}
										}
									],
									"id": "8e698a07-6c2d-4f57-8753-77512f0b8ed5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "62af2868-6c98-456e-ac20-a889cd7c5062"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "9261437a-6554-43c9-a8ae-e69f424da5f6"
											}
										}
									],
									"id": "fef1577f-5574-46ec-865c-a152216634bf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "6aeb44e6-feba-472a-9ead-59d7a6cba7cc"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "9f413548-a6f4-425c-94c4-eea45884cb89"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "229ab378-44c9-41b6-b8e9-dc42f681946b"
											}
										}
									],
									"id": "b4a3dbd3-1201-4579-a630-e20b98bf9092",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "f754700a-6a18-48e4-b7d3-104c0e0bdcc1"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "2d4e4667-f50d-43f0-9bb5-9ce3e33dcdc8"
											}
										}
									],
									"id": "573f4bd0-37a9-4300-988e-a8008f62e45a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "f762c852-283e-4df5-9bb6-51bdd67add36"
											}
										}
									],
									"id": "79acbb1e-ce21-4db7-b6b5-2081e23b1898",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "12215cd3-57c1-499a-b46d-635a865b2de2"
											}
										}
									],
									"id": "f8968fe7-a9b1-4bf8-8454-663dd417dd0d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "f2428f2b-3db1-48ce-9a88-e11f2ce5dd01"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "c1715f1f-4605-40e9-b6f7-84fc96dd7707"
											}
										}
									],
									"id": "cd5730e6-11a4-4ed7-a3cc-e610debb6616",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "864a0f57-4b2e-41c6-a03c-f1dc2a01084d"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "595c7b18-2ac2-45a2-9b46-4db689c2f144"
											}
										}
									],
									"id": "52efb963-dbbe-4a9f-b7b3-d82478d293eb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "bcb83ea2-c416-45cc-b5de-326219253df6"
						}
					],
					"id": "9db74314-0dff-4e88-8334-4adf42b9b84b",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "157a789b-5e57-4f11-89c4-2e86501ec77b"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "88eb4c4b-5240-421d-8aef-5eb199b4dc4a"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "d1f274a2-f8cc-4e12-a52f-77b28393e273"
											}
										}
									],
									"id": "2a70f4b5-d7e4-4c24-9825-b8495a982f37",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "b2cc65cd-650e-4429-bc1e-181e1d55d616"
											}
										}
									],
									"id": "5eb30138-3b6e-4425-9aef-7246294c4ea7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "5884a9b3-8f5e-4fb7-a4b1-9f12821725b3"
											}
										}
									],
									"id": "6beb0a07-de81-481c-8d0f-a78fd8f0ddd6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "95e1edbf-8d3a-435b-b038-fe99c641f565"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "ce72255a-07c5-4b06-b7ff-9381ac9acd9c"
											}
										}
									],
									"id": "82ad7351-a173-4930-9375-810ec409228d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "35fe4f49-2bc0-4f79-978f-0282874f80b7"
											}
										}
									],
									"id": "cdc51869-f059-4945-8396-ec0276ccd838",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "f2f4b311-5ea2-40e6-8761-1d91b5506a33"
											}
										}
									],
									"id": "57765a6f-5848-489d-b918-447b9c8d03c3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "9dbffd7d-3ebd-4fc5-b847-4dfb1be28c33"
						}
					],
					"id": "c80186d0-6e07-444c-b4ab-9cdd63b96d7b"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "9991b80a-7941-4e6b-a76a-355e46bc16a5"
													}
												}
											],
											"id": "ce42134c-370c-40e9-81d1-a3ec51da710d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "daee25aa-4132-4d86-9f44-d60dbe1b6f4e"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "a2bd0a61-4be1-442c-aa13-0eacf46e99ce"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "a5253ebf-014a-4dcf-90f1-8e29ef4c6bde"
													}
												}
											],
											"id": "1242dd46-77aa-46e4-a9de-3f659be74deb",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "0511f209-456f-41ee-a450-f5ee6a05d1f9"
													}
												}
											],
											"id": "41484eec-236d-4914-93e6-d0aa95f8f79c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "ad2082ad-c23f-4ca2-8131-07b587b0497e"
													}
												}
											],
											"id": "7b78c7bc-2827-497f-97b5-abade722217a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "d76f42a1-69c1-494b-9b03-f07390b66c7e"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "54a2ca1c-925a-448d-9826-cd66d3725a35"
													}
												}
											],
											"id": "d8ea6f56-0af7-44df-93c8-acf56678d977",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "308140db-5b9a-44d4-8a94-b6f3a78f250d"
													}
												}
											],
											"id": "7b6b8362-5c63-42c1-910f-74553d260c20",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "d5b0e7ed-0e6f-4ad0-b716-a0aec9d21eb4"
													}
												}
											],
											"id": "33814cbe-696b-4c7a-ba78-c714611e039e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "5b988f4a-7c82-4ec0-b190-2ce586a39a6a"
													}
												}
											],
											"id": "c0ff8d0f-3059-407c-8c15-8ddffaed7a46",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "57d88d89-9406-46d5-ab06-e018359b36ac"
													}
												}
											],
											"id": "4e072db5-302a-4653-92ac-b0107868db8f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "a80ff950-8611-4783-8906-37fc3d15dc71"
													}
												}
											],
											"id": "4e718d34-0264-454f-bbda-6a6cb94d8b05",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "d29ace7f-9480-4fba-bc1e-76aa90990c63"
								}
							],
							"id": "d5c1c7c2-db81-423e-8870-efd29b77e0fe",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "46e77edb-3f0a-4bf0-ae38-deb87e117507"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "17da3a5d-dd4a-4269-8576-98a4e74693dc"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "ad22bc99-5b2b-4176-8912-f988c3058664"
													}
												}
											],
											"id": "4306245b-b461-40d0-9357-2896bf5eadf5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "a3a56e61-b259-47f5-9841-d7ceca0e7666",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "781b7388-9a51-4c32-81aa-c25b29fb440d"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "e988f218-4d86-4e9c-acf6-ac5f27a948bb"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "c5adcfef-07d4-4aa9-971f-5ad8f045dee2"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "2285ee5d-bd63-4c68-9b7f-e0e19e18b623"
													}
												}
											],
											"id": "98445d39-90b2-4656-8412-2ccee4c9b824",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "cba7593d-41b3-4d82-a464-c03d3fa07f46"
													}
												}
											],
											"id": "8235f5d6-1346-4f35-b588-cd50dce263bc",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "0ef3910d-8ffb-46cf-8416-57d79448ffd8"
													}
												}
											],
											"id": "5185048b-9aa6-4f16-ad15-1b76c4465d29",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "922283a3-496d-4560-b037-c578cf2b9830"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "1a2ea6b3-3a29-4910-b5cf-9b3c66eb3064"
													}
												}
											],
											"id": "a203b184-876d-4c79-b305-8796bbc1d87a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "76b3930b-6ba3-4c52-9bc9-c212708260c5"
													}
												}
											],
											"id": "09378a8d-26b0-40c7-a454-ef9d5825e791",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "8e4ece15-a5b7-4655-aa27-cfd1c8dcc5bd"
													}
												}
											],
											"id": "24d99d3c-e437-4260-b15d-708828c06995",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "d19822c1-ba1b-40f3-986e-de2a06759aa0"
													}
												}
											],
											"id": "5ea24458-f759-432a-9cc8-35ea4c791981",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "b6190981-ca86-445c-8019-d793b3ea5ff8"
													}
												}
											],
											"id": "da3c9c59-4372-4279-a574-5fb269bd611a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "4907600a-5f73-4670-9335-3a5fc5f270a1"
													}
												}
											],
											"id": "f066fc08-5c81-48e8-89ed-9a0a461c64f9",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "88d2dcd0-d572-4527-876d-02ea7eaceb9c"
								}
							],
							"id": "1a598af9-b058-40ae-9218-589767b65c2c",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "de12bd7b-02b8-47fe-983c-b0d3bd7346fe"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "907d0430-a5eb-445c-b0b1-7cb58ea10b65"
									}
								}
							]
						}
					],
					"id": "be97844e-566f-4a9a-8ec8-80c3d903b565",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "d78191d1-1484-42f7-bf79-ca47d0e59b7d"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "1f095cc6-4e6c-4bad-b3e0-d877257ca810"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "b1aaf2b1-419a-4984-95c0-6a88c8caeaee",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "bec63a0a-e708-4848-adad-c0fa753a8966"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "37f41bac-0542-45ae-9383-e7ed78312565"
											}
										}
									],
									"id": "763ee77a-62fb-4788-bc49-b6f882335d57",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "86eccd2e-7564-43d9-b53e-4ba085bac9ac"
											}
										}
									],
									"id": "09cd1177-080b-442b-b04f-bfd44ea2acd2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "bec68878-4375-4ffc-b27e-afa474315183",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "bdeee743-a45f-4fc7-afb1-66f74fc702d0",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "b968cce3-c0f5-468e-9671-755c02424bfe",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "5540e239-ddf5-45a6-a8cf-5b0d7b462b8c",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "32905929-d351-4c76-958b-f66b670c02b5"
											}
										}
									],
									"id": "b6f2394a-f680-410a-83e8-2f100ade91f7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "67e6fe5f-3dd1-4247-8d45-7d5a03eed446",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "d81af0fc-4494-4ce7-b360-a005772dcf43",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "2d8d4e2c-fd6f-404d-b886-bbb85df67512",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "53fda963-b964-46e6-bc96-fbcd16bddaa3",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "01f96db7-de3f-46a9-b87c-e9f525a42227"
											}
										}
									],
									"id": "5aaeed2f-600c-407f-b516-e0f439cbd9b9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "533b894d-827a-4af7-a2b8-2498489a1e66"
											}
										}
									],
									"id": "6dc197ef-fb5b-4d54-be98-5bf42d58b7fe",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "29959e81-9870-4931-b6bd-78c5ce9e1261",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "d12de8cc-2ccf-453c-a87f-1532fe067e6b",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "2fb474d1-e141-4e57-9bab-5b02759b79e9",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "3efed115-4cbf-4820-b38d-b5ad733d7f2e",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "00bbf915-13ca-402b-93e8-2727a8acf6c4"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "cc9d6685-3544-4e1e-8ea8-d87aa3822615"
											}
										}
									],
									"id": "0e25ebdc-ab82-48cb-87ca-30fb10d8ef09",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "3cd54852-1ce5-4a99-887b-f7aeb93d1e09"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "e9ee2cd8-0c23-47c9-bc41-c6769daa97c1"
											}
										}
									],
									"id": "eed3a3d4-eadd-4e0b-b238-8e4fd818942b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "37c4ffd5-7560-4474-bbeb-e7320a85d0c1",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "efb0cf14-9010-47ad-9047-7d8b8c822401",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "90dd6110-5e28-4ab5-acb1-c06cf55aaf69"
											}
										}
									],
									"id": "415a3ef4-b068-4943-8265-d94ee57ece38",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "8a6b4e41-d6f1-4079-8d82-121054ca3749",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "eb7d138c-fe7d-4681-9db2-c91e7ad67b1c",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "e1a30f32-2f90-4c18-b4fb-21d1c1d32f4d",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "9757314d-b71d-4df6-96fe-aa790326140b",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "681a6700-2fc0-4ea9-917e-3d29328d3972"
											}
										}
									],
									"id": "ccc6b442-72cf-47b6-950d-f47040c1cf76",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "20e12d2d-a2a5-461d-bb6e-a270420eb184",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "1d49a314-19c7-4163-b944-c20e40ddcb17",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "1e9d36a9-7732-427b-9019-887aaafdbec4",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "edacdeca-9706-4d64-aff6-e8a13ef61c2e",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "cccf31a3-f6f0-4e01-b0f1-7dc1e18d5310"
											}
										}
									],
									"id": "ca6d4df3-d04e-42de-95e1-bdbb5f849023",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "c7ea6c75-a41d-47b8-8000-e2a39c9b0de9",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "c5604ce5-cc14-440f-b6c7-218acc53ccc3",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "cae25a49-8a46-47ee-8c35-3e7e1fac7800",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "cdb95fff-e5db-48b5-83c1-318db313c851"
											}
										}
									],
									"id": "85c7dad4-0574-44c3-a49d-9d204fd6fe8d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "759f2117-9a62-4d16-b562-d0c3431e4203",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "e7d7b8fa-7465-4e89-b5ac-334938667b54",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "33a36789-511e-41f2-81e4-32967a93fa99",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "2a112e51-83ef-463f-b805-b1f1163a1f2f",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "fb0bc818-830a-42b5-ae36-5963a7ea5294"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "5e485c65-c6bd-4987-9a60-431893a2b2d8"
											}
										}
									],
									"id": "743917b4-2b9d-4026-82e6-23c0d77d9ca5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "1ae73d8a-0b5d-410e-b26f-c01539ab6184"
											}
										}
									],
									"id": "1d31ecd6-099a-40f7-aae0-70a45896b114",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "f8730fcc-ffdf-4e3a-bf77-a3f848c42724",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "5cddc97f-e96b-4ad1-be35-bb72afdc36bc",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "5a866db6-9346-4f96-9daa-53606b9648b6"
											}
										}
									],
									"id": "ce4f2619-9409-4c57-97a1-9c7842fc27db",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "d7dadf3d-2b0f-4e7d-b3b0-682e7b3697f0",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "67ca06b1-eac9-47b2-9e68-e8e146940f2b",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "6c3138ed-6b84-4d34-9f01-600da0bca2ae",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "d833693e-d3ca-4dca-b1c8-e19502ed5e52",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "99452603-e84f-47cf-9c68-46f59e42ca5d"
											}
										}
									],
									"id": "425fbb58-1933-4507-9640-8f2a57d02a0f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "49252631-b40f-4811-b7cc-0651b5bcefd8",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "955a0375-7b23-42d5-8e3a-69a6afff54d3",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "d5961afb-2855-4dff-b14a-65920e4e3f58",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "560390bc-4f97-4277-9a65-456e504548d3",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "02d91fc1-047e-44a8-b4b6-2aeb892859dd"
											}
										}
									],
									"id": "23376b52-14d6-4ab1-970e-c50c832240b5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "dd700716-37b1-453d-a10c-4eb741607f10",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "310256ea-ecb5-4150-b77d-10b8539dfe6f",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "fd0b11f4-60d5-4b05-a30a-4e31e8fb3a0c",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "54b32817-7434-43d9-ba04-32b494dca164"
											}
										}
									],
									"id": "260bd211-9d9d-42cc-b27e-29146b6b29d7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "7322daa0-0193-4e14-9bbd-cea5e7142918",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "8b33c056-4b42-4a44-b0af-9138d2a9c21e",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "4b62b37c-05fc-441a-823f-7814220431bb",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "32f3a850-2b4b-4f8f-9202-f1adf06e828d",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "a65db7b0-a963-4ce3-abeb-69c00d6c1cf3"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "ff8f4ed6-c801-4007-bb85-de64a4818363"
											}
										}
									],
									"id": "598a7027-895a-4880-9997-713cb0b6f5c4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "0b375644-f7ef-44d8-aac4-62f03b8152d4"
											}
										}
									],
									"id": "d0603c7c-cf65-4879-acda-e035ef9d4974",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "84749a78-60b8-4344-bedc-cdc05684e96b",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "e8185658-9e4a-4cb3-841f-cee814f8ef05",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "4da82d64-74d6-4b84-84f3-aa7ab93e78f1"
											}
										}
									],
									"id": "e942a8f2-2ab3-4203-baed-2fc175734b5c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "6fd11704-bd6c-4e30-a539-80763f531c1c",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "fb9feb75-6a27-41d7-b0f3-a6140413788a",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "33202ce5-42d4-49f8-9b3e-d19ea347829a",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "c4049080-86c8-4edb-a75e-3e0abf6ad5da"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "652da011-c319-426e-90ed-8dbc3d4bf2ad"
											}
										}
									],
									"id": "eed03f6c-5223-43c7-9450-230817824e0b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "15abf912-43e7-4c2c-8103-15f21a77348f"
						}
					],
					"id": "0769f7fb-5d0e-441b-a9c0-28cb47c1f4a6",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "ab0bc94e-6437-4816-b82b-fe4ba8e9710e"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "55930286-da3c-4559-bc5c-43e991617d73"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "2d23946b-9c48-4a72-807c-b6be4e571d43"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "40c8a749-1664-4fe1-a349-2d89d05d6650"
									}
								}
							],
							"id": "dda2f9ee-f25b-4bf1-8f23-54a21ccd1751",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "1d69487d-2d4c-4c8a-899e-f5ac6cb86506",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "68441e80-0517-48a0-8381-a2b7a57316ca",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "f91afd9b-9d23-408d-8195-6d588185979e",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "39479c78-8a14-4778-936a-29a20d39a040"
									}
								}
							],
							"id": "f9a1a789-9710-40a8-bfd0-3aee15dc9d60",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "a3e52869-94de-4754-b3b0-812436bc706f"
									}
								}
							],
							"id": "90807f1a-2854-4d83-9120-72f32e91d949",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "332e40f3-9bf6-4827-b7a8-f648d6f562b9"
									}
								}
							],
							"id": "f99c61df-c4c6-4a1a-9707-7b00a0a82a1a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "806ff374-80ec-4eb9-863f-790552251228",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "960dd001-e258-463c-b9be-36e156e3606a"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "cfbea9d2-0e61-4a5d-bf31-e618d3fd1e50"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "62357de5-6ba8-4f6b-9177-d782655ce765"
									}
								}
							],
							"id": "99956721-d9f3-439d-ba64-a024e176b783",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "8f7a4ba7-1888-4485-9ef0-e811c46644cd"
									}
								}
							],
							"id": "fbc9880e-8939-4a32-b3fc-dbb4a672420c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "1e60e983-eb27-4cd1-8504-5c445c60a9e2",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "3dad0af9-785d-4ecf-a6a9-e9a5ec299992"
									}
								}
							],
							"id": "0626faab-53ac-4139-bc88-252b872bf043",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "c917b8be-6a17-4265-a47f-e791d195d70f",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "72254b49-b9d2-4a9a-a804-24b1ce822a15"
									}
								}
							],
							"id": "21076dc6-30f6-4050-a4d2-8733b74dde40",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "7d62e790-3abd-4e79-bbc9-ded57a946602",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "656da104-6854-48b6-a662-6cb2612c25b3"
				}
			],
			"id": "32a9fad0-8e46-4891-a351-399ca094f29a"
		},
		{
			"name": "Tests Copy 3",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "90f2d58f-eb1c-41bb-b353-cda276a322a9"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "77682d2a-fbdd-4ef5-9ea9-342138cdd4e0"
											}
										}
									],
									"id": "0d6277cb-4ad9-4544-9f7d-fa52cff053ab",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "4dadd90c-0463-414c-ae3c-e33cbc9ed163"
											}
										}
									],
									"id": "74777b72-1ecc-4db6-84a7-093020adacfa",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "d956dfe3-8a19-482a-830e-688cb795d373"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "28df59b6-fc27-4385-918a-0756080071aa"
											}
										}
									],
									"id": "7f3efdb8-a2df-4e50-9919-15559582bbe7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "a1124699-7392-4d38-809a-f4f415a0f51c"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "1460e5da-21c6-4542-8cf5-4f1619d667cd"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "129ed4cc-b011-4517-a741-cc562ad369e4"
											}
										}
									],
									"id": "99eda9b4-3127-4cc4-9300-de8811734768",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b78614d4-22c3-4928-94a6-5a6a1577da03"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "9a688295-04ac-4072-90ad-7fcca8ed2db2"
											}
										}
									],
									"id": "59d6c425-e6f4-4fa9-9273-79ede233033b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "a110216b-07ca-4236-8cf6-cbab27e0f6ff"
											}
										}
									],
									"id": "ea55eb40-db1c-40e1-8f25-a37e00fac901",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b95af860-be12-429b-bc00-3cecbc94c855"
											}
										}
									],
									"id": "49efae09-e354-4bf1-b78e-93b3f4a14f03",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "5a95b98f-6019-48f4-9f31-5f46855af9c7"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "95243353-154f-4430-9542-d9248cb30813"
											}
										}
									],
									"id": "41541fdd-2cbc-415e-90c3-21d2a086e8b1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "c3bd624a-6a15-48c7-a6a3-94ab49f06592"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "7600ef1e-9618-456e-a597-01cf20df6296"
											}
										}
									],
									"id": "dee5c9f6-c0de-413e-9b0d-7529f7ccdc87",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "ab103684-8777-4bdc-8486-f383be84d7d4"
						}
					],
					"id": "835f6580-a6ed-447c-9c05-c9c50858ea73",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "814151a9-ed6f-4972-b434-febb5c3a0cf2"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "a5a31881-851e-4acf-8847-3a20b00d1dac"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "fdffedfc-e110-4371-86a9-de0417b5b2a9"
											}
										}
									],
									"id": "9411b8ea-7b0d-4b40-bb6e-f0d1fed5bbdd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "b882a8a3-9c15-45f2-9f73-6fc006a8c21f"
											}
										}
									],
									"id": "df8d93db-8a9e-4a7f-9eb4-b11ed0ba9ef9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "154a2be6-57aa-4903-81d1-ae3d95dc0b88"
											}
										}
									],
									"id": "afc453a3-3489-46c1-8e77-e1404b18a260",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "da07a04c-49ff-44bf-86a2-1f5fc565d54e"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "54bf987b-390e-4e29-88cc-ccb25ed5aed1"
											}
										}
									],
									"id": "00c2b7d7-9649-4735-bf09-164fbb4f7d70",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "e1c1925c-5794-4bcb-aa96-3b60b4ee5709"
											}
										}
									],
									"id": "ce493ad1-7650-46c1-b388-0e0219abcb9d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "2a8d1fb7-75da-4e8d-8ae3-ae69f6af7aa5"
											}
										}
									],
									"id": "f1ddd16a-c682-49e6-bcc1-e6b27b8b2751",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "ad60900e-e7ce-4471-957b-b7356c5989da"
						}
					],
					"id": "a3d1dd8d-e30a-4149-af28-32a163ff6f0c"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "0ad89e43-7855-406c-952c-2d09e9ce366a"
													}
												}
											],
											"id": "3448da4f-d6e7-49f6-9bfd-3c52b97ce636",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "3ffd1475-07ae-46df-af1b-d36377c39a9d"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "7cbdce1d-b7b8-40a1-b072-6928eeb5a804"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "c1293963-9e76-481c-b8eb-512c67fa856f"
													}
												}
											],
											"id": "5bc1bbf3-0b53-4538-adab-bfccc14a0c40",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "ed9fa74f-9674-480c-b539-84f25961b1f9"
													}
												}
											],
											"id": "5c6e447f-940e-4062-9b4e-9ef32cef5dc3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "5a338153-3b93-4689-bdf4-3ce95f0620b7"
													}
												}
											],
											"id": "b9d90319-aeae-48ec-8822-876ae6057527",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "4f54979d-288e-45ef-9ef6-f3430c587cdb"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "fe3614d7-d716-4c13-bdec-4a72a2d75c98"
													}
												}
											],
											"id": "05e1f3c7-fe10-443d-af98-c6937f2a30d5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "2770a357-bad5-417e-a016-3abb44dfa33f"
													}
												}
											],
											"id": "78454c8d-3fca-4e0e-818c-c8187483bea3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "1e7492e6-21f9-4284-84fb-447afe56745c"
													}
												}
											],
											"id": "3a441b73-be6b-4591-9c94-c142909943b6",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "27f6b6f4-e41b-460a-bbff-b9bc3f2ae436"
													}
												}
											],
											"id": "a2cc7162-0051-4f9b-b40d-772f65cfc7a9",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "e44283f9-b2c2-458e-a751-ca54ffc8e0d0"
													}
												}
											],
											"id": "ba2f67e1-a352-4a5b-8ac8-d222d768fa46",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "d32b1754-d1e3-4ceb-a7df-0baa0e436a31"
													}
												}
											],
											"id": "855b0adc-8590-4a1e-85bb-c700c6863f6f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "24187491-5102-4789-b61d-79bd8704c264"
								}
							],
							"id": "f68bba02-231c-4b0b-96e8-67c95ecfaa19",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "6e8b9df8-1a25-464f-981c-f23dd2e9cf64"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "b052b813-8074-4347-b16b-16c2cfd506c0"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "0ab288dc-2f06-47bc-ab37-252082268d7d"
													}
												}
											],
											"id": "dc8169aa-5ff0-4fa1-a0d9-995440ef2bb0",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "98aabd54-257c-44a5-ae44-b9ce5e6ddbb8",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "4b889c6c-9de6-4910-aa7d-02e2115ad67d"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "ae0aa4bb-706b-407e-be31-4aabddc28a2e"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "4aa9c857-1189-4181-b9ee-bccacce0c114"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "57f44ec2-0138-464b-a4e9-94bc0696a2f1"
													}
												}
											],
											"id": "3b3dd102-16d1-48c4-b596-1c22532fb329",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "ed0913cb-9d34-4f8e-a6dd-1f8d58f3e1a4"
													}
												}
											],
											"id": "7c6a7844-8faa-41cc-aaa0-e09abc4a004b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "13420990-3c68-47eb-99b3-672031bba6c6"
													}
												}
											],
											"id": "3f44bf22-abf8-498f-9c4d-8310690e1ad5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "38265da7-cca5-4ae9-9c7f-e289cde7015e"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "bc873c33-4d0f-4c40-851f-1e027471b34d"
													}
												}
											],
											"id": "7ad1f0dc-4593-4164-91be-2edf2a17b469",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "2d031ed3-102b-41e7-b31d-8f2113e9ac33"
													}
												}
											],
											"id": "119f24c1-0cce-4a0b-bd73-ae521a66a959",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "c8028161-e151-48df-9722-6500f0777943"
													}
												}
											],
											"id": "f036e6ac-1524-4b91-b988-bebd1dfcf8fa",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "73f5ed85-0a5e-4702-a7d8-e0eb7fa8c41f"
													}
												}
											],
											"id": "88b4a25b-11cb-48ea-a635-6455b3f80071",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "9196da47-f906-4c51-8c86-2432d6217186"
													}
												}
											],
											"id": "07003794-7d63-4688-9082-db59e3eb7399",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "534c5092-465c-441a-acf3-81188b278919"
													}
												}
											],
											"id": "16347879-e445-43d0-94dc-54defd05fb4f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "74ad3043-533d-437a-8eba-c67dcbc8b4dc"
								}
							],
							"id": "16d123e4-5485-4549-ae99-0be24a12d6f9",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "53ba7fdc-9a02-4de0-9d19-3c65ac2c3fc1"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "c1669b94-34e2-46c6-ac99-3d34b3315cef"
									}
								}
							]
						}
					],
					"id": "e3f63f4b-e649-44ca-b250-b800e39553c5",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "75aaa5b6-cfe6-4178-88bf-876ae0de2dd9"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "dd437fb5-14d2-4961-a357-f75bc29dab70"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "626f2076-043b-4f77-8397-e851c1c00e49",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "3c30fdfd-0ac9-4919-a223-eb6067f1a309"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "25e4dee0-0669-4b84-b183-418a10338b69"
											}
										}
									],
									"id": "e0cacc39-0bb1-4819-ac04-426d60d7ad95",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "fe6c1e3e-46fe-47a4-8e35-3341df711b6a"
											}
										}
									],
									"id": "888dd0a0-f40a-4364-9a08-dd4c13d8d6ef",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "82be48f4-f3f7-4d1f-8984-1be30415102f",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "fb9fffd0-71bd-4a23-9d77-4366945e00ea",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "e2cf6d29-26d4-4b2a-a19b-935a8ecc4d1c",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "9f0fd951-e074-4297-a6f5-bbbe14e68981",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "93cc7985-73af-401f-a5b5-932566ec5f34"
											}
										}
									],
									"id": "ec89b3f8-a649-4c67-b2e0-ca92238d2372",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "29355778-e3d7-4e01-80b2-0239cb8fddd9",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "d3ea3d35-a5a6-4993-b009-f173afa452b9",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "c894790c-6169-45cb-80d5-ee72ec945f4f",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "3c3aa66b-800a-4c29-82e5-a5966d98e1da",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "3ef6b884-50ff-4ad1-9ed6-7536b2738402"
											}
										}
									],
									"id": "633dc546-dab9-4ad0-8db1-64fd8bfc2da6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "eca61a21-7545-4d0f-99cc-644a6354e677"
											}
										}
									],
									"id": "d8f4d979-bc24-4d02-b342-5685dcad1b2c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "81dbd161-96a7-4405-a95c-bf8c2d95e88a",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "9ea5abaf-da98-44e4-b5f4-e05c21623bff",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "db106627-ab0a-46f6-9ab3-77c61b0d85c3",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "02365e2b-2fc2-43ee-b9e6-2d233ea14fa9",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "dcaa4a24-ef06-46f3-b97c-ff108cc9e2f9"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "7e8b2c32-2811-4b28-bd5d-6374362721f7"
											}
										}
									],
									"id": "22a12966-84f1-42ec-b97b-964d9727fa8b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "deede925-eb8f-47d8-b846-d143a13555af"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "cae8149d-c95b-48c6-a31a-29963ea26c92"
											}
										}
									],
									"id": "8d7f339c-63d1-4e40-9832-a93858537fe6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "c3ba0fbb-cf1d-4e7e-be6d-d32f8db86b9f",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "16fca79a-cab8-44ec-82e5-336da14d8f6f",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "8a82035b-2c5d-4bfa-bc4f-e8b408b89e15"
											}
										}
									],
									"id": "ddc46bdc-dbe5-4ea7-a554-c0bce95e20f1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "50b80372-9b6d-4730-9243-41a3e3e77656",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "ceb6b63b-4021-4578-a008-6200f3e1d08a",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "d487ee67-89d0-4eae-b24a-5ce6b785bdfd",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "9d0aec65-25b5-490a-82ec-ff576ba06f61",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "562fec03-1625-4a68-86f3-db60e15665bd"
											}
										}
									],
									"id": "2e07ab74-a7f3-4d4f-b902-7275287e7b4c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "2b23e295-10ce-4c02-b171-9605277bcdf6",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "f9c30d14-eacc-4b9a-b6d9-a32a3910d8e6",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "1243db28-5e5c-4152-b133-9f8f1e89442a",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "68069a98-05b8-4ff0-8fac-cff4610ae8ff",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "681bcc03-9f89-4dc0-b7d7-d2468b960ccf"
											}
										}
									],
									"id": "3012aae0-c26a-4551-aadf-cfbbe5d334c9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "3cf63213-0014-401f-ae00-a618158d8e41",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "ac7cebe1-4324-443f-9fa0-956e1d091ed3",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "c15e9bc0-ed0e-4dff-a5d5-71b784b3b708",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "2b88dd00-eafa-43b3-b2a7-c2a02bce8759"
											}
										}
									],
									"id": "8c33f000-b81b-4a8d-af8b-8aab5aa343ab",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "abd9ffe5-2161-49ea-b094-3504ce2214c7",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "2a61bad8-f3c9-423d-adbf-caa8cddbb8ab",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "943ef0d7-2735-45e9-b876-d4e6d051dc54",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "e803c4f7-5943-4beb-9dab-2a05d825eb21",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "086c79a8-74c7-4b26-93cf-705379b2b21e"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "c69cfec6-d3ba-42c0-a24c-18673d96ac56"
											}
										}
									],
									"id": "24924b1e-72d4-49e9-8dc2-a49fbc6dd753",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "395c70f9-f873-4d78-b190-186a36772863"
											}
										}
									],
									"id": "be768fd2-4b20-4c1f-87a4-27ee7dc8b333",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "6f7030ca-9f99-491b-bb93-48efb42ff8d0",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "612c4600-aa39-43b4-a165-2e1c4d7f9faf",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "be467307-b329-4d2a-ad06-3d0995952cdb"
											}
										}
									],
									"id": "14d96620-b5ae-4728-8e54-93f93a9ad251",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "3b830fb9-7031-450e-b480-796bdeccb4c1",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "078b3146-397e-4287-aa48-253f6f6b5d94",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "47c94916-7533-479b-b1e6-3e213fc52e77",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "a83b73c9-af72-4ea9-8917-85aad26b0eac",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "46fad986-bcd9-465b-83f8-bfe3884b5e26"
											}
										}
									],
									"id": "7c900383-73df-4c0d-bb79-968011206d04",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "5493d45b-838a-4285-aac2-d7141ce9a664",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "d40b7167-b545-4d45-9941-93d21e56182e",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "72c276f5-1191-4d45-9965-1b1bd65be6f8",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "8ec278bd-006a-4e6a-98ee-8b870d82a5fd",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "69e95d65-431d-43ba-b411-147b7340aa41"
											}
										}
									],
									"id": "09515b28-0172-4872-b78e-01a56a373896",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "16b7a23e-d6ea-442a-8b4e-b215e57666ad",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "a6de3dd7-a91a-4432-a30c-624603b48bb3",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "af5edf5d-eb83-4039-94d0-a53a172be0de",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "b7a4283c-84d1-4d52-afd9-6e6e4263ed29"
											}
										}
									],
									"id": "c42c0bbc-cffa-4d2d-b8d1-51eb9f59f49a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "d49c093e-830d-4cac-b2cf-49bb4af63d7b",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "a5ab49fd-df94-4972-8613-3cbbed6d294d",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "77fb9e39-55f9-4031-acfb-0de7e57e9b4c",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "a50c96db-6f63-4685-9d2d-485dbecc94ac",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "60f433bc-bda4-44ff-8fe9-ed0500a82e10"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "0599121f-aeef-4a84-9df4-8a0e37469403"
											}
										}
									],
									"id": "bd6a2661-09ac-4751-bb5f-ea442430db08",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "56951d9e-ec74-401f-afc2-dd27c740c7b9"
											}
										}
									],
									"id": "c99ff85f-635f-44fa-a9d0-3a454387bf33",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "9907626b-3711-42db-b066-4aa0fb2d6f9a",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "b3f3fb7b-5002-4bee-8db6-3392ba2c10d4",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "615cbcdf-59b3-47ed-b232-80e4a12352ef"
											}
										}
									],
									"id": "8323ba50-2e6e-4b45-9bac-912ab62170c6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "e3bad0b0-3fc1-4891-9186-a2b6febdfa7a",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "dcec712e-3589-4f9d-88a4-ae3b773bea3a",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "127539cd-325e-4b62-86bc-694694265de4",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "76474f17-c44d-438d-bff4-e5faa9c00c0e"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "55d28e8c-fec4-4908-8362-c335e0d09a16"
											}
										}
									],
									"id": "e542bcb2-ff46-4b94-9ee4-f3df7d8fc4cf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "0b220c71-26e9-43c4-ba11-d982ffa2d42f"
						}
					],
					"id": "38bc992b-2270-44ac-a68c-ecd0b7e3acdc",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "0bc993d6-4198-4bc0-bf1c-a5cd98ab008a"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "3a80809e-7f41-4103-8470-f5a413ba4e42"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "7435a522-be2c-4e72-935e-ac721a627cb1"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "4a77cbe1-54df-44a9-bd09-04c638b10dd3"
									}
								}
							],
							"id": "12b1e46e-7e66-4dfe-accb-7ac0e92ab08c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "5482017b-8887-438b-a11b-da820952726c",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "4d16b9ec-d6a8-46ea-94e7-0e4508fd6dea",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "0cc383fd-59f7-4964-8cc4-e8ab619c765d",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "d783d5f4-15ac-4947-b448-2aa637c4e5fa"
									}
								}
							],
							"id": "a15a7890-965c-4a0e-b965-33647b80e6ab",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "fd57b06d-058b-4125-bdd8-0be97df32fc2"
									}
								}
							],
							"id": "b15e4dc4-693b-4f31-8d4f-19327b5f4e9f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "886fb9e4-6dad-4b70-905c-8b01e53d8f34"
									}
								}
							],
							"id": "017ebdeb-d279-429e-ae51-6d12ca1fbf24",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "91ed6adb-3dbd-4b1f-aebe-29a34b72826c",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "f9bec318-f1be-4494-90c8-374f83c9a6e4"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "882ae688-fc28-4c64-ba7b-8c29e4792798"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "a6a73bc0-de23-4f9e-8e4c-b251d8fcfe7e"
									}
								}
							],
							"id": "b916334c-1e0b-4af6-a5ea-a0a4706e990e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "ab35cfed-6706-41c8-8dde-4235427c2dd0"
									}
								}
							],
							"id": "af6852ff-8ba3-46b4-aeea-22d9c5abec57",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "f06699eb-acae-49c1-ba27-7b62fc332d6c",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "ac3277d1-2602-4699-95b5-9c1ad9a3975b"
									}
								}
							],
							"id": "6c3988d9-0df1-41f2-bfe8-a1f9e939692b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "0cdb9865-cbda-4b6c-b9c4-c3ec39753fab",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "a824d2ea-e49e-435e-878d-132506ee981b"
									}
								}
							],
							"id": "6f4d3beb-d226-4979-91e3-f5d6e26eb18c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "fcaa7179-b133-4b45-8885-93440ba66e0f",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "e58415c5-f49a-412f-becd-18475ddd2458"
				}
			],
			"id": "4e735722-e800-46d3-9d7e-264196b7f1da"
		},
		{
			"name": "Tests Copy 4",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "781f16b1-7ae5-4ccf-b3cd-c1978df1ef92"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "e67170eb-fe3f-4a6b-a794-707ead76f23f"
											}
										}
									],
									"id": "70228a6e-e236-41ea-8d67-f13470d859aa",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "e58d3b2f-6409-4692-8a17-df29912542a1"
											}
										}
									],
									"id": "f115454b-7c1e-4ca5-a70c-788bb3ad645a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "a4cbe5be-f178-4907-a345-4405af6ceb71"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "7ae98aae-ea2e-4fdb-990c-74f6b0675b18"
											}
										}
									],
									"id": "3a4e6b0a-8697-4383-970a-e9377302c4c4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "ddf36a5e-b67f-4b7e-a41e-fdfa2cf14afd"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "f78c7f1a-13a7-4eb9-b1ac-af7333147c54"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "93c1b74c-587e-4075-a9fd-a9c5780c5cf8"
											}
										}
									],
									"id": "5f185b09-d322-481c-b7eb-52e6d490ef21",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "22f007bb-c343-4718-a425-50b38aeae6f4"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "d20bd0b7-6f9e-4245-a21c-c130597126b1"
											}
										}
									],
									"id": "300ad682-ece6-4fd0-a13c-b68e08504be6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "730ef2d2-c6c1-44b7-aded-05d27f0db545"
											}
										}
									],
									"id": "c77aedbc-4402-4b51-9d6f-b1e0c2338634",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "f876d977-9896-4e18-aae1-dfb57e0a4258"
											}
										}
									],
									"id": "ccff816e-0635-41fe-bfc0-ea3986e57307",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "0366770a-1e36-4ac1-a18b-69a3e74ac22a"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "c42c48a2-f12e-487d-b357-f7cea930ef46"
											}
										}
									],
									"id": "4f4d7ebc-e8e3-400e-81d9-505a9b5f6526",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "b2db1b40-004b-4bc2-9dca-78ad5b366270"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "94a4bc2f-4b10-49da-b60f-e01ee3a8a62e"
											}
										}
									],
									"id": "c35591f6-5925-4940-9700-ea4f658bdff5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "438c0ed8-5b4d-44da-8ad0-91e3373924f4"
						}
					],
					"id": "eee2b9de-36e8-485f-9bbe-6bdfa9def1c3",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "5416dd02-d2db-443b-8f4b-738921b8005e"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "9ebabd32-7885-424d-b304-cf160b1c4b09"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "ea468f57-bea8-4ec1-bc86-bef0a8354dd8"
											}
										}
									],
									"id": "a548e0ad-6894-4531-b42b-8d0ca72d14ac",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "b5f3550e-7b47-4f64-81a7-12be2a86b6d8"
											}
										}
									],
									"id": "327c9e59-c6e1-46ed-8f43-678b84247fa1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "3bf90f04-f888-488a-94b2-10d707b20619"
											}
										}
									],
									"id": "6c95a7c7-945d-43f0-be9e-abeaff236745",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "c637ffc3-6576-47b7-8798-1ab82339f868"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "0acfec04-3fe3-4168-b88d-53215798c98d"
											}
										}
									],
									"id": "39a04163-0c0f-4249-b8f7-6420d7689991",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "66a4680c-4647-4a83-bdfe-dc396071b28d"
											}
										}
									],
									"id": "7b9dd3eb-7a8f-40b9-8926-8113b59898f6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "96e7277d-f44b-4b14-9d67-ad88a2dd949a"
											}
										}
									],
									"id": "0de317be-fec8-4a3d-9de7-d8c0bb3a6d83",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "7c6b94fb-6de0-4923-8cdd-66c720b512ba"
						}
					],
					"id": "778b7e92-a7ba-4abe-b0de-72d440a52cb9"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "340a3f08-bf65-455b-a8d0-d721635d61f2"
													}
												}
											],
											"id": "0986ff91-46fc-4ea9-935b-1e00a608d93d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "d702257a-08d9-4b87-ac3f-d1b3793dec2b"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "dbe8c46b-877e-421f-862f-d40eb5b3ced5"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "ae4c6d23-18c2-470e-bdff-6a3fa633d307"
													}
												}
											],
											"id": "ef370dbf-b577-4d3f-954d-dfb8eb96adb0",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "fd78d45b-eaf8-4c6f-b257-b0b09ac7fb4f"
													}
												}
											],
											"id": "a3f37351-e561-4260-812c-aa8a1d26e1a6",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "80b0afd0-4893-4618-90a9-536cb4de6c3d"
													}
												}
											],
											"id": "1079066f-cfb5-48dc-852a-4c347f5c1c97",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "575cb84d-a6b4-484f-a773-45f96fba28a2"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "83b55a94-c9ce-4c46-adc8-5102349f7adc"
													}
												}
											],
											"id": "aa1773f4-948b-40bb-9471-4ddd147d08a2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "9d381a03-7084-4296-9062-af592d50d4dd"
													}
												}
											],
											"id": "f1eb8ec9-feb1-45c1-8a01-96ff42277d59",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "0af4ae5b-a71b-4f38-9f11-40f81e221a83"
													}
												}
											],
											"id": "6e6b7f4f-aeba-4a1f-bd4d-4b922627d6c6",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "1409bb40-23c2-4fcd-a106-199618b67c31"
													}
												}
											],
											"id": "5bf61322-4a0e-4b75-90f2-780230d7a3cb",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "ac3e6a7d-93cd-4faf-a0bd-fbe5d865ceab"
													}
												}
											],
											"id": "ddcadb21-44b5-4b1b-82eb-e20b5f0148df",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "45e84ccf-fc5d-48d8-a76c-08d67a85e424"
													}
												}
											],
											"id": "2feb5eba-9c2a-4368-83eb-df2db13f4567",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "dc1b00b9-776e-4f67-8bb4-a4a105b34c8c"
								}
							],
							"id": "30a10d84-3414-413f-8b09-5d2e69b6da57",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "7687502e-05a6-4e01-9c50-7d0925a08f85"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "dc02f7a2-d985-4dd3-ad9c-17ac99e86dd1"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "a69bf660-4b7c-4c22-b128-6d00a71af54e"
													}
												}
											],
											"id": "c60299c9-7e26-46de-842b-60a7629bcb65",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "ed7f6455-778d-4ffb-9c47-dd7c12703c71",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "1603c85d-3ad5-4050-9f60-641738161c4f"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "ed54e556-be68-4255-be35-72cbc08e0a5a"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "e2266829-8d4d-40f6-bf0c-8c822aac80e9"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "dd458916-eede-4a72-8265-0b1c591f8fd1"
													}
												}
											],
											"id": "5a33d81e-16d4-4eee-845d-bcac5e44db31",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "bb5c1da5-9a55-4401-ae09-3aea30ab846e"
													}
												}
											],
											"id": "2e33c190-2956-4fad-baa9-c0bf7d002ba5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "3651ce26-cb7a-4e6e-a84d-cf3c3d86edf9"
													}
												}
											],
											"id": "ad545269-bf53-4431-8b08-a71cd19ec249",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "427f2353-6c77-4f6a-8d1f-619c325b33a8"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "ccb55150-c2d5-4e0e-abba-84fb0a8a32c7"
													}
												}
											],
											"id": "c8a95030-2514-4cf3-8339-e2dace3c15fd",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "727ca3fc-2b45-4a3a-ac4c-869fc88fa30d"
													}
												}
											],
											"id": "6960e77c-7f51-4f76-9ccb-e75dfadc1db9",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "093ee42b-3898-436a-b559-d3b14b65cb1a"
													}
												}
											],
											"id": "c71bb039-1c03-46ff-8839-df98a195e5ef",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "148cbf8f-ed8e-4ce3-be49-f7a3c79d4edb"
													}
												}
											],
											"id": "264f9d6e-aab1-4810-9c9a-df6b3b64a58c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "07c47777-9d62-4793-9f41-25609bb2ee37"
													}
												}
											],
											"id": "4268325e-bb9c-4208-a4ef-c32ab5b7bf1f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "0674d4c0-f141-4c81-b838-3b779161abd4"
													}
												}
											],
											"id": "5f9b01bf-d9c0-4037-b3d1-13a2599cf572",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "e7383e70-8b2f-4f46-bda0-ae381ff034d3"
								}
							],
							"id": "31b30684-9b6f-45c3-a040-ac8dc190d878",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "78fb9bba-4b2a-4fbc-9123-e3ff671c036a"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "e292cc0c-0606-4bce-88ba-e6f2cc68786e"
									}
								}
							]
						}
					],
					"id": "354edc74-8021-4497-9d06-8956e9740b52",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "32446ca2-d041-4960-bf23-7909eea7e9ff"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "2ee74566-1ad1-445e-a9a9-caf409c5ae5e"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "d7f20a3c-2030-489f-933f-c23cd5e4d1f3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "3a002dda-508b-406e-8a84-801de4d4ce29"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "15a8867e-1531-44bb-8d46-5cd32f33b633"
											}
										}
									],
									"id": "c5763845-93c7-4be3-8379-c12180850377",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "f00cf0b3-c6f4-497c-a1d9-86e0e1efe80d"
											}
										}
									],
									"id": "49c0280b-a050-4854-9828-0f589041c5a5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "000eb8ae-25c1-4c8c-8996-30221d6110f8",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "11c116c9-2edd-440d-aba2-e8606ce88bcd",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "c865c6e1-b2f2-4bd4-8e4f-64154a2147c1",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "b040659e-1d50-4aba-9053-c9c432cc82de",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "ba9be5e2-58be-4e30-9b2d-b4adbd0ec27e"
											}
										}
									],
									"id": "4dc54015-50e0-4f2a-81fa-553c7675f0bd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "7182bdda-7667-4b9e-b5fa-84f77775e654",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "27b6a15e-d718-48d4-ae5a-758272c39433",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "14a1a4f5-6e03-4a3d-ae03-a495fa84dd16",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "ec513797-a5bb-407b-9177-96508d28230d",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "42513bdb-1f64-44a3-9da2-74105e757c6f"
											}
										}
									],
									"id": "38de492b-c957-4c9c-8f2e-bbb565246c0c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "68062aed-2d68-4675-b997-e546c6507730"
											}
										}
									],
									"id": "110fd307-3f81-4071-a3b3-66cb8b970fb2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "6c8b7cc6-927c-42f8-b51d-da1e9f23f699",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "c215cad4-ef52-4546-b4d8-eb9f346aa5bb",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "8157b967-c04f-4e32-abc5-c0d3a5ce05dc",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "4712e064-6f69-440c-b009-7cd9a5f8ff22",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "57d61218-31f2-4ee3-abcc-e9eec90324e3"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "0314df87-a70d-4be4-a0c9-2a5e4fd26717"
											}
										}
									],
									"id": "a49a5376-e61a-47d8-9584-d7e9a8f6f135",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "24487be0-eda7-41f7-8a58-dd53c12141fe"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "015ba0fd-a030-4cba-8f9f-80f2727914ee"
											}
										}
									],
									"id": "00747a9b-c8f0-492b-b2cb-7ca1da08fcdf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "7657a5dc-1257-4cb3-aaa3-d41fdbcebc92",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "4a33e8d4-a2df-4df0-a11b-2f0131037fda",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "fa600371-f4c2-491c-8051-bffad706c554"
											}
										}
									],
									"id": "21c25d2d-21d7-43ce-ba5c-ac74c11242ee",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "306d19f5-c621-4261-a8ec-efa08381c9c9",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "974e6e47-b6f8-4d56-baa2-f87cb4ab926c",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "de804cfa-beba-4325-b831-0380d930d72a",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "ad11f0a8-c848-40da-b231-1243a1286e58",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "19bf67f2-c92f-4c24-8276-806c36f7219b"
											}
										}
									],
									"id": "d492cdac-f0b0-44e6-83ac-309915780285",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "851e126c-6401-412c-8e1d-6244c15f709e",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "9cba2caa-b382-4124-8423-2fbd4ad1854a",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "5c5e527b-f44d-4270-bf80-e563be22db19",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "598202b4-1519-4ce1-a6a5-1309df9215e2",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "6def8627-0150-47ce-9d92-2d95c3b83677"
											}
										}
									],
									"id": "8a4d5ead-2abf-44ff-952f-dbc5a41fc5d8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "d9af9760-0ae2-4530-8d21-2b97028ed552",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "0b333cc5-ead4-4e28-8daf-96387e6f602f",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "84cc8ffc-d7ce-413a-8b52-93b7a24c81a6",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "28f02364-9168-47a7-8954-5d21a3387588"
											}
										}
									],
									"id": "8f8930cc-3756-487f-b263-cc647092bd92",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "bbb05a9d-ca9b-4b54-ae4c-48886e3cc337",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "29abee08-04d7-42ce-81d9-540f83d34ab5",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "6c98b603-3859-45a9-9178-b43d14e97644",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "32e0bec4-504d-4211-a8e6-67aac3829785",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "9934dd25-ccfd-4712-b6ed-0f784ea84f0f"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "c4b64130-989c-43b7-b6b1-248b0c751d7b"
											}
										}
									],
									"id": "48c00b66-d446-4b68-b792-7554896e8471",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "65963a54-a8e2-47e3-b45b-b04487578376"
											}
										}
									],
									"id": "c3f42cb1-055f-410a-ab82-bc775e1ea1d3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "e7ac96ba-1d6a-4875-b00a-ac7a4579d0e7",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "fff8c6b2-09fb-4765-b6f6-ae9f264ac0b3",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "a5ddb6ca-a4e0-4e0e-a8c4-ec5ba5f0d3f5"
											}
										}
									],
									"id": "059320a1-dab6-4c2d-ad19-3aa3535c7bf3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "a8813871-db26-42ad-b167-1fa7bd56aa33",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "4a16f447-af8c-48c5-83af-e1ebb44c155c",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "c2a08d30-8c7c-4c4f-972a-a7c76b81c137",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "1b7f6385-45a3-4bc5-8354-2c73042e9952",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "6508a517-a0e6-4c48-856d-568c6964f751"
											}
										}
									],
									"id": "5ca7af72-381c-405a-bab1-1c14f708d367",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "9fcdd359-0247-468c-8803-ef2e247ddc89",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "94b20208-40bc-4a16-a5f6-5b5e52fdfc58",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "7b312638-daf6-4d01-b312-f47d084d6e7c",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "17b5c4ca-2f5f-435b-9df4-09157be3fae6",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "4b0892d7-2947-439c-ba50-8b4f61bd8c2e"
											}
										}
									],
									"id": "c59f85a5-c19c-40f7-b8c7-14daf64160da",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "62bda892-bb8c-4e5e-bd56-b2b357773e58",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "a78bd999-3738-4b75-823e-ebc821968a38",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "67454b35-e2f0-45a7-90a7-bfbc56dcc847",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "b36263be-0ea2-4e6d-a662-fa053bb3c4d0"
											}
										}
									],
									"id": "b1ee9fed-37f6-47b1-b142-94ae1b600e58",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "88382495-5945-4705-b5ef-b72312ec7e88",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "8f101e5a-0d68-47af-b2c2-227c97c371f2",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "f22dc7ce-31dd-43a5-bc19-78d62f4da3c2",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "db111f79-1061-4287-9aa7-891861d82fdf",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "af3f86c3-5cfb-43bc-90ea-8cd21b97180d"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "edab43b1-67b7-4330-9218-c151111321df"
											}
										}
									],
									"id": "4eda911c-5784-4051-bd63-d0e7a4832dc5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "bfc661b0-1acb-4079-b6e1-9b49f25ef46c"
											}
										}
									],
									"id": "e7ce70fc-254d-4ea8-b841-d3c7a1d22dfd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "ce9ae44e-75fe-405f-80e7-1889fa30217c",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "c0365ea1-96f0-41fa-9011-32484be86564",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "dd05378f-9174-48ee-897c-eb30735eb4f8"
											}
										}
									],
									"id": "c266ca98-6f25-41bd-8209-f06aee0afabc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "6a5b26a4-a94a-4fc4-a448-f231d9b80075",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "0f2e9622-742f-4f54-8e63-94ab84efae80",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "ad2a3e06-7aed-4696-a254-cb24279f9a07",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "fd2c9ada-1561-4ae4-a6a0-4ff5665bf636"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "fd09e3a7-37ab-4c3e-9829-9c29539eca7c"
											}
										}
									],
									"id": "d2b74045-02b5-4c56-98fa-2c58fbe8bcf8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "f07b6fd6-a849-4531-84e4-9158834b783b"
						}
					],
					"id": "98700368-4aa5-476e-8281-d7a96f7bb54b",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "f2380c6f-c7d1-45f9-9357-e6030c232efa"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "688a0358-c7ed-4cf5-9120-c945f9490c74"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "c2ed230c-2090-4cce-8f12-a9c68fd4234a"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "6007fdde-a0a4-4dce-a73e-9602c96cd67a"
									}
								}
							],
							"id": "034eb086-b22d-4bf6-a385-31024d35a0ad",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "f2d3ee8c-ed4c-4ee8-a18e-6021dd1c57df",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "ef7185c2-45a7-4569-89ec-754d56d96ca6",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "6f68c647-71b8-4b1b-8287-0bfa3277845e",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "72e307ad-bc83-4f51-84fb-1fdcffbd6b04"
									}
								}
							],
							"id": "2dd324c0-4c5a-4e8e-93e0-aed75ead466a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "b54b7146-1416-41ce-b698-144a8aa75744"
									}
								}
							],
							"id": "65b7dbaa-c690-444e-a79e-cff550bdf527",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "a125f997-71f9-4dc1-869e-926d124c664c"
									}
								}
							],
							"id": "d6de9e47-9d16-48de-a71a-0adb8e08f699",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "60f9a182-4563-4649-9c9c-d5b1fd56a4ef",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "c55092c5-f723-4d85-8723-1834dd96dc02"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "72719da9-12ca-469e-8079-b4ab2555d48a"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "afbbc4e5-7a3c-4449-a0c6-6d3b462f4e5e"
									}
								}
							],
							"id": "4d38b1e9-dc33-47a8-af43-8ee77e0f45eb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "f78768a0-1db6-4238-a01f-88520129891a"
									}
								}
							],
							"id": "4cd46871-fbc3-4e82-b639-d550c2e4182c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "82e9003e-e28f-49ae-8f6a-403b37627a3c",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "1f7877b8-e731-4255-97c5-25378b2a01c2"
									}
								}
							],
							"id": "02e963b8-f04f-40f0-be59-3d352ba2fe1a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "917dca93-066c-475f-886c-044bd3e94973",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "fcd49abf-d57d-4a71-ab6c-9507b95adfb1"
									}
								}
							],
							"id": "0e572e44-c7e1-43c2-a64a-f98330135c5a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "add7ad63-f0b3-42ff-82dd-ee3680230a0f",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "9d83cd35-4409-4ea7-b2b6-0b3b42102034"
				}
			],
			"id": "110288d7-27f0-4d4c-b35d-3a160b9bd6f7"
		},
		{
			"name": "Tests Copy 5",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "63cde58f-d4c0-4a7f-a24e-278f08c64186"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "486b2c42-a4ce-4ffc-b7c4-3b3b86965c9c"
											}
										}
									],
									"id": "65eac262-156c-4d0a-9aa5-0e5c1d5e167d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "6658629a-512d-48ec-9856-e381f531b328"
											}
										}
									],
									"id": "52fec90f-87f8-42c7-9501-e2f11f254454",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "f5e9c857-9f71-4a2c-859e-b56eed723e6e"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "af6daf29-ff6c-4802-ab24-a3ecb3d19ad4"
											}
										}
									],
									"id": "f7331e56-c6b8-4015-b651-06bea99c5b79",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "4f00dff4-00de-4818-bb4e-d0ce8e322a38"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b2050f63-91d0-4da4-9f1e-a0a275c644a7"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "8c68e819-9c5c-4594-b66b-83c33eaa5718"
											}
										}
									],
									"id": "2ed5f799-fb55-478d-a842-a47361cf445d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ae7e5f98-b066-43e7-8135-e35b05f83b8a"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "63e63d74-e044-4692-b3ad-0bfc30b1c22c"
											}
										}
									],
									"id": "0966e246-543c-42f1-a989-f5b42b699932",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "91852803-cd44-4dd0-9293-b1a14b8da1f1"
											}
										}
									],
									"id": "6c56508d-26c8-4a6a-a24c-c5a2ee9408ea",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "1e70bdcb-453d-4d6d-af60-585daf56d27a"
											}
										}
									],
									"id": "746bfcb5-3ed6-4a31-93e5-bfc18de2ba4a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "c9dc0e4a-7fb3-4644-bf97-5cdccb82d490"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "afacbd8c-b17a-42f8-ae5a-57614a636260"
											}
										}
									],
									"id": "bdf3b49c-337f-4ca1-af3d-b8628079851c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "e549e119-243e-4e3c-bbcf-ba39dfcafd6d"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "589ae188-3cff-47d4-8469-5abba2f1fbdc"
											}
										}
									],
									"id": "a91e2090-7735-4c87-abe8-4e0eaaac8ab7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "2a0d70a4-eedc-439d-8a6f-fa834d2f5f2f"
						}
					],
					"id": "f3a594b3-efa6-41e4-8b2d-744f3acdb855",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "cdec1231-9068-484e-95e4-35c0d8bb8e14"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "fe61085e-7a7a-4c30-8d3c-bb55bfcd4328"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "86b0c232-71b3-40c0-b8f2-7047049613f9"
											}
										}
									],
									"id": "6bb2ad29-a63b-4275-91d5-06e03c568cd3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "1834dffb-3cf7-46dc-a432-f5621ee562e2"
											}
										}
									],
									"id": "a3f0dd1f-f4c3-4b23-8565-5816fdb686d2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "9d01572c-4405-4d3d-8aa7-dc60ccffcb36"
											}
										}
									],
									"id": "3e4464b8-872b-4d8f-8091-999d7c1735c8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "b7d02a2e-efae-42a4-beba-8a895fae0e40"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "5b27b01c-77e6-4409-acd2-39f86b682193"
											}
										}
									],
									"id": "00868217-a741-4334-91d3-74965fd1dd3a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "e0f3c6f2-fa2e-473b-b7b3-9e0a24e305cb"
											}
										}
									],
									"id": "2ca8a681-895b-41f5-a8b8-196bc759f9b9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "13a8496f-7f06-4378-ad8d-2d64973de0b3"
											}
										}
									],
									"id": "880d150e-e9a0-4edf-8cab-03f0c07278e3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "0cf0dc30-0d64-4fd6-acac-f11d2408a3ef"
						}
					],
					"id": "f5fdf2b6-308d-4e10-898f-6f6da3101214"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "cc08c607-dc56-4bea-b42e-f1437e46135c"
													}
												}
											],
											"id": "14660243-24c6-4430-81db-f1d3ed9df9e0",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "cdb6c64a-c903-4ae0-b223-fb3557652bc6"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "4dc978bf-dba2-4641-91c5-dea2f82aaf28"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "8f067e6f-5dea-482d-b1fe-410997130d62"
													}
												}
											],
											"id": "0b9e1ef1-b7bd-4d7a-937c-93624f831f48",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "f0fb0c74-1e87-4120-87a9-4f79e3ae7b17"
													}
												}
											],
											"id": "256a491f-dc73-4762-8829-0e8a64c540e3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "37d5ff7e-a6a3-4368-82bf-aaec2cbacffd"
													}
												}
											],
											"id": "e9fc32b7-0384-4a6c-8ffc-d6b207fb4dd3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "670aa9ea-e96b-4136-bb02-013577045748"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "844883e5-7dc7-4602-a636-054e357fd2c3"
													}
												}
											],
											"id": "2f671016-becc-4712-a8df-5a72e80717d1",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "34acc73b-5be1-42c3-b9b0-31a04c3e0289"
													}
												}
											],
											"id": "ce48e513-b3cb-4800-9279-e8a24306c5bf",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "ce5fc8fc-4646-4930-bac7-0a84a720784d"
													}
												}
											],
											"id": "c6523258-0756-4df6-b119-c4a2812c636d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "44bb975a-4432-4d1c-b5bd-05d213289e4b"
													}
												}
											],
											"id": "e90b409c-00f2-4378-972a-e8161df4ecab",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "d2b10868-177a-40f4-af6b-19ecbaca2165"
													}
												}
											],
											"id": "69fe0256-29de-4758-ad27-f43389b32101",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "ec9c62e6-6838-4036-8c09-94eb75aecd3e"
													}
												}
											],
											"id": "a011707f-a81f-41db-a601-70901fd64447",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "65f54e0d-59d4-4da2-90d3-6c63db30727a"
								}
							],
							"id": "89810431-9353-4b52-aea8-d95b77bafae1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "9bbf1407-8000-44f3-8ac0-6666bd8bb120"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "2c4468b1-8d60-430f-a4cb-4b9c112a5827"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "f239d9d0-979e-49e5-8511-3817076dc7dc"
													}
												}
											],
											"id": "5aa839ff-f5a8-4ec7-a1bd-f5d0788a3fc6",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "24a8675c-b8e2-414e-b5cf-0dc2d08f76f6",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "a8e8a09a-1653-4a89-b0f9-328edd67947e"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "e054d428-c258-4026-bc21-fbebfc8bb431"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "3005f70b-bd4f-4205-8367-f6993e5477dd"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "6a5313f3-6417-46e9-b55c-989bf190f572"
													}
												}
											],
											"id": "68aed66c-a786-4b15-a29b-3ab69ae0ed36",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "55ea0bcd-79a1-4b96-bb9b-c4085c69c6a4"
													}
												}
											],
											"id": "27b63f8b-dc85-41e8-a634-851057072fbd",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "1eb988b0-2df2-49c6-9034-2f7aa821451f"
													}
												}
											],
											"id": "cb75d76d-13ca-4eb6-98d5-bffab7c33409",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "dcb4439f-3594-4aed-a020-6483d38d1ac3"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "3f7fbd82-aa4a-48cb-a1a6-8d1514d6ea28"
													}
												}
											],
											"id": "8d1119c1-e3d4-40d2-8ab3-e01b2126581f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "85ec47b4-50eb-4f91-8c9f-52fb852369d5"
													}
												}
											],
											"id": "aa7bce3a-2136-4550-b2a6-e4fa1c43d844",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "d39108b3-dbc5-490c-97b0-6c7e9d861d46"
													}
												}
											],
											"id": "0cda6b16-9b48-48bb-ac31-3cfa1c5be0cf",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "403022c5-636b-4e81-93e5-1221840fa141"
													}
												}
											],
											"id": "4491bef3-ff91-4f97-b9f0-52a40ff2fe11",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "b3bf037a-f3db-4d08-b30b-e59bbec7c94a"
													}
												}
											],
											"id": "86cfe0a8-b1aa-430e-bff2-c8916e2d0f8a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "2679e60b-2f45-4e89-a8a3-2263a887a6f7"
													}
												}
											],
											"id": "d1d0670c-f1eb-40fe-95dd-c96b1ea1e6f9",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "ea5ac7d4-95fb-42f7-a714-7cb6e6fc22c5"
								}
							],
							"id": "289811de-d78b-43ae-bc2b-4c7295217641",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "6a10addf-45c8-4138-a8fd-fd610d0df0c1"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "7749ea39-371a-41c7-819d-b5c57de46ba8"
									}
								}
							]
						}
					],
					"id": "82cd4296-2d41-4565-a733-18de584ea7c5",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "6863a2b5-2a09-4b85-bcc3-d47f901bf08a"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "037f20cf-bdc8-4dd8-8474-ecb68337b6f1"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "85074105-e585-4bbd-b6b3-77ee622e8600",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "dc0dd653-cd75-4f9d-a85e-ed8eb5f336a3"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "6a6d5f90-edfb-4482-9020-8eca39b87baa"
											}
										}
									],
									"id": "58ed2228-9315-4683-9d4b-479a63a6e408",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "31f411c2-cfb1-4a74-9f44-69ddd48116ed"
											}
										}
									],
									"id": "eae5ec59-36fb-4fdf-a93d-9c9745a8a9e5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "9df42f6b-8366-40b1-97bc-f4426755533a",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "6a787c0f-2143-4e66-af13-6373f5f4b9db",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "89325662-7255-471b-9eed-15d1e841fade",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "ff356cd9-dcce-4ceb-82e3-9c3146adf37d",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "5f84c674-4ca1-4ac5-8207-52249f24a815"
											}
										}
									],
									"id": "62f1e218-0b4a-4e4b-ab8b-8ce608b4df17",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "3e5c7f5e-b57f-4e0b-a56e-2c3ab025b764",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "636da607-9d67-482e-a183-a2942cd96ded",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "c7b607f6-1598-40cd-b78c-5bcee330a967",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "d2cd52eb-89d0-4778-adb4-7e22d68dc1b4",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "31d77d96-09e7-454c-b732-0e324d8733b8"
											}
										}
									],
									"id": "9287e93c-4842-4085-b907-fe06000b9b0c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "834f4966-7323-4a41-bd88-b9fef06c7638"
											}
										}
									],
									"id": "9d802cea-27f0-470c-a770-5ac5b7b46914",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "626e4c14-770c-4864-b107-1d4a666fa808",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "0b721d50-5fae-47e6-8145-a8cd55ea9360",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "52df45b2-8f9f-4eff-8ef1-ec3520b3134f",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "77c352c4-55be-4e9a-a7c7-5bfc4fe6ab28",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "1ed1c91e-828c-406d-8106-8ea6c2b31e7c"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "e3cf71b4-aa0b-4900-a32b-9cdb87a79fc4"
											}
										}
									],
									"id": "af05a593-e821-493d-8065-5ec3542f3d8f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "03291cd0-f93f-4d53-be82-c882b8a21359"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "6d330b72-e794-4568-90ac-08e263599ad2"
											}
										}
									],
									"id": "dc8a6012-9eba-40c4-b0b7-340abb758991",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "55bb73ee-b6c5-47b4-85a4-6111e088b7fe",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "67aa69c9-a785-421c-b5f0-355e950f56a8",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "acce219e-0362-4fb5-b41e-158de6dcf5b6"
											}
										}
									],
									"id": "808567d7-cb06-4654-a1de-b6e229084c45",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "4c88fada-c853-40e5-9a84-a7c9cc46a04c",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "f0791bab-31ee-4454-a836-22f6e12c84ff",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "ead96e25-3748-4b55-b6f4-f982629ea4df",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "091a4948-e902-456f-9015-6b3b5cf8a40f",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "e08bf540-8ed0-42a1-b168-fd103d3f376a"
											}
										}
									],
									"id": "0af4dced-26e2-48fb-8c90-c6ca2399be23",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "2625215d-7109-4037-a431-6898fa859a77",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "8cba5fff-05a5-4a12-9d45-bc6201317aad",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "116e51c8-efb9-4640-8228-9fe5585d274d",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "b45bdeca-5146-48b4-987d-e2c353e6c21b",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b1260fcd-f565-4334-8890-8ec954dd80f2"
											}
										}
									],
									"id": "feb9bd16-c541-4b5d-9128-a56c3894fede",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "8a3607b8-6ae6-474f-90c9-709600b865bd",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "e4ea13ad-8223-481b-b7c3-f4be62cb5afe",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "c035b085-28e5-4a1b-958a-21c09e96d30a",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "c69b1fc4-d198-4303-a73c-879947f3d78f"
											}
										}
									],
									"id": "a90357f6-09a4-45cb-8f83-32edb59fec9c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "4a8cef65-128e-46e5-a0de-e411f03b0c77",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "9907d98a-7638-4d76-8327-e0edb1cf0b70",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "7d22b2b6-6ad7-41ce-a3ef-56e7a882c6ec",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "9d19469a-3738-42ee-b761-979fb4aab60b",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "d3da6d12-b3ed-4270-8760-1afe5b51cefd"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "d871da5e-fc64-4900-b79b-98b3fac0a304"
											}
										}
									],
									"id": "42382700-8955-4c03-87b1-736acaf185c5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "9459115f-f81f-4890-a44f-34d76316604b"
											}
										}
									],
									"id": "c3a38085-3125-4e38-b95a-8eb27e14147c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "94e84015-50e5-4174-bdf1-d186cfd47c05",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "721068f3-3af6-46fb-a08d-610f3fd3d412",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "653fb782-f2e2-4d2b-b11a-c12c02525b33"
											}
										}
									],
									"id": "d6c5539c-b9ea-4e43-a4bb-d1c9c680ecbd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "ed430c1d-3db6-47c7-8a8f-f78bdfecd7a2",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "581ebc4a-a10e-4926-a383-968aaad62227",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "8e2c3713-64b7-4336-a8ff-7e7fa6c73a3c",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "ca9c32e6-3b59-4cd4-8a4f-1fe2bbf28054",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "15079d60-99ef-4737-8233-b4508dadc0ed"
											}
										}
									],
									"id": "c7ceef84-1163-4ad5-b245-1ed56facd29c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "85bdf33c-15c9-40f5-bfe5-ed0ee5a95d6a",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "e11e540f-b0d5-401f-b3ea-e1cb3de5556f",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "fae1cfff-3de9-404c-b6d2-13249c16399a",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "1349a8d0-d8f5-4326-b192-80479ba2969c",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "f97048da-2f90-4b4b-8643-eec5e1342de5"
											}
										}
									],
									"id": "b9f4d889-6fc2-4ccf-9d26-e32f405fbd14",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "42b3e13c-17ca-4c34-b598-dad8d6fce830",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "7b3c5aac-3d87-451b-a666-15de425ffafd",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "f80988be-e0b3-4495-b279-51fa720a1729",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "2753da20-d5f8-4356-a01a-cbbf4d6abacf"
											}
										}
									],
									"id": "9d0d5051-15bf-4732-9820-f0ff5eee8a4e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "7d22009b-fccc-4016-baeb-c018b1800f24",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "68cf6a96-c67b-4298-a6cb-a12331525121",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "a1334209-7455-40b4-a5e5-edbd0a3164d6",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "242de783-3fbd-4050-a669-b7b951d7d59a",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "1621098d-ef04-450b-b343-f95d7de49399"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "0f5da4b3-4484-4b9c-89a3-fd7624b0b0ea"
											}
										}
									],
									"id": "ae23d9e0-660d-423b-bf58-9e037038fde3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "bf7be052-9a27-42ff-9eb8-7686cd11a9f2"
											}
										}
									],
									"id": "1465f92d-094a-45c7-9411-ec7a216d0285",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "3f77dcf7-00f6-46dd-aa4d-919fa50aa2a5",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "78464fde-d3a9-464d-8dce-142f90404eef",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "3155cfb5-e9da-4720-9594-0d60c0681b2d"
											}
										}
									],
									"id": "928af5df-3860-42fe-8489-15c21b201c73",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "031dc156-848e-4fbe-9884-c95934c0a5b8",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "8aae6a53-b3f3-4666-99c2-dce4dc0072f3",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "e86020b7-3160-4335-b83c-0465b5499469",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "1e36bab9-8e8a-4a8f-9279-8a19b7aad054"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "a3960fba-b598-4fab-8d63-202476ef03e8"
											}
										}
									],
									"id": "5c16b362-24ce-45a0-bedc-5689ca82af17",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "0246bc6c-ea87-49a2-b78e-aafcdf8db9ac"
						}
					],
					"id": "852d6481-66fe-43ee-ad4b-e65f1fa8eaf5",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "99d8f341-9d21-424f-b9e6-e1db5bc72ae2"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "e0349553-1d9e-4426-af53-c35bb424840a"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "51f23baf-6550-4001-bfdc-e2aa8a285f12"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "f97b5111-189d-4c55-818c-e2aaec5930a7"
									}
								}
							],
							"id": "57e3b8ec-29d5-4a56-933a-f970c374c00d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "690cd2d4-d304-4c67-ba4b-1f7bc31dad10",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "e72280c2-1b20-4049-af23-18069ab837eb",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "0360ad41-8c38-4303-89c9-317f42615db5",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "7f97f55c-ef8f-4d48-8e5a-9505dab6f873"
									}
								}
							],
							"id": "4ac6016f-05d7-4835-aa48-9227c571b30b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "1e1f6d7c-37b0-44eb-8766-1b7e7eebf243"
									}
								}
							],
							"id": "a4bb5468-e930-4b1f-9cb5-4babed828714",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "63708979-9211-4454-8b37-b1e3c86eb4c3"
									}
								}
							],
							"id": "9b32958c-49b0-4542-aff3-59c3e8636851",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "676fa4fb-4144-4c06-902d-422596945b7d",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "cd3b53ed-f3c7-4006-b07e-2dd969a6d069"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "df56bd28-aee8-49d5-8c87-879896e084c2"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "2bfa2db5-a864-4d0d-a7d6-e9fd8c47624d"
									}
								}
							],
							"id": "e43a600a-945d-4341-b6cc-74c0e58dc580",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "ca490ac7-64bb-4398-b216-fdef7da2840c"
									}
								}
							],
							"id": "4abdf68c-af58-46d4-beb9-c8355d654ce9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "87ca4147-cf09-43e7-ab90-15e9e6b26c2b",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "1f82219c-4230-4044-ba63-a00d0f55bcbd"
									}
								}
							],
							"id": "4234cc98-c0ea-47f2-9939-24e424751131",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "9f8ca03f-f84e-48ba-9740-515f6256826c",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "7db58b1e-dbbe-45e5-800c-e284346e5470"
									}
								}
							],
							"id": "bb9ecfe4-8687-4c5a-9436-078b7b5a3d87",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "e3db0919-247c-43ce-a644-b40f31d9808d",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "d840918e-68cd-4fd5-b3c4-830e17b79fc1"
				}
			],
			"id": "c500204c-1163-4b9a-8a82-f7ce0ee4348e"
		},
		{
			"name": "Tests Copy 6",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "5170f4b2-bebe-40cc-99ec-c9e7772f89e1"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "42b71ea7-bd72-4e72-8875-e3affb10364a"
											}
										}
									],
									"id": "a9f110e4-fea6-4042-bc7d-9982511ebb50",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "1659e0c2-c974-41df-9483-cd8db6348ac1"
											}
										}
									],
									"id": "ac578189-9209-4f57-9312-a4ac29a2d28b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "e01f79c9-95e9-4d9f-badb-b400350ce57f"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "a2036369-39cf-48a9-b234-9554eea7212f"
											}
										}
									],
									"id": "8d260bc5-c445-4c5e-98d6-298b6851e6d0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "37029959-bf94-49a3-877d-9ffd3e6dfc79"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "e1427913-84f9-4077-a931-2205d190383e"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "39ea9778-257a-453e-8ce4-e759f0bd4859"
											}
										}
									],
									"id": "bf25258d-e71c-4150-836b-71a0468c50da",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "6b55efad-3560-4c14-9e5a-e581feaf38a9"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "a446d1b0-c66a-4558-b06e-50371e21b268"
											}
										}
									],
									"id": "8750feb1-a912-41f0-9120-7ca7ca54a9f7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "eb15aaba-1ac8-4a0e-98e5-d5b93214f4d8"
											}
										}
									],
									"id": "95e3a93f-5252-418c-9e7a-d4312d4b5f5e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "a130df40-132d-4994-b063-7c8c8d5ec11b"
											}
										}
									],
									"id": "a33d8b34-30be-41b2-9cf7-8df38a4c8d4b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "d70bc944-e47d-4195-a034-becbaae37cfe"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "c62277ae-a027-442b-a472-c72d26588493"
											}
										}
									],
									"id": "63c92582-5afb-4f4b-9040-5ad891f91422",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "64b6dfc7-1067-48f4-bcab-dea342059008"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "84028ec9-5ac2-4a84-a4bc-f3f624838a6e"
											}
										}
									],
									"id": "96cf6768-dfff-4f58-9dee-aea2aa8a4432",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "28cb77be-c946-4a33-bcd3-3e93f4901377"
						}
					],
					"id": "e4bb8888-12df-40ce-9d1f-81b41ebe6dc0",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "dbeb06d1-20ca-468a-ae26-9bf3121ad46c"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "da3aa9e9-96f2-42b9-bfce-a7d30b980f9d"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "8a2556ac-3dd1-4519-9fc1-6ec8d09e4862"
											}
										}
									],
									"id": "d736ee0b-94b1-49ff-b304-333b50e189f1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "be8afb67-f7a8-4bb7-82ae-700d5b411097"
											}
										}
									],
									"id": "6fe19edd-4c0a-42f8-833a-ce7122ef0793",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "d08ac704-d3b8-460c-8682-878379e104c1"
											}
										}
									],
									"id": "2ff17874-d46e-4b12-91de-c83029b74de7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "ec60c2b3-5d5d-4b5f-b115-99903cdd4113"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "1ab1a8e8-3e23-4e32-bfee-f71e77c20e43"
											}
										}
									],
									"id": "2ee54faf-589f-4b58-9866-09771bbc2565",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "d18373c0-c03f-48de-8861-5ccb451067bc"
											}
										}
									],
									"id": "911d6e34-8c04-498a-a3a7-1c3f9d9bf0d7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "a33be6c9-43f4-4e1e-9e0f-fcaf1e4f1348"
											}
										}
									],
									"id": "e557e2cd-f428-4434-98b5-bef196625e98",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "0f75730d-dded-49cd-92b3-a144d3d1bc32"
						}
					],
					"id": "6f2956b6-223d-4e7e-8df5-30f0aecf6820"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "d17a9086-bb6d-4a35-8cdc-acf00f082d58"
													}
												}
											],
											"id": "bb5ee931-31e6-4a5e-8f2c-65215a75bf2d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "bd9ddb0b-ed28-4b2c-9c61-46a5e6458484"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "2ad20b1a-511e-4ea4-8055-172466d6e994"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "63243a02-4e0a-46ef-b16a-edf23812776d"
													}
												}
											],
											"id": "84e2f4c9-f1fc-463f-bdd6-776fe98c2a08",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "7b9d8ccc-d55b-4162-b414-14dbacad6656"
													}
												}
											],
											"id": "03e3c1ea-7c6d-41bf-ace2-87023c7bcf53",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "d256e2c3-223b-42a5-a6c1-00ad3403449b"
													}
												}
											],
											"id": "a7880efb-9a65-401d-b386-cfc08ad85a89",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "bfc2bf02-1439-48d5-9311-121d7da781a8"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "fd8d93e9-ccf8-4c43-832d-6ded7225ab3a"
													}
												}
											],
											"id": "5023ef62-6993-415e-bc8c-91a08d3c6ce3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "ae33630a-586d-496d-a08e-0765cf81453f"
													}
												}
											],
											"id": "f33771c3-901d-4b9a-810d-48c65aad092d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "7f3f6dec-609c-4b81-b970-003552a2bac5"
													}
												}
											],
											"id": "c119ae9e-33a1-4da4-a31f-c8a0640419c8",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "436d7001-f2f3-4e2e-a5db-bec3b40b0afc"
													}
												}
											],
											"id": "e487fb99-13bc-4fdd-aaf3-ebab95b76050",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "f3d7ab44-5044-4543-89d0-5488542e3a64"
													}
												}
											],
											"id": "c2c41a37-faac-4c6a-abd6-c8f45e93eb7a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "20fe8651-5928-4e6b-93ea-4526d56137da"
													}
												}
											],
											"id": "880a0928-c7a1-47f4-bcfc-f1ed71c02098",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "2a79e6b3-4a27-41af-b2ca-be2433a63620"
								}
							],
							"id": "56d76b77-f9ce-4fcb-82be-5bac41daa0da",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "bfda69c9-2262-4e74-a8e3-01c7f629225a"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "79349de3-6efe-4932-97e0-3e67bba13f65"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "5d3d29e7-604e-4ec6-af68-f2498c14478d"
													}
												}
											],
											"id": "8e51f8ea-43ec-44f7-afbc-d0dd067b1f9d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "9af203cf-b28e-4d49-a16c-da122197e783",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "a7f3c127-cef5-4e9f-bb28-4a14dc978cf4"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "8190d33c-103b-4d16-bd3d-0bc67a601ad5"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "b5ddc979-8a4a-4edf-8590-c210b9316146"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "42d69c43-1586-4096-a57c-51a55bd54476"
													}
												}
											],
											"id": "c5448150-8c36-4e23-9779-5c350e74a85a",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "de2421fd-9ea7-4be2-ba7c-c7e6a0ce9817"
													}
												}
											],
											"id": "474d9fcd-ffb6-42be-84e2-48f9879170f0",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "425a7c49-a05b-40bf-9eab-a870721536c1"
													}
												}
											],
											"id": "a7b001f4-a8ed-43a9-b4d6-880e6743d2f1",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "1fb87dc9-e831-435d-b8dd-7cd1b5e43dcb"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "19931347-28ad-490f-9c4f-b979482fcf9e"
													}
												}
											],
											"id": "e63533f2-ba7f-422c-aa02-a2c029aab123",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "6ce0b5f2-66e8-4251-b32b-87e4c008a582"
													}
												}
											],
											"id": "3f111d92-5f1e-45ba-9577-06c3f04f2c89",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "08050f15-011a-4f9e-a2e2-78c36b55e7a1"
													}
												}
											],
											"id": "e3ac66ea-af0a-4298-b69f-883f28b89618",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "042e3a50-59c6-48e2-a9d1-49490a4fe282"
													}
												}
											],
											"id": "9aaece10-6110-4132-a9aa-004a01b658e7",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "f800b5a0-a47b-40f2-af06-52e510cf72c0"
													}
												}
											],
											"id": "ff5c68fa-bcf5-4221-b4ea-f951b5028cfb",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "06b483ab-da59-4a44-9eea-6f5395ebb2aa"
													}
												}
											],
											"id": "8d487e20-1aad-4c36-9b20-38ab485e1549",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "5f180528-811d-43bd-8e0a-95899ba9624a"
								}
							],
							"id": "c93af039-a196-4b7a-84df-c42c5e7e70ff",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "5afcd08e-167d-45db-8fac-a86c524bdc70"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "9a3c260d-2b7e-4fb8-9a68-24b0598768d8"
									}
								}
							]
						}
					],
					"id": "17e6a10f-e779-4dcf-87a5-4fbd7b7019a7",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "6c8ae304-ccf0-450c-b74f-4a9523ccd28e"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "65156808-18de-4c95-a419-a3bfb70c14af"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "d534ca9f-02e4-44cf-9c2f-69e136cde28c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "a8b42429-14dc-4de0-98fc-f63c48de7170"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "c9d3b6c0-52dd-48c4-88b5-839d864454e3"
											}
										}
									],
									"id": "76379f8b-1eec-4f81-9dc7-7d63cb93e87c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "847e5ba3-60b7-4089-850c-692bb1b19728"
											}
										}
									],
									"id": "7d1cfcb1-fcc7-4e3f-99a7-5b0df306cb87",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "8c3af06e-ab7e-48e7-926a-9bcf95758a53",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "d25b8292-9c6e-41ed-bacc-3da1fabefcae",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "2fbe04db-aee0-4d32-9a4b-3d5bc11186c2",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "0924da99-815e-4378-ae6b-2a35853e8445",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "23f49599-e070-457f-85e0-260ec2be7bd3"
											}
										}
									],
									"id": "5aa9e346-43fd-4628-ad86-59485def9028",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "b90c5e98-9cc6-455d-b205-f5703b41d754",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "5df0f7df-d94f-4d6e-b93c-ba815358f7e4",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "dde67910-bc82-40ba-9724-c67eac11c26e",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "d532cd75-9e07-49e2-9b97-8dfe0efaaf30",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "05131612-d5cb-474b-a85e-a3ace7c4ac14"
											}
										}
									],
									"id": "32026aa7-74a2-4a5a-a85e-d7745bf950a6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "b94cced7-56dd-49a9-9b0f-fadf777d3319"
											}
										}
									],
									"id": "18b7683d-e3ca-4165-af5f-9bcf4e029794",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "62389e49-85df-408c-8fed-272ef525ce01",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "14dd8529-f764-4830-a93f-e004e5fc2557",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "a431767d-7494-4fe0-b90b-a148a6cd56c4",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "4f36556b-1397-4728-b6a9-84d155fafcfa",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "27829bd9-d0f9-44c5-8fc3-a978ae2210ac"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "215a11f7-baff-4175-9afd-c2ffd99c9817"
											}
										}
									],
									"id": "0f530f33-8349-4bad-a73d-3c3ce3bcc0c1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "ddabdce6-22ff-466b-a7df-1462f38fe853"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "585ac6ff-bbea-47b6-904a-245cdde90173"
											}
										}
									],
									"id": "d475fe1e-05ba-4d05-81f4-550dcfa856d1",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "6a3baa5f-6594-4d95-9b2c-8def44b19a9f",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "aa3c8125-9e02-4f51-89f9-118762f602c1",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "dd3fc36f-ae62-4896-8bf3-10f62054a455"
											}
										}
									],
									"id": "0fc70920-08cb-416b-b0cf-6de92862dd6b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "0936acca-07ac-4138-b09e-224c30366419",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "551bfe8c-0e4c-40fd-8c07-3655026aae84",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "2fb62cc2-31bd-4cb2-8cde-377851207c56",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "5ab58650-8c40-4561-85e7-ed04c51494bf",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "96a229ec-28c6-4fa9-8e26-c44202ffff03"
											}
										}
									],
									"id": "146a7d75-32cb-4b19-b57d-875f8460d841",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "6309ae11-12fd-4a58-8892-5925530543b1",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "f69ad75e-fc20-4d08-811f-0d132fbbc6f0",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "1f8c145f-643c-46df-aac3-e11b5722d2d5",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "bc641700-4e08-467f-ba8e-634f7388db6d",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "46e42864-cb1f-4399-8619-aadc82bc5e45"
											}
										}
									],
									"id": "567af2bc-b794-491e-9eed-1be18ed9e46c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "dba1f071-7370-4934-aa45-2b9aa4228b25",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "25323d03-fb13-4dde-bd10-4a1d138eaea4",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "e03177b2-4e53-46cb-a94e-42bafc40df6c",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "7c24d53b-1d1b-4b39-bc7c-621ab1e75eaa"
											}
										}
									],
									"id": "cbd6556f-8e57-4ee6-bb65-5b604f0e280a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "1d9dcc7d-4684-41e9-a43e-699c929ae6bc",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "05fa6cb0-410e-4d62-9c03-94056f29bc2d",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "96f0bbb4-7369-4c2b-96c6-ced1107b00b7",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "408cb466-4fae-45a6-9084-e05ed7d48bb3",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "679990e3-d878-40ee-891d-0a9db5a461b8"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "e592954e-3dbc-49c1-abdd-d0e27741c5d8"
											}
										}
									],
									"id": "60dab468-600d-4c93-886d-30640c0621a8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "870fd51a-366c-454b-a489-e001bd4bdd22"
											}
										}
									],
									"id": "3d9e10b9-f33a-4370-92be-c61391c51dde",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "0c058386-6906-4d86-b58d-7cc74fd57c5f",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "207fa4bd-e74e-43bf-ac03-54decb63d4c7",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "d2b15439-af5f-4c2f-98ff-ab1a5d54b601"
											}
										}
									],
									"id": "ac5f93dc-99a0-46f8-a97b-f9a873d17def",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "6191bbe9-f4d3-4ca4-8a0f-45931e5ab24d",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "08427510-0bd3-42df-ae25-2263f3dbdc9f",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "eb186699-cc91-468b-b8a1-a22a64a1ac67",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "13f4344f-a8c3-4254-ba13-79128fa3a74b",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "2b022f07-6d3c-4fa3-8fd8-785ebb967972"
											}
										}
									],
									"id": "9c5a6dfe-e050-42b9-8a19-ef7859a14750",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "13dcb300-4dd4-4845-b800-30c12afcdc35",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "b4d6a9c3-587d-4180-8eb7-343fae06baf2",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "09fb9bd2-2a2a-475a-ac27-b817e48fd907",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "3f50c228-6e11-4047-870a-484c4f1b2454",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "a7e4b102-318a-4d2a-b3be-2832691c9e86"
											}
										}
									],
									"id": "c43ddf97-c7f9-4ed6-bd4e-8ca0ab016437",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "4a826d33-14cb-4b1c-a791-c603b1e94c05",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "4342c05d-0128-4444-b78f-c9253d3b8b31",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "bfa27d9e-c3e9-48e8-9b90-c30cfba7170e",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "1a4c9453-57de-4a65-a082-e587714326a1"
											}
										}
									],
									"id": "6ae4a6ec-de50-453f-b32e-bd86f2f6e588",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "942e0102-087c-4c67-99d4-b85d8ace0b1c",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "5af784b2-06d8-471c-94fc-d814b2a0bd42",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "dab7846a-f6c1-4825-94d0-db6dae983cef",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "74eeca48-e567-4b85-ba3f-e2d3f29fd62f",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "0c81b0be-b44c-4897-b726-337d12fead65"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "98becb82-19be-4de8-bee4-0e6df1a7f3a9"
											}
										}
									],
									"id": "76c6b9e3-9b27-4495-9e24-9cb27b86d98a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "cc135d25-3ab5-4276-9950-eef8fc49d9dd"
											}
										}
									],
									"id": "500bb4fb-1aa8-4deb-b2b3-08b900cca9e0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "753ab66e-26d6-4fa4-b39c-e310a1c9b9fc",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "5588e26c-2a04-4ba0-bf03-dde6ac59e6f4",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "730ffcb3-bdd5-4e12-97f6-38ebd20325dd"
											}
										}
									],
									"id": "77338454-8197-4261-aa1d-d80f5c50a112",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "496db683-3dea-4965-848c-b53dccb97ce0",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "bef1f00c-7d47-4fd0-93c6-ff26b07ea0fb",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "b47443fc-3e3b-4a33-b5cb-5de97c80d917",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "71475f10-6d04-4979-81d4-e44b692afa9b"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "50bdda5f-3073-4108-a353-db59c1e1a748"
											}
										}
									],
									"id": "66879dfe-6fba-4bb1-aa48-6f4ac8159dd6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "2731c119-dee6-47af-a200-0d70b93b62be"
						}
					],
					"id": "2bcf53d2-b172-4093-8da9-723f94e434df",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "33a11401-0393-4c0e-937e-219c211cb00a"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "513b4916-af4b-4445-8c98-258154648217"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "7d56beb0-5ba5-41ad-8505-605b80261d26"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "7c410273-3fd3-4f53-a8f6-113ed38685f0"
									}
								}
							],
							"id": "7e3f908f-c5e0-433f-bd73-70cc6813fb7c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "b0772413-970a-4f4b-810f-e65c0a9a957a",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "730ed500-b200-45f9-8b48-ce95e24eaafe",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "b2fe8a23-be8d-425d-926e-2fc75986ca4e",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "e9b01d72-03fe-4712-90e4-511c72ce6417"
									}
								}
							],
							"id": "f4a98771-79f1-4910-9e9e-f8a2ea1cc5c9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "accabf3d-c4b8-4e94-9480-670b4216e936"
									}
								}
							],
							"id": "3638d38a-47b9-468f-aa74-ec1fd07cfe0e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "e7c9fe2b-6c88-4503-b145-b0f3dd0ead92"
									}
								}
							],
							"id": "c3991b46-49ae-45de-9300-85179f04cd48",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "28293768-b184-4836-84ec-12b11bb6f953",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "f5aac8ea-0a82-4b3f-882a-9b101cc90244"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "bb576c14-f486-4b6f-a879-5ce52da08d86"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "bb79f6fc-5912-4b84-8f35-8d4f9a8b8192"
									}
								}
							],
							"id": "8e1b87b8-bb48-49c9-a063-b8f90f70aae0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "77b79794-3bb8-4ba6-a784-3253264a3612"
									}
								}
							],
							"id": "f947a653-d9f3-4c2e-9ba4-ca16ec39076c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "b1769667-7470-48d1-acc0-2b32df25249a",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "58694b27-ed21-4645-8051-b9d8c8f7efb7"
									}
								}
							],
							"id": "8e98420a-36c5-4b6e-bc78-70277a068df5",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "d93cb89e-92fe-46ba-9379-84be1d0b36f1",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "58046569-cb9e-45d2-b76d-c64aad0bb2af"
									}
								}
							],
							"id": "e0cbdb19-cd31-4e37-9cca-0d6985f26ef7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "94cc215a-eb86-4253-a117-26bfd4c927e4",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "1ca64001-cd3f-46b6-aa62-e3862dd30adf"
				}
			],
			"id": "a13d3dd6-0b04-4609-8016-2ef241db7457"
		},
		{
			"name": "Tests Copy 7",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "2e40000c-46b6-42bc-9ba1-61163d2d4a97"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "b297e006-c098-49de-a32d-c439d1103d4c"
											}
										}
									],
									"id": "ba49e2cc-c315-4558-aabd-962e1edd2597",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "c9535607-0b60-4e44-ba40-c47428416fd0"
											}
										}
									],
									"id": "62e84805-352c-4a52-91e1-a42419981162",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b48a559a-e07f-4cb4-bc1c-4b749a0f8dd9"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "9c0b8f3e-a7fb-4491-ad54-ed5a184709f1"
											}
										}
									],
									"id": "3efdf697-e362-4560-a3cd-03756c431bd6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "0f04532a-673b-4b30-a7e0-c8d1bcc75326"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "2fb6c57d-44b9-4fed-bf67-187bbdacc7ea"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "2ff04d56-4e5b-446b-9d77-afeff3545dcb"
											}
										}
									],
									"id": "bff2ad7c-2e18-4300-aa37-9c0ee505e9e8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "edd7b918-a993-4d63-9568-f574bff5f0cb"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "2b787b1b-5bb6-4e2d-ae6f-813a459211e5"
											}
										}
									],
									"id": "d61f29c0-5499-4ed5-ad99-bf1abb266aa2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "cea5274d-aa12-4957-b8ad-4be16589c451"
											}
										}
									],
									"id": "6db44b51-ac67-4c0e-bb05-1d75cb012e47",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "378bdc24-1815-4952-93c1-56241076460c"
											}
										}
									],
									"id": "6590ef35-15df-4161-9c45-5399cd4e2556",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "40f57a7e-9826-494d-ac9a-828ac5db16ba"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "69ae2a82-e442-42a8-b032-0fc65e47a51b"
											}
										}
									],
									"id": "ab30d35d-9ce1-4c0e-ae28-2764cb41e1f7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "0715c917-a0e8-4fa4-9da0-2d7a0d629d79"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "2e29d6c5-3d99-4d32-860d-67d003aa804f"
											}
										}
									],
									"id": "39a6f0ed-9538-4b75-88d0-d0c5603deed5",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "6db84ae0-90e8-41a2-86f7-27c2c9b61d93"
						}
					],
					"id": "844fab87-0f52-4e19-8a7f-b2607ce4ff80",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "16f4cb89-3288-4b69-9815-031467f48dc0"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "59518fa9-3bd5-42c9-9114-64dced3a3121"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "12761d9d-be41-480f-9fce-8a33671e6563"
											}
										}
									],
									"id": "0887ad49-5c9f-4171-980f-6e281aaadb9a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "21fa3e22-5ff9-4f1e-941e-90f751596fa4"
											}
										}
									],
									"id": "bf8dc2da-c883-4cd2-9328-07a919104bb4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "c1995789-1771-42eb-8d44-9b645686bcd8"
											}
										}
									],
									"id": "452082ba-d96a-4da6-b501-1ba31ca30a49",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "25498d82-0c6d-46e9-8e72-4865b6981f8d"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "9fa6a9b9-965b-419e-ab97-4d73cae9cfc3"
											}
										}
									],
									"id": "18357ec0-2690-4c94-b14c-6b6a3f1c90a4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "6c5b5ab2-da8d-4fd4-9b38-3c00e4b05398"
											}
										}
									],
									"id": "bb9ec945-9ab7-4ac7-bd61-2488cf89af36",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "8666268d-77e0-4711-9b2c-a6f08999c9df"
											}
										}
									],
									"id": "23868960-2179-4bc7-9ca8-1eb6fb035d7b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "d8366f7b-c165-41c0-9253-4cc7667cdb59"
						}
					],
					"id": "d139092f-4fe8-4cb7-8f53-34d3a8e15871"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "23ba6392-ba5b-42f8-a598-7107ab2a1187"
													}
												}
											],
											"id": "92f95866-2e47-4164-92fe-07c46252bd84",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "ad2f0682-7304-444e-bb61-d762c0405f4e"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "01ac78f6-e486-4bcf-ba70-e25ba36a42e3"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "0afbe04b-782d-488f-a4a1-1d6a84a0b881"
													}
												}
											],
											"id": "be99827a-003d-4998-8e2a-379555c8f497",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "60c15fe6-81b4-4ceb-af88-5234883d015a"
													}
												}
											],
											"id": "530d4adf-bd89-446d-9b90-ed321dc6bba9",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "cdc9c4b1-8870-4ea8-8796-b4f4e19f8537"
													}
												}
											],
											"id": "122cf821-70fa-4abe-91f4-510b3a2d2c34",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "77267256-f2a1-4146-b650-c394d2bc7686"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "7d2e4b3d-c0f2-45dd-91a6-8c815e8199e6"
													}
												}
											],
											"id": "4f32ced3-f646-4b52-8a72-c1e62a6a8d17",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "ae965432-e346-4e75-a57b-7574dee1eaad"
													}
												}
											],
											"id": "75b680dc-4d37-40bb-a66e-0df46bd0912e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "59ebf6c9-0d8d-4c8c-80ff-404c2d7ce454"
													}
												}
											],
											"id": "59b8f0a5-ead6-4618-835c-f117e37fe993",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "0fbc3b33-3a77-4784-bc37-4a07ad62b924"
													}
												}
											],
											"id": "f36198d5-fb5e-42f1-bdd5-b268e63865a1",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "27180ded-027a-474f-b568-96e831310b12"
													}
												}
											],
											"id": "5b211007-f57d-4b1b-9304-5acab927d81e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "4989ac79-082a-44ef-8ae7-44de0f8f234c"
													}
												}
											],
											"id": "038d3691-114a-4622-a4f7-2347b5ba0fc1",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "4940e2c2-d28c-4a81-a0a6-632d3aaa424d"
								}
							],
							"id": "a455459d-fe6e-4220-a9a3-9fe4f5e8ed14",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "77bf4b64-df13-4e04-985f-0727878a9cc4"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "3dc04035-c7c0-4b77-9b3e-a13a85f9fb0d"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "8ff99691-be62-4759-a656-7a25bdd235b2"
													}
												}
											],
											"id": "5c95f005-54c6-4c52-85e3-11cebc5874b5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "39a5c3bb-cd7d-43ed-93c6-67f086cd39dc",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "eb8dd887-568a-4933-bed8-a2b98d7800ab"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "b4e5153f-3873-42a8-ac69-a1ab9b1300b2"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "b1abab1c-6d25-497a-8770-905c610f3e64"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "694efd14-8d31-4ac0-8f02-d20608bcddd1"
													}
												}
											],
											"id": "cdd0a66b-0491-458a-b923-a917740b3eb1",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "c0fd1517-0e3f-4ef7-9fd1-2b4c6f532bae"
													}
												}
											],
											"id": "80812933-28e8-4b0b-ae42-f54d3c0c4184",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "53779ae1-4c43-4ce3-bc16-55cb2b91d30a"
													}
												}
											],
											"id": "202e967b-93df-4287-bec7-44d3d14db14b",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "666c2497-930d-450b-a9fb-f946fff8c93f"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "b4c5d3a1-a82a-43a2-a403-6147c8119407"
													}
												}
											],
											"id": "d68efb4e-b53f-4773-ba30-7e466720699e",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "4fcd4b34-b63f-4d8c-8e6d-16565d25a856"
													}
												}
											],
											"id": "a9145c82-091a-46b1-83e7-7df3d20d0dc7",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "5ebe8b91-7b92-410b-a8ff-5fdb0ae46545"
													}
												}
											],
											"id": "d4f002e8-67f4-4beb-9813-d1066a474025",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "de9e06ec-3fc4-4fac-9318-2d4ff7725923"
													}
												}
											],
											"id": "56ae4042-e8cb-4498-85b7-6804f7b105f9",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "9719f93d-aa6f-44ec-bdf7-d8d086b38330"
													}
												}
											],
											"id": "7fb12395-3883-4761-9bea-236bf83a0115",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "f5d4ea2b-20a3-4cea-8316-f24f2b103531"
													}
												}
											],
											"id": "b9133831-4bfd-437a-8db6-576d8c113fa2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "3ad3de6d-5132-49af-88c1-177adf55719f"
								}
							],
							"id": "89503933-ea1f-4236-9347-0959d3b1acb0",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "569e1c17-5b6c-4758-bbfb-fac8bfe98f6a"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "631b7e9f-046c-4e5a-a129-c8ab107758d7"
									}
								}
							]
						}
					],
					"id": "eacc9030-5c6f-4fd5-8474-e0b7ec791c9e",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "72557f6a-4806-42c3-8a8e-429fd6aecb90"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "e85b352c-5133-44c2-a5f5-820b1d250639"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "326e7ccc-0fd5-40ff-8f9e-3da3d220f0af",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "c20891fa-4bd6-4bd1-8a55-d53f78a2bdd0"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "aea14f7b-9b3e-488a-9389-2a3234d04de1"
											}
										}
									],
									"id": "3265e402-ee3e-4cbc-b3fc-5099a7ae7b74",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "07152418-cc84-451d-ad10-3f36bf9b374c"
											}
										}
									],
									"id": "fcfbb684-aec7-484e-aaea-e20b960b5942",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "07e8d12b-c9bb-4ef4-94d9-3555d5064692",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "c30d90c9-4196-4af1-bb12-ae33522421d4",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "093e423b-d719-47c1-90ed-d73a47447a45",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "d4f3d39b-0f49-4332-81d7-e5a85e867611",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "584fcaee-9c8c-419f-b23b-2942dbceae60"
											}
										}
									],
									"id": "3839b3d7-8fe1-4b19-9fe5-f62aa0d837d3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "9da5eadb-6039-445d-97ce-e2925cac6813",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "46e622d4-8095-4f67-8312-abb72e547167",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "77de0d40-dc71-4306-a54c-30d124b17e08",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "7322469a-767f-43e6-9b93-b9d331dd7a24",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "c0b6957d-f01c-42db-8587-1248963a8b47"
											}
										}
									],
									"id": "9446676e-c6ac-4d5e-94b3-9dfba29f2255",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "8b879f9d-4e5b-48fd-bff4-940cd1a0b5db"
											}
										}
									],
									"id": "a249f2fe-1e87-40c9-8c91-feb1301991b0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "2151c2ff-0b88-41c9-8345-37ca2ebb008f",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "92d19b64-df80-4de4-85d1-e24707cad78d",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "95736041-3ada-48ee-90c9-2b2b07618232",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "f04a73ac-18be-436f-abc4-8e7eebee2277",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "d2636689-ee8e-424c-9327-874134419b9c"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "7c75d031-6708-4a26-87fd-5a224854f519"
											}
										}
									],
									"id": "d4cae02c-0180-46c7-b6c7-d05a6cd4c5cd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "532a5d98-7ee9-49ef-b523-afca0dcf9cde"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "7c35b4f2-29db-4ebd-bdbb-61ca2582fe36"
											}
										}
									],
									"id": "050584a4-aba5-4316-b82b-02b3556157b9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "4ee629f1-b0bb-4e6f-ad39-f59f7bacfba9",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "c1484e9b-b6bb-4f96-b4a4-e45c8c8a1f23",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "367e77a6-676c-4b1e-b0c7-7e220da98e47"
											}
										}
									],
									"id": "2f9afedc-1d46-47bf-9b3a-2cd70eedf681",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "c3c81dec-e5b3-4105-83a4-67c0d572ee9b",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "5ce8f60e-5ef2-42f2-a2cc-5f5f10edf0fd",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "80a8ca81-bf22-46b0-9c7f-7ea180c55a40",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "ec0facdc-f358-4725-bf0f-ea6604d58a2b",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "d6a3f705-d464-4605-b1c6-a703fc2481a5"
											}
										}
									],
									"id": "df382063-0426-4ddf-bdb0-df2422786520",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "d0bbe8fb-dd43-4f8b-9355-55194fdb5e4b",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "81c270ca-a015-43f3-bcd9-a59fcb779559",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "fa319f1d-e901-4e85-8c83-2edd51283226",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "dbd08010-2f6a-4111-8840-cddc764e2a6a",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "a609098c-fba2-4088-a67f-83a6935bdca4"
											}
										}
									],
									"id": "25a6cbbb-6c3d-4d03-a686-df3274b24b8d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "aafe3b03-abcc-43db-8f3f-5114c25541e9",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "0ce2c82d-b901-44d6-85d8-ffcdea7fb452",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "624f759a-6a56-4406-8870-d9247baf2ff0",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "6e4ba235-c0fd-4a45-a2d6-2f48f2a36c47"
											}
										}
									],
									"id": "91003545-e749-4fca-86ef-957ee08af484",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "7854a9c2-1eee-4200-abd4-02f3709e19dd",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "2cd9107e-a75a-4d43-b7a8-b6c7b2ac189d",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "a5a2f9bd-8e62-45d5-8d3f-6eee7854297d",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "3a466919-7583-401c-b31d-568a37592576",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "346d9ca1-a092-4233-bd65-f1ac7c99aa77"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "32ad5b43-2396-44f6-b876-2b62e70ba4ba"
											}
										}
									],
									"id": "46536641-9a7f-496f-a207-82d4cb0facd8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "00c58d92-92bb-42e1-ae7a-76573add6838"
											}
										}
									],
									"id": "db4aa298-33bd-42ce-b1e8-a2c074e0eefb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "d821af9e-a869-46c4-aa9c-142263023f38",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "4261609a-2bf7-418c-ba43-a34c124f775d",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "c022c5da-5519-4955-bd3d-773e231cf230"
											}
										}
									],
									"id": "89407e01-f46a-455c-b35e-9a088059614b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "5a462a84-4327-4081-99b6-d1ae5e1469a1",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "dbfeefe2-9ae2-468f-adc9-653f6dd8bd13",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "4602010b-4757-4755-b7a0-2df2dc286323",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "0396a140-0023-4b34-867f-69c9b16ba0a2",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "bf4f38eb-18dc-461a-b3e2-bcbcbc778c83"
											}
										}
									],
									"id": "776f5947-c400-4748-b0cc-a60e42030386",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "bf2d77fd-5099-4ff9-aac3-28d6c4cce57d",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "8b48effb-2dd9-4b63-9cea-14aa2d6a700d",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "e972cccc-a4c7-4976-93e8-d426d0093feb",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "218ecbf4-12ab-4a12-8fd1-78e92b1802a7",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "2aa05f97-aed3-49fa-97d0-acb30fdffc17"
											}
										}
									],
									"id": "744adc59-85ce-4a5c-a373-2ef905a094e9",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "6c2e4471-210e-4a9d-a553-0022c31a38d3",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "bc078d18-2471-41bd-b65d-ac36edd4cf58",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "5e8aa9ec-5fed-4960-8340-f5e84e63b839",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "e3893aca-eb52-47d0-9136-8a8a7c57cb15"
											}
										}
									],
									"id": "9817709f-a327-4ecb-8e3f-e094b3087b47",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "6068e62e-70c9-45b2-8ebc-d0277d51e3a3",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "20a517c0-80bd-4a29-9c5b-9bd0b23dabfe",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "0f899eaa-aa2c-406d-82e0-27cbec2fe4a4",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "a4975dbf-6c5e-4e1a-8ab1-d2868efb3324",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "8bce66ae-3768-423a-a87f-e91a5080dbd1"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "e9b99321-5508-4bed-9608-16d5292446e8"
											}
										}
									],
									"id": "a90fdc5a-3d80-4089-93b9-7d70f1d3421b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "d8864cc7-7886-42ed-a5d4-eee8bab42e84"
											}
										}
									],
									"id": "216e2835-fa26-4e91-9dc3-8b85753e77ac",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "26c61c3f-d286-4aab-8bc8-537595422fcb",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "4d2358cc-d8c6-49d4-b55b-ad1e1ccdeeb1",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "c92adb30-d035-4361-befa-4457d05c6d0f"
											}
										}
									],
									"id": "936175b5-a403-4f06-b55a-eaa489f25f6a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "76f2de2e-6149-4d67-a0dc-b1ed495d9ee2",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "23ed1875-5797-483d-bc75-2e51eae6c303",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "9a30a36f-0ed9-4d7a-9566-41373e215842",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "f657f34e-a28b-4cc6-b1da-355baf09f688"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "e63c391a-c5a1-4b15-b344-0cc5c39f40dc"
											}
										}
									],
									"id": "f8f4aa5a-c415-45d8-a3c1-fcfda6a4042e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "ed8373c6-a885-4986-986e-d6cb6f03179c"
						}
					],
					"id": "a36982e9-6496-4fd4-af4b-ac9f79b31e9a",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "99124369-ab2d-49fb-8f13-694acdb7d3f4"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "1d9ce6eb-4310-4d0a-ac46-875618c85f70"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "decb1644-0717-43da-aa2b-2212f5a12e1f"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "f5ade930-a0cc-4ff9-9e6e-80ffc3ac0131"
									}
								}
							],
							"id": "81e7a41f-11eb-449a-8f62-f90b2c803e1f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "464fe5d0-3122-4932-9a32-111a23ae4f84",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "09049473-1e5c-417d-8230-abcbd1478195",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "7491af96-045e-46c7-a738-e60b25151f69",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "72159a42-f194-49e9-9ed1-17a072f47176"
									}
								}
							],
							"id": "85c72849-f80e-4efd-903e-4eef8633f73a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "9d89aaf6-3751-4a6e-943f-fb02323f3452"
									}
								}
							],
							"id": "6c8340c3-1f75-47de-9b42-aaa1a30ae1e7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "96f61d6b-0e24-4d12-a124-d9fefaa8baa4"
									}
								}
							],
							"id": "f1fa61bd-dd62-4c0a-b2fd-2903c1bbeddc",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "a42fb4c4-4f2b-408b-8b2d-2b606ee8c415",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "b0122638-7dea-4774-8414-8bd754fc0df1"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "60de8c8e-6b2d-45ca-97f3-e63693146bfc"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "44e60925-18f8-4bd6-9eed-47ed8d15e2f5"
									}
								}
							],
							"id": "f3ac4836-b2ef-4fbd-9fe9-a70b41ee8167",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "b7fb6e68-1bdf-446e-928c-fdd64b658f36"
									}
								}
							],
							"id": "a517d773-f89e-4f54-8185-62c4117f3ec1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "3141d5fc-724c-49e8-b638-39738ea9e7cb",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "ad8702e4-dd53-492c-b7cd-ea8d052920f7"
									}
								}
							],
							"id": "7d5abca5-fe12-4a4d-97d2-3fbdc8035d3f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "36046495-8d0e-43af-ac34-b94bc93692bf",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "39ad6741-31a9-462f-bd48-72ffabf0edb8"
									}
								}
							],
							"id": "06b6fe1d-b03b-4941-b1c8-b3e550fb120c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "78bf62fe-a164-4f23-bc65-0abae6c8514b",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "b9f1abfc-f3c6-4cd8-b2e9-9df701b1070d"
				}
			],
			"id": "b103170b-3969-48fe-886a-5aeb9559636a"
		},
		{
			"name": "Tests Copy 8",
			"item": [
				{
					"name": "Watcher",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Admin Watching API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ac522b5e-3d45-42d1-b683-968231e63a2d"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "99fa71f4-ff56-488f-9b16-22a42857698c"
											}
										}
									],
									"id": "9514ec9f-f303-4114-88d6-23cc4aa13f06",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Admin Unwatch API in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'unwatch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.false;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "1656d4bd-d117-4c80-8460-919ceb8f725b"
											}
										}
									],
									"id": "b06b982f-9f13-47cb-a8e7-23b2a6096a68",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "Watcher Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in personal workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in personal workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in personal workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "57264276-81e2-494d-9545-ec8895e0cd5a"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('personal_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in personal workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "42919c87-4e90-425f-8515-2d430e2c546c"
											}
										}
									],
									"id": "4472a5d8-ee9d-41cc-adbe-2824bd137522",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								}
							],
							"id": "d785502e-9575-4a2c-b2b3-a5efd6720542"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[API EDITOR] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "58c5d151-2d28-457b-891a-98fe6577d65f"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "7d4e73c4-3d30-4a5f-b905-ba997ab5265b"
											}
										}
									],
									"id": "d764c7e5-381c-4a02-a02a-9ac2f793d544",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Watching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'watch'",
													"\t});",
													"\tpm.expect(jsonData.data.isWatching).to.be.true;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "cb5c3236-ac4e-4554-8f41-7ac11f9ed783"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "3ccac56e-5107-4c52-8072-49b26f0256aa"
											}
										}
									],
									"id": "71cbbbea-598a-4501-ac8f-0e7b553334d4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('admin_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "4c401262-00ef-4246-bd02-aa70d2c7ca74"
											}
										}
									],
									"id": "c6b32feb-3c00-4695-853b-b9fa30547559",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API VIEWER] Unwatching API in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Watching an API - Check request processed successfully\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Watching API - Response should have valid structure\", function () {",
													"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"    pm.expect(jsonData.meta).to.eql({",
													"        model: 'api',",
													"        action: 'unwatch'",
													"    });",
													"    pm.expect(jsonData.data.isWatching).to.be.false;",
													"    pm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 400 for empty header\", function () {",
													"        pm.expect(res.status).to.eql(\"Bad Request\");",
													"        pm.expect(res.code).to.eql(400);",
													"",
													"    });",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"    url: `${_url}/apis/${_watchApiId}/unwatch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': '1234'",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"Watching an API - Check status code is 403 for wrong access token\", function () {",
													"        pm.expect(res.status).to.eql(\"Forbidden\");",
													"        pm.expect(res.code).to.eql(403);",
													"        pm.expect(res.json().error).to.contain({",
													"           \tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"        });",
													"    });",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Watching an API - Check status code is 400 if user requests for unwatch if already unwatching\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Bad Request\");",
													"\t\tpm.expect(res.code).to.eql(400);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\t\"name\": \"invalidRequestError\",",
													"\t\t\t\"title\": \"Request is invalid\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "6f9bee6f-ff94-43e4-b001-e6cc326fe763"
											}
										}
									],
									"id": "4ff9e8de-9aa0-4f81-aa62-3af02a2d12b3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/unwatch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"unwatch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] Watcher Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const _url = pm.environment.get('url');",
													"const _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let realTimeWatcherCount = jsonData.data.count;",
													"",
													"/**",
													" * Tests to validate API response processed successfully",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Check request processed successfully\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"/**",
													" * Tests to validate API structure and contracts",
													" */",
													"pm.test(\"Get Watcher details in team workspace - Response should have valid structure\", function () {",
													"\tpm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
													"\tpm.expect(jsonData.meta).to.eql({",
													"\t\tmodel: 'api',",
													"\t\taction: 'getWatchDetails'",
													"\t});",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"\tpm.expect(jsonData.data.count).not.to.be.null;",
													"});",
													"",
													"/**",
													" * Tests to validate API response is 400 is empty header is provided",
													" */",
													"",
													"",
													"let _request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET'",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for empty header\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"",
													"\t});",
													"});",
													"",
													"",
													"",
													"/**",
													" * Tests to validate API response is 403 is wrong access token is provided",
													" */",
													"",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\tmethod: 'GET',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': '1234'",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"\tpm.test(\"Get Watcher details in team workspace - Check status code is 403 for wrong access token\", function () {",
													"\t\tpm.expect(res.status).to.eql(\"Forbidden\");",
													"\t\tpm.expect(res.code).to.eql(403);",
													"\t\tpm.expect(res.json().error).to.contain({",
													"\t\t\tname: \"notLoggedInError\",",
													"\t\t\tmessage: \"You need to be logged in to perform this operation.\"",
													"\t\t});",
													"\t});",
													"});",
													"",
													"",
													"/**",
													" * Test the watch count after unsubscribing to an API",
													" */",
													"",
													"_request = {",
													"\turl: `${_url}/apis/${_watchApiId}/unwatch`,",
													"\tmethod: 'PUT',",
													"\theader: {",
													"\t\t'content-type': 'application/json',",
													"\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t},",
													"\tbody: {",
													"\t\tmode: 'raw',",
													"\t\traw: JSON.stringify({})",
													"\t}",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"",
													"\tconst watchRequest = {",
													"\t\turl: `${_url}/apis/${_watchApiId}/watch`,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\t'content-type': 'application/json',",
													"\t\t\t'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"\t\t},",
													"\t\tbody: {",
													"\t\t\tmode: 'raw',",
													"\t\t\traw: JSON.stringify({})",
													"\t\t}",
													"\t};",
													"",
													"\tpm.sendRequest(watchRequest, function (err, res) {",
													"\t\tpm.test(\"Get Watcher details in team workspace - Check watcher count decreased after user unsubscibe to the API\", function () {",
													"\t\t\tpm.expect(res.code).to.eql(200);",
													"\t\t\tpm.expect(res.json().data.count).to.eql(0);",
													"\t\t});",
													"\t});",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "252ce29d-7fcf-4a94-832d-86a313014f63"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let _request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(_request, function (err, res) {",
													"    pm.test(\"PREREQ: Get Watcher details in team workspace - Check admin is watching the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "6ebb6c6b-88d0-4723-bf62-90649ecfa7d2"
											}
										}
									],
									"id": "da500e46-5dc9-43f5-a81a-17ef100fa7e2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{admin_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watch",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watch"
											]
										}
									},
									"response": []
								},
								{
									"name": "[API EDITOR] GET Watcher List in Team Workspace",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let _url = pm.environment.get('url');",
													"let _watchApiId = pm.environment.get('team_workspace_api_id');",
													"",
													"let admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_editor_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"let non_admin_request = {",
													"    url: `${_url}/apis/${_watchApiId}/watch`,",
													"    method: 'PUT',",
													"    header: {",
													"        'content-type': 'application/json',",
													"        'X-Access-Token': pm.environment.get('api_viewer_access_token')",
													"    },",
													"    body: {",
													"        mode: 'raw',",
													"        raw: JSON.stringify({})",
													"    }",
													"};",
													"",
													"pm.sendRequest(admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});",
													"",
													"pm.sendRequest(non_admin_request, function (err, res) {",
													"    pm.test(\"PREREQ: Non-Admin subscribes to the API\", function () {",
													"        pm.expect(res.code).to.eql(200);",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"id": "40b9b309-5841-4aa4-8ae4-b90f1aa08648"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"",
													"pm.test(\"Get Watcher List - Status code is 200\", function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Get Watcher List - Check watcher count\", function () {",
													"\tpm.expect(response.data.public.count, 'Check watcher count is 2').to.equal(2);",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[0].name, 'Check Admin Name').to.equal(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].profileUrl, 'Check Admin Profile URL').to.contain(pm.environment.get('api_editor_username'));",
													"\tpm.expect(response.data.public.watchers[0].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});",
													"",
													"pm.test(\"Get Watcher List - Check Non Admin details\", function () {",
													"\tpm.expect(response.data.public.watchers[1].name, 'Check Non-Admin Name').to.equal(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].profileUrl, 'Check Non-Admin Profile URL').to.contain(pm.environment.get('api_viewer_username'));",
													"\tpm.expect(response.data.public.watchers[1].userId, 'Check Admin user id is displayed correctly').to.equal(String(pm.environment.get('api_viewer_user_id')));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "7d90d0ea-a7c3-41d6-83f1-07948087da46"
											}
										}
									],
									"id": "0594932a-a3bd-40e5-a8bf-a54e00389976",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/watchers",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"watchers"
											]
										}
									},
									"response": []
								}
							],
							"id": "ea27359b-76da-44b0-b477-8caff934624d"
						}
					],
					"id": "be918b89-dec0-460d-90b7-b48c31a71953",
					"description": "Test Watching SPEC APIs.\n\nProduct Specification: \nhttps://postmanlabs.atlassian.net/wiki/spaces/ADP/pages/2323972466/API+Platform+1.13+-+Watching+APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "b133b12d-11f9-4d39-ac3f-d3e5127851dd"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "9eb80a4a-782a-4cff-84cd-e32541be7f34"
							}
						}
					]
				},
				{
					"name": "ContextBar",
					"item": [
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "GET API Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('personal_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('personal_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(response.data.createdBy, 'check api created by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"\tpm.expect(response.data.updatedBy, 'check API updated by').to.equal(String(pm.environment.get('api_editor_user_id')));",
													"});"
												],
												"type": "text/javascript",
												"id": "96ca5966-7ace-4264-abf1-63fc16b3fcd0"
											}
										}
									],
									"id": "504a0d38-74ff-4bfa-90be-30c72f8dd7b6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('personal_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "b8cdfc06-41d4-43cc-b41f-ee487415a7b5"
											}
										}
									],
									"id": "f995608f-e6b7-4315-965c-5e1496d4f892",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('personal_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "34b16d63-9d2b-4d2c-b95e-e327c688d0eb"
											}
										}
									],
									"id": "a518bb05-5b8b-40e0-a745-c722cd93b885",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": " {{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "b4a3d111-4000-4176-853a-5019f4d32713"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "GET API Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API name and ID`, function () {",
													"\tpm.expect(response.data.id, 'check api id').to.equal(pm.environment.get('team_workspace_api_id'));",
													"\tpm.expect(response.data.name, 'check API name').to.equal(pm.environment.get('team_workspace_api_name'));",
													"});",
													"",
													"pm.test(`${component} - chcek API created by and updated by data`, function () {",
													"\tpm.expect(Number(response.data.createdBy), 'check api created by').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data.updatedBy), 'check API updated by').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "278a3ad3-fa0f-4c19-a439-bf02fef0d1dc"
											}
										}
									],
									"id": "c88723a4-dd98-405a-ad63-bfa42def9755",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "",
												"type": "text",
												"value": ""
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Version Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API vesrion details in Team Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data[0].id, 'check api version id').to.equal(pm.environment.get('team_workspace_api_version_id'));",
													"\tpm.expect(response.data[0].name, 'check API version name').to.equal('v0.0.1');",
													"});",
													"",
													"pm.test(`${component} - chcek API version createdAt and updatedAt data`, function () {",
													"\tpm.expect(response.data[0].createdAt, 'check api version createdAt').not.to.be.null;",
													"\tpm.expect(response.data[0].updatedAt, 'check api version updatedAt').not.to.be.null;",
													"\tpm.expect(Number(response.data[0].createdBy), 'check api version createdBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"\tpm.expect(Number(response.data[0].updatedBy), 'check api version updatedBy').to.equal(pm.environment.get('api_editor_user_id'));",
													"});"
												],
												"type": "text/javascript",
												"id": "e62d9039-a998-47a2-ad4d-b82524a58fdd"
											}
										}
									],
									"id": "8e234ff5-e402-4b8f-8fdd-19ef9e1c6f99",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions?populate='createdBy'",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions"
											],
											"query": [
												{
													"key": "populate",
													"value": "'createdBy'"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET API Schema Information in Team Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response = pm.response.json();",
													"const component = 'Get API Schema details in Personal Workspace'",
													"",
													"pm.test(`${component} - Status code is 200`, function () {",
													"\tpm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`${component} - chcek API version name and ID`, function () {",
													"\tpm.expect(response.data.schema[0], 'check api version id').to.equal(pm.environment.get('team_workspace_api_schema_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "c6e7282d-456b-4647-968f-30b84b57107b"
											}
										}
									],
									"id": "06d5910b-2083-444d-977a-a45b08a9cc06",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": " {{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/{{team_workspace_api_id}}/versions/{{team_workspace_api_version_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{team_workspace_api_id}}",
												"versions",
												"{{team_workspace_api_version_id}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "a5f8b96f-2a20-4b8b-b97d-8443d27415c8"
						}
					],
					"id": "db047bec-661c-4d6b-acd5-c4eed2898e1b"
				},
				{
					"name": "Inline Comments",
					"item": [
						{
							"name": "Prod",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide Exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env')=== 'prod'){",
															" postman.setNextRequest('[API EDITOR PROD] Create a inline comment in PWS');",
															"}else{",
															"    postman.setNextRequest('Decide inline comment exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "19dc1184-8fd2-41db-8f5e-ff6fe9d4d9eb"
													}
												}
											],
											"id": "fa41cf2d-0a3e-44ff-8313-b96cfae442b3",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "f57043b9-ca21-4919-a8f3-0a9ac68ced5c"
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "e80d687a-9956-4777-8b7d-ffb6f505cd8a"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "75569906-d64d-4e5c-83da-c711dc8452ce"
													}
												}
											],
											"id": "5c65015c-4743-4256-8399-05777bf32ae5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "de24e10a-c614-40d9-bc06-7dea8d157c9d"
													}
												}
											],
											"id": "cbeb55ef-1955-4498-ad41-29013fc2fb69",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "556c5b1f-9cd2-4b4d-b765-dc9b627bd4db"
													}
												}
											],
											"id": "b576c41e-8b35-47ad-b528-57bc573af6c9",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{personal_workspace_api_comment_id}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "63a14c4f-5a8e-463b-82e5-56f59f29c09d"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR PROD] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "f016fea9-e211-405f-a781-45eb7429d74f"
													}
												}
											],
											"id": "d5b8441a-838d-4e5e-8e3b-ece8471b2316",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "b4264250-b519-406e-bd58-83f2e063fcf6"
													}
												}
											],
											"id": "15f4733a-9a81-45e1-852e-4b284d2f5949",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}\n"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "62cff1b0-4838-45c8-872c-51c41ee87416"
													}
												}
											],
											"id": "1cfa812e-cffa-44af-a411-9dbbf2b0f471",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_admin}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "1dac7b1a-89ec-4cf0-87e4-5b23f9668938"
													}
												}
											],
											"id": "7ad9febb-46c7-43a0-a662-6131175841b8",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"post\",\n    \"path\": \"/comments\",\n    \"body\": {\n\t\t\"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "222d655f-49dc-4b90-b8a5-13b958e62681"
													}
												}
											],
											"id": "3accdaf9-903d-45d1-bf03-5f4673858e13",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"put\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\",\n    \"body\": {\n\t\t\"body\": \"updated test comment\"\n    }\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER PROD] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "b20de982-eb8e-4259-89f2-49e4ac5d97d9"
													}
												}
											],
											"id": "7e5037d7-59ce-48c1-9566-a3c612630392",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"service\": \"annotation\",\n    \"method\": \"delete\",\n    \"path\": \"/comments/{{tws_api_comment_id_team_member}}\"\n}"
												},
												"url": {
													"raw": "{{annontation_proxy_url}}",
													"host": [
														"{{annontation_proxy_url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "45f3e8f7-e892-4bde-9a64-533d4235d26d"
								}
							],
							"id": "96a74bbd-9e8a-43e8-9459-a3cfa84f0228",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "07ff6206-197a-4f0c-9e29-bdcffaa91cfc"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "98c99074-b879-4b7c-8bfb-2e8a85f59f20"
									}
								}
							]
						},
						{
							"name": "Beta-Stage",
							"item": [
								{
									"name": "Decide Exec",
									"item": [
										{
											"name": "Decide inline comment exec",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if(pm.environment.get('test_env') === 'prod'){",
															"    postman.setNextRequest('Decide Exec');",
															"}"
														],
														"type": "text/javascript",
														"id": "07df8453-8088-4b7d-9d29-f7aa0b725ef5"
													}
												}
											],
											"id": "c4faf117-0dea-4f4c-972d-fd3112c54f8f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}",
													"host": [
														"{{url}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "7b0f6ad4-926f-47d7-840f-d551b164567a",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "e39c5e7b-4d1a-4850-b7a8-5d22883072d9"
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												],
												"id": "e5a0cf9c-8246-458b-8464-0339ff943f42"
											}
										}
									]
								},
								{
									"name": "Personal Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('personal_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('personal_workspace_api_comment_id', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "da17cd36-b9e1-4a8f-8218-a3ff7e4a18fc"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"id": "0f92f577-c9e7-4a5f-940e-9397911d260a"
													}
												}
											],
											"id": "25c0044f-a9ca-4a76-9a9a-f946c5f92aa0",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{personal_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Update the inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "5275b759-e53d-4a19-ab4a-181e9d8a0097"
													}
												}
											],
											"id": "2e3bba2c-2b3f-43e6-ac9d-9c3b3dbca000",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in PWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in personal workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('personal_workspace_api_comment_id'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"",
															"",
															"// clear the comment id environment variable",
															"pm.environment.unset('personal_workspace_api_comment_id')"
														],
														"type": "text/javascript",
														"id": "6fda218c-78a2-4b8c-b565-8bc0b4ffeaae"
													}
												}
											],
											"id": "d2d0a353-5e3d-4bfb-a531-78516a2d0ba8",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{personal_workspace_api_comment_id}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{personal_workspace_api_comment_id}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "bb8deaf2-eb3c-4542-ac7f-7ceb2305fa46"
								},
								{
									"name": "Team Workspace",
									"item": [
										{
											"name": "[API EDITOR] Create a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_editor_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_admin', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "03b9baf1-1c23-40e4-b1ab-ba30f014b7c8"
													}
												}
											],
											"id": "a7ace420-0464-4508-a698-534fa6fc6783",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "6729cf63-8170-4409-92a0-96c2ad9ea993"
													}
												}
											],
											"id": "e2880b20-4d52-4d3b-9b17-f6e9cb732ff2",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_editor_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API EDITOR] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Admin delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_admin'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_admin')",
															""
														],
														"type": "text/javascript",
														"id": "4847833d-292c-473a-804b-1f8158dbbe67"
													}
												}
											],
											"id": "35c209d7-0871-4445-ad98-ce7c28df2b00",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_editor_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_admin}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_admin}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Creates a inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member creates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															" pm.expect(response.comment.body).to.equals('Test comment');",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct contracts`, function(){",
															" pm.expect(response.comment.body, `check body is not null`).not.to.be.null;",
															" pm.expect(response.comment.id, `check comment id is not null`).not.to.be.null;",
															" pm.expect(response.comment.createdBy, `check createdBy is not null`).to.be.equals(Number(pm.environment.get('api_viewer_user_id')));",
															" pm.expect(response.comment.createdAt, `check createdAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.updatedAt, `check updateAt is not null`).not.to.be.null;",
															" pm.expect(response.comment.annotationId, `check annotationId is not nul`).not.to.be.null;",
															"});",
															"",
															"pm.test(`${spec} - Comment is crerated for correct API`, function(){",
															" pm.expect(response.annotation.modelId).to.equals(pm.environment.get('team_workspace_api_id'));",
															"});",
															"",
															"// set the comment id as environment variable",
															"pm.environment.set('tws_api_comment_id_team_member', response.comment.id)"
														],
														"type": "text/javascript",
														"id": "779eb8c4-b9c9-4485-a693-d8b40e9998cf"
													}
												}
											],
											"id": "a3caaa20-0779-478d-9f93-e4458e9dc419",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"body\": \"Test comment\",\n    \"model\": \"api\",\n    \"modelId\": \"{{team_workspace_api_id}}\",\n    \"tags\": {},\n    \"version\": \"1.0.0\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{annotation_url}}/comments",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Updates inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member updates a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});"
														],
														"type": "text/javascript",
														"id": "5bc6f517-b169-42f7-85a8-ab6ba96fbd00"
													}
												}
											],
											"id": "6f1f7bdc-487d-4f95-9da0-a3b53d3d9da5",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-access-token",
														"value": "{{api_viewer_access_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[API VIEWER] Deletes inline comment in TWS",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"const response= pm.response.json();",
															"const spec=\"Team member delets a new comment in team workspace\";",
															"",
															"pm.test(`${spec} - status code is 200`, function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(`${spec} - Comment has correct body content`, function(){",
															"    pm.expect(response.comment.id).to.equals(pm.environment.get('tws_api_comment_id_team_member'));",
															" pm.expect(response.comment.body).to.equals('updated test comment');",
															"});",
															"",
															"pm.environment.unset('tws_api_comment_id_team_member')"
														],
														"type": "text/javascript",
														"id": "fc19e2c9-64f2-457b-8d8b-9ee458009a47"
													}
												}
											],
											"id": "5c5ce31d-a41c-4c65-949b-be3b2aff5181",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-access-token",
														"type": "text",
														"value": "{{api_viewer_access_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"body\": \"updated test comment\"\n}"
												},
												"url": {
													"raw": "{{annotation_url}}/comments/{{tws_api_comment_id_team_member}}",
													"host": [
														"{{annotation_url}}"
													],
													"path": [
														"comments",
														"{{tws_api_comment_id_team_member}}"
													]
												}
											},
											"response": []
										}
									],
									"id": "833e5f53-6d55-491a-8686-7623fb8245d5"
								}
							],
							"id": "6a2a9db4-13c7-4602-a4b8-86958d724560",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "160a54df-5528-44cd-98a2-9f5e59040478"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "443dfca4-b766-4c78-85bf-3a2291f6d797"
									}
								}
							]
						}
					],
					"id": "47ee2882-842b-4209-bd25-00df3f84fb70",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "dbd56e46-031f-4f75-a4be-296c6600e5c2"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "9005076e-2fde-4aba-811a-70e367635077"
							}
						}
					]
				},
				{
					"name": "Auto update API elements",
					"item": [
						{
							"name": "Decide Exec",
							"item": [
								{
									"name": "Decide Exec",
									"id": "7e6f1496-c35e-43eb-809f-69faff130c55",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}",
											"host": [
												"{{url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "ffd49594-99a3-40d5-a6c8-309bb9cc5b01"
						},
						{
							"name": "Personal Workspace",
							"item": [
								{
									"name": "Generate collection for Personal workspace API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_id', response.data.id);",
													"pm.environment.set('personal_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "ffe71b07-12f3-4481-b909-551ddcdd9264"
											}
										}
									],
									"id": "60f86470-116c-4219-816f-40a157af25f6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{personal_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations?workspace={{personal_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{personal_workspace_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate Diff for Collection in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "1f46953b-bbac-4465-8f43-0cdaeb49725b"
											}
										}
									],
									"id": "46e8109e-731a-415b-b3be-bda91c9c160a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "9f348074-0d81-41d0-804e-8ca7aac86a34",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "d2f75114-b1b9-47ef-97e0-f10a64abda7b",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "115b7eaa-5927-4a65-a7be-738f8bc1be7d",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "f332dbde-1f28-49fb-84b6-f53aa21be221",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('personal_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "06958680-02ad-4242-81b5-87d26d37a4bc"
											}
										}
									],
									"id": "6dd6345c-0d07-484d-8242-ef13d3897fa3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "1ec019b7-c375-4b6a-8059-ac1a0146b76d",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "fbb862f2-4f0a-4efb-87f6-e35f5de1627e",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "4b254a48-69ca-45ac-b50b-4e3b6dfdc908",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "83cc76ab-1e20-452f-94e1-5345eac6eb2d",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update All Changes in The Relation in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('personal_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "72ad7a99-0c2e-45e3-beed-318a2d06da37"
											}
										}
									],
									"id": "019b819c-82fc-41f8-a37c-79518704647f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/{{personal_workspace_api_id}}/versions/{{personal_workspace_api_version_id}}/relations/documentation/{{personal_workspace_entity_id}}/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"{{personal_workspace_api_id}}",
												"versions",
												"{{personal_workspace_api_version_id}}",
												"relations",
												"documentation",
												"{{personal_workspace_entity_id}}",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Fetch Diff Data Again For the Realtion in Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('personal_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "1cd7d1a5-103b-4ae9-9336-cecd819013fd"
											}
										}
									],
									"id": "7f21b5ed-544e-4f7e-9d45-510affc4a3fc",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "e20ed889-3f0f-4d20-ab3d-e5dc4fff6e72",
													"key": "apiId",
													"value": "{{personal_workspace_api_id}}"
												},
												{
													"id": "e9f000cf-49fe-4372-9fd4-b59ca1041fff",
													"key": "apiVersionId",
													"value": "{{personal_workspace_api_version_id}}"
												},
												{
													"id": "299ce2d2-27bd-46a3-ad72-e42fbbeaa843",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "45316287-7177-43ab-8f57-014377d2967a",
													"key": "entityId",
													"value": "{{personal_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Relation from Personal Workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from personal workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('personal_workspace_entity_id');",
													"pm.environment.unset('personal_workspace_collection_id');",
													"pm.environment.unset('personal_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "a092ebd0-054f-43ab-8871-0a1926ca2cfb"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('personal_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('personal_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "76d268eb-fd19-42a3-84a9-d6e1a0c49f55"
											}
										}
									],
									"id": "26869e19-e6f9-4c2d-b4e7-abca7ab25db4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "040b76eb-17d1-4008-b69d-4d2ee898c85c"
						},
						{
							"name": "Team Workspace",
							"item": [
								{
									"name": "[EDIROR] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "8f77fad4-601c-4de1-b548-41b3f16ed072"
											}
										}
									],
									"id": "f16453b3-a969-4397-a66c-ef048d820fc7",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "8f60bfb1-1247-45c4-bfd6-cffa80c04657",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "2ae22a34-a872-4c03-817f-b3ab4916b233",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "fa165b71-dafe-4951-8546-94a1ebf5d649"
											}
										}
									],
									"id": "a9dd2768-2f7a-4e3a-b4df-ecfa8b2f7eed",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "c6b77e38-3a5b-45d4-bf63-eb9ce78fd54b",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "727b0538-dd45-4eb7-9b7a-02ae7a7e3d53",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "9dda0ea7-88dd-43a7-9c00-33bd6554911b",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "0ba08a54-4071-4a6d-9291-7387dd6f2950",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "3a663038-6d10-4dd2-9d70-addb5db0e858"
											}
										}
									],
									"id": "bac61544-1690-4212-a081-c2609f228a00",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "00db6902-3970-4f1b-9654-c67b8f61f741",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "af2d8d62-0df6-43d2-bc33-2281275cb8aa",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "7fcf6fab-5ce4-456e-b8bf-70a52b5707bf",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "bffe3acb-0085-4b5c-a9b1-c1f3f252a019",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "bfee7580-9b54-423f-8ba5-680ec0279c54"
											}
										}
									],
									"id": "721560ee-c42f-4d85-bfb4-4eec94deb2de",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "8d21f118-523a-43a3-999f-0e7aca75e11c",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "32ca8e9d-b3d0-4731-b5ed-b48cc5c0da79",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "aae3f7eb-62cd-447f-9b7a-5c5d721ad1f0",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "9992f9aa-37ad-4028-b5c3-ba5fb6e1dee5"
											}
										}
									],
									"id": "5095b5ce-04c6-460d-8d80-91b5844c4fa2",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_editor_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "9d32899f-37e5-4ea9-89ef-a4509db2b900",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "faf85fc7-d056-45ed-ac68-b137b83a32a6",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "23f7ce11-5fc7-4372-bbcc-62311853c83a",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "7b7d344e-8a72-4850-b5b9-cfd3783c8bd4",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "c4707461-a426-4acf-b4da-56469372ecfa"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "6c30dce9-602a-466d-b321-35d8b2d7421a"
											}
										}
									],
									"id": "4f436eff-4e7d-4ad0-aabf-25b555060a18",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Generate collection for team workspace api",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													"",
													""
												],
												"type": "text/javascript",
												"id": "0028c845-2d4d-4317-b7f3-ea54e3bda8c4"
											}
										}
									],
									"id": "7c618efb-19d7-4edb-9cab-e52d1caafa6b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_viewer_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "5c70b342-bf2e-43de-8926-ddad174c1d13",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "37b2764d-7ae1-45b4-9215-384595f6338e",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Validate relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Validate collection in Personal Workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "48b79696-15c3-4874-83e9-ac74d156a2cf"
											}
										}
									],
									"id": "6d22723a-a6a3-4c9b-a69c-65f7cba463ad",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/validate",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"validate"
											],
											"variable": [
												{
													"id": "39ea24a2-31f1-407b-a6d2-ad0e9f564b3a",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "7f1187a3-a6b9-4693-adc1-3b94030f89a8",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "ca701acd-636c-41fc-a3de-496af25b732f",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "2350e521-d84c-4db5-885c-0e9d239bf14b",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_diff_data', pm.response.json().data.diff);"
												],
												"type": "text/javascript",
												"id": "8f609f9a-d253-42b5-960d-c2507b15dc48"
											}
										}
									],
									"id": "a074c0c2-749e-491f-8ffd-28ab748d1706",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "f175a2e2-efc4-41a6-b291-0267b3a9ad18",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "34d96780-92ba-441b-a5bc-f28f39d66370",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "e317fd7f-4530-4a86-91f9-f99b2ee1b455",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "5eb2cea0-3de1-4e40-a2fa-530424e1195a",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Update all diff in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate data object\", function () {",
													"    pm.expect(response.data.link.view_updated_collection.url, 'Check url contains collection id').to.contain(pm.environment.get('team_workspace_collection_id'));",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "b004de05-d871-41b7-8c8e-b485c1513ef6"
											}
										}
									],
									"id": "8505e67c-f2f7-436a-8648-a6d313995c76",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "a8ceec8b-fc45-43a9-b7dd-a2afb0a5e058",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "83de4019-6e05-49d9-ab2a-cfaca279897f",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "4e76e1ea-2169-429d-86ce-81644a9c70d5",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Fetch relation diff again in team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate diff is resolved\", function(){",
													"    pm.expect(pm.response.json().data.diff, 'Check diff data is not same').not.to.equal(pm.environment.get('team_workspace_entity_diff_data'));",
													"});",
													"",
													"pm.test(\"Validate update recommandations are resolved\", function(){",
													"    pm.expect(Object.keys(pm.response.json().data.diff.request.update.objs).length, 'Check diff data is not same').to.be.equal(0);",
													"});"
												],
												"type": "text/javascript",
												"id": "d238c36e-7087-42f8-b066-268d9c60f789"
											}
										}
									],
									"id": "2f54bbf1-a98a-4451-9e36-75e8f0f01e5e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/:apiId/versions/:apiVersionId/relations/:entityType/:entityId/diff",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiId",
												"versions",
												":apiVersionId",
												"relations",
												":entityType",
												":entityId",
												"diff"
											],
											"variable": [
												{
													"id": "e3653a0d-0347-47c8-9bb9-d3004a351ba0",
													"key": "apiId",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "d87a604c-272f-4ae0-9028-1941c6314f86",
													"key": "apiVersionId",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "6b2347ea-7b8c-4334-87ae-3b3cf60db158",
													"key": "entityType",
													"value": "documentation"
												},
												{
													"id": "097a470d-899f-456f-bd43-a7d05e6f2f24",
													"key": "entityId",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "de94501d-7214-4721-99fa-9175cda8c40e"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "3c506d39-7e01-4508-9726-fe232da9f9c2"
											}
										}
									],
									"id": "64a2a55d-fac4-4a8f-827d-edcb5b1b031c",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDIROR] Generate collection to be updated by API VIEWER",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response= pm.response.json();",
													"",
													"pm.test(\"Generate test suite from collection - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate data\", function(){",
													"  pm.expect(response.data.model, 'Check model name').to.equal('collection');",
													"  pm.expect(response.data.modelId, 'Check model id is not null').not.to.be.null;",
													"  pm.expect(response.data.id, 'Check id is not null').not.to.be.null;",
													"  pm.expect(response.data.collectionName, 'Check collection name').to.equal('Personal Workspace Documentation Suite');",
													"  pm.expect(response.data.type, 'Check type of the generated collection').to.equal('documentation');",
													"});",
													"",
													"pm.test(\"Generate test suite from collection - Validate meta information\", function(){",
													"  pm.expect(response.meta.model, 'Check model in meta').to.equal('documentation');",
													"  pm.expect(response.meta.action, 'Check meta action').to.equal('add');",
													"});",
													"",
													"pm.environment.set('team_workspace_entity_id', response.data.id);",
													"pm.environment.set('team_workspace_collection_id', response.data.modelId);",
													""
												],
												"type": "text/javascript",
												"id": "a397895e-cc3f-4a67-be9d-2da54008fc05"
											}
										}
									],
									"id": "77646dae-acbb-46aa-9311-9e70e4243c6a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Access-Token",
												"value": "{{api_editor_access_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"documentation\",\n\t\"schemaId\": \"{{team_workspace_api_schema_id}}\",\n\t\"configurations\": {\n\t\t\"coverter\": {\n\t\t\t\"folderStrategy\": \"Paths\",\n\t\t\t\"collapseFolders\": true\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"name\": \"Personal Workspace Documentation Suite\"\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations?workspace={{team_workspace_id}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{team_workspace_id}}"
												}
											],
											"variable": [
												{
													"id": "c9a468d4-70c4-4977-9d34-866f70d3a8d8",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "ac2b660c-14ac-4dd0-8ad3-e71355e6cd98",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[VIEWER] Viewer tries to update all diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const response=pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "33d1f1d3-06b7-416b-8373-556de57f7968"
											}
										}
									],
									"id": "7a8f8518-f9f7-4939-a22b-2aacd8fac195",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-access-token",
												"type": "text",
												"value": "{{api_viewer_access_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{url}}/apis/:apiID/versions/:versionID/relations/documentation/:entityID/diff?acceptAll=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												":apiID",
												"versions",
												":versionID",
												"relations",
												"documentation",
												":entityID",
												"diff"
											],
											"query": [
												{
													"key": "acceptAll",
													"value": "true"
												}
											],
											"variable": [
												{
													"id": "dd57f9e3-4f3b-43b6-9795-794b71556af5",
													"key": "apiID",
													"value": "{{team_workspace_api_id}}"
												},
												{
													"id": "c1b3f034-a640-4826-a999-8f3bf4f97c53",
													"key": "versionID",
													"value": "{{team_workspace_api_version_id}}"
												},
												{
													"id": "79d018fd-1671-43c5-a931-c1b3ef569c6a",
													"key": "entityID",
													"value": "{{team_workspace_entity_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "[EDITOR CLEANUP] Delete relation from team workspace",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Delete relation from team workspace - Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// un-setting env variables ",
													"pm.environment.unset('team_workspace_entity_id');",
													"pm.environment.unset('team_workspace_collection_id');",
													"pm.environment.unset('team_workspace_entity_diff_data');",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "bdfbbb96-8227-4aec-a158-4ecf98018ade"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const collection_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/collection/${pm.environment.get('team_workspace_collection_id')}` : `${pm.environment.get('url')}/api/collection/${pm.environment.get('team_workspace_collection_id')}`",
													"",
													"pm.environment.set('collection_url', collection_url);"
												],
												"type": "text/javascript",
												"id": "a4a62087-2b76-4d04-aa71-cab93f1d11ca"
											}
										}
									],
									"id": "1e26ec9a-3702-47d3-a013-9292876f5a7a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-access-token",
												"value": "{{api_editor_access_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{collection_url}}",
											"host": [
												"{{collection_url}}"
											]
										}
									},
									"response": []
								}
							],
							"id": "9457eac2-1cb9-4d93-989d-5d2585e28a55"
						}
					],
					"id": "d20ca12b-98e3-4487-adb0-5a065389b811",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "3189833b-7d9b-47fa-b83e-41398694fbcc"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "02cd7113-1a5f-4466-a269-5c50088f4d53"
							}
						}
					]
				},
				{
					"name": "API Listing",
					"item": [
						{
							"name": "[Setup] API Viewer Creates an API in Team Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// check and store new API data",
											"pm.test(\"Create a new API in Team workspace - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"if (pm.response.code !== 200) {",
											"    return postman.setNextRequest(null);",
											"}",
											"",
											"pm.test(\"Create a new API in Team workspace - Default version should have been created\", function () {",
											"    pm.expect(jsonData.data.versions.map(version => version.name)).to.eql([\"0.1\"]);",
											"})",
											"",
											"pm.environment.set(\"temp_team_workspace_api_id\", jsonData.model_id);",
											""
										],
										"type": "text/javascript",
										"id": "310baa41-a400-4633-a9be-1d0412bd083a"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"team_workspace_api_name\", `ADP Team Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "03e3ee81-296c-4982-ace3-93ec14de4995"
									}
								}
							],
							"id": "07f450c6-aa08-448a-af39-d8a3d9f51310",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"api_viewer_{{team_workspace_api_name}}\",\n\t\"summary\": \"This is created by api viewer\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": [
								{
									"id": "62ff69d6-676d-4ea3-8775-e7cb9a24cf28",
									"name": "Create an API (w/ an API Version that does not have any relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\"\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "b23ba7e2-37c1-4966-aecf-5af6b76c5bbd",
									"name": "Create an API (w/ API Version and relations)",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"1.0\",\n\t\t\t\"relations\": {\n\t\t\t\t\"mock\": [],\n\t\t\t\t\"monitor\": [],\n\t\t\t\t\"documentation\": [],\n\t\t\t\t\"loadtest\": [],\n\t\t\t\t\"contracttest\": [],\n\t\t\t\t\"testsuite\": [],\n\t\t\t\t\"environment\": []\n\t\t\t}\n\t\t}\t\n\t]\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"1.0\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								{
									"id": "1f24ad6c-15c9-42bf-a2c7-1fab5b35eb23",
									"name": "Success: Create an API",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Access-Token",
												"value": "{{accessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Sync Service API\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\"\n}"
										},
										"url": {
											"raw": "{{url}}/apis?workspace={{workspaceId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Required. This is the workspace ID in which this API will be created in."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"create\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n\t\t\"name\": \"Sync API\",\n\t\t\"summary\": \"This is a summary\",\n\t\t\"description\": \"This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.This is a description.\",\n\t\t\"createdBy\": \"5665\",\n\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\"updatedAt\": \"2019-02-12 19:34:49\",\n\t\t\"versions\": [\n\t\t\t{\n\t\t\t\t\"id\": \"07a9434a-b502-4c3c-aa82-677db74e4b74\",\n\t\t\t\t\"name\": \"0.1\",\n\t\t\t\t\"createdBy\": \"5665\",\n\t\t\t\t\"createdAt\": \"2019-02-12 19:34:49\",\n\t\t\t\t\"updatedAt\": \"2019-02-12 19:34:49\"\n\t\t\t}\n\t\t]\n\t}\n}"
								}
							]
						},
						{
							"name": "[EDITOR] Get all APIS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details in Team Workspace', function(){",
											"    pm.expect(jsonData).to.length.above(1);",
											"});"
										],
										"type": "text/javascript",
										"id": "8e72c4e9-b398-48ee-b11f-6d1b9ce492b8"
									}
								}
							],
							"id": "030a5ab0-8f8f-40b6-b43f-0d9cb36ce3e3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?workspace={{team_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{team_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[EDITOR] Get only user APIs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('API Editor received all APIs details for Team and Personal Workspace', function(){",
											"    let apiNames=[];",
											"    jsonData.forEach(j=> apiNames.push(j.data.name));",
											"    pm.expect(apiNames.join()).to.include('Team'); ",
											"    pm.expect(apiNames.join()).to.include('Personal'); ",
											"});",
											"",
											"pm.test('API Editor received APIs details that only created by the user', function(){",
											"",
											"    let createdBy=[];",
											"    jsonData.forEach(j=> createdBy.push(j.data.createdBy));",
											"    pm.expect(createdBy).to.length(2);",
											"    createdBy.forEach(userID=> {",
											"        pm.expect(Number(userID)).to.equals(pm.environment.get('api_editor_user_id'));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript",
										"id": "f7fc7c72-2dae-46c0-94b0-1e0d93d31903"
									}
								}
							],
							"id": "1490595f-e1ac-4644-ad98-810e7ffc30b3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/apis?showOnlyUserAPIs=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "showOnlyUserAPIs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] API Viewer Deletes the Team Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"temp_team_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											"",
											"pm.environment.unset(\"temp_team_workspace_api_id\");",
											""
										],
										"type": "text/javascript",
										"id": "aba6bd5e-4f3f-495f-a26d-481fe94404cb"
									}
								}
							],
							"id": "2d8e4517-d49e-4515-a002-401ee4ad0acf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_viewer_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{temp_team_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{temp_team_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "0f85b53c-90a2-4f48-8bfa-b7d6dacbe093",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						}
					],
					"id": "87a9b446-95d1-48c6-95a2-0af4eff11ba0"
				},
				{
					"name": "Workspace Activity Feed",
					"item": [
						{
							"name": "[Setup] Activity Feed Check - Create an API in Personal Workspace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.environment.set(\"activity_feed_personal_workspace_api_id\", jsonData.model_id);",
											"pm.environment.set(\"activity_feed_personal_workspace_api_version_id\", jsonData.data.versions[0].id);",
											""
										],
										"type": "text/javascript",
										"id": "56aeff51-449a-47a0-b36c-48dfa017186c"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const a = new Date();",
											"",
											"pm.environment.set(\"personal_workspace_api_name\", `ADP Personal Test - ${a.toLocaleDateString('en-IN')}-${a.toLocaleTimeString()}`)"
										],
										"type": "text/javascript",
										"id": "c85fc6d8-a512-4691-b60d-970f95fff0ac"
									}
								}
							],
							"id": "7edaf46f-ffd0-4e49-aad1-59ec9e92ba24",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{api_editor_access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"activity-feed-api\",\n\t\"summary\": \"This is supposed to be a short summary.\",\n\t\"description\": \"This is supposed to handle markdown *descriptions*.\",\n\t\"versions\": [\n\t\t{\n\t\t\t\"name\": \"v0.0.1\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{url}}/apis?workspace={{personal_workspace_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{personal_workspace_id}}",
											"description": "Required. This is the workspace ID in which this API will be created in."
										}
									]
								},
								"description": "This endpoint creates an API. The ID will be generated by the server.\n\n### Parameters\n\n*name*: This is the name of the API. (Required)<br>\n*summary*: This is a short summary that describes the API. (Optional)<br>\n*description*: This is a long description that can support markdown. (Optional)<br>\n*workspace*: The workspace ID in which the API is supposed to be created in. (Required)<br>\n*versions*: Array of versions that are to be created for this API. If no versions are provided, a default version \"0.1\" will be created for you. (Optional)"
							},
							"response": []
						},
						{
							"name": "GET Activity Feed After API Creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.equal(`**[${editorName}](${editorURL})** added the **[activity-feed-api](${apiURL})** API`);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "2a6773dc-110f-43b8-b869-2b2a548e2efb"
									}
								}
							],
							"id": "c39c7482-a5a0-4653-8c2b-f90d846e7056",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "0ee3e3bf-dbb6-4bd3-a61a-512a641fea04",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "[Cleanup] Activity Feed Check - Delete the Personal Workspace API",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"// delete the API created for testing watch/unwatch functionality",
											"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"API Destroy - Response should have valid structure\", function () {",
											"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"activity_feed_personal_workspace_api_id\"));",
											"    pm.expect(jsonData.meta).to.eql({",
											"        model: 'api',",
											"        action: 'destroy'",
											"    });",
											"",
											"",
											"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "eb45119c-ce89-4bd0-9513-c13081657d78"
									}
								}
							],
							"id": "a88b0142-626b-4dad-acb7-bc7c4a9f7790",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Access-Token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{url}}/apis/{{activity_feed_personal_workspace_api_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"{{activity_feed_personal_workspace_api_id}}"
									]
								},
								"description": "This endpoint deletes an API."
							},
							"response": [
								{
									"id": "fe46d2b7-ebb7-4115-934d-a7696e52f446",
									"name": "Success: Delete an API",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-Access-Token",
												"type": "text",
												"value": "{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
											"host": [
												"{{url}}"
											],
											"path": [
												"apis",
												"392355ae-5f06-47b7-a5b6-854b8be41bd5"
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
								}
							]
						},
						{
							"name": "GET Activity Feed After API Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const entity = `GET Activity Feed For Personal Workspace`;",
											"const response = pm.response.json();",
											"",
											"",
											"pm.test(`${entity} - Status code is 200`, function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(`${entity} - verify feed model id`, function () {",
											"    pm.expect(response.model_id).to.equal(pm.environment.get('personal_workspace_id'));",
											"});",
											"",
											"pm.test(`${entity} - verify feed meta information`, function () {",
											"    pm.expect(response.meta.model).to.equal('workspace');",
											"    pm.expect(response.meta.action).to.equal('activityfeed');",
											"});",
											"",
											"pm.test(`${entity} - verify feed instance name`, function () {",
											"    pm.expect(response.data[0].instance.name).to.equal('activity-feed-api');",
											"});",
											"",
											"pm.test(`${entity} - verify feed markdown text`, function () {",
											"    const navigationURL = `https://${pm.environment.get('test_env') === 'prod' ? `go.postman.co` : `go.postman-${pm.environment.get('test_env')}.co`}`",
											"    const editorName = pm.environment.get('api_editor_username');",
											"    const apiURL = `${navigationURL}/build/workspace/${pm.environment.get('personal_workspace_id')}/api/${pm.environment.get('activity_feed_personal_workspace_api_id')}`;",
											"    const editorURL = `${navigationURL}/users/${pm.environment.get('api_editor_user_id')}`",
											"",
											"    pm.expect(response.data[0].markdown).to.contain(`**[${editorName}](${editorURL})** deleted the activity-feed-api API`);",
											"});",
											"",
											"",
											"",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_id\");",
											"pm.environment.unset(\"activity_feed_personal_workspace_api_version_id\");",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "6106d09c-166e-4d07-8531-83711be792bd"
									}
								}
							],
							"id": "a3047a8a-428a-4535-8a82-687f1047616e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-access-token",
										"value": "{{api_editor_access_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/workspace/activity/:id?populate_markdown=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"workspace",
										"activity",
										":id"
									],
									"query": [
										{
											"key": "populate_markdown",
											"value": "true"
										}
									],
									"variable": [
										{
											"id": "2cb8604d-04a0-4545-9c5d-cf9cb9050d98",
											"key": "id",
											"value": "{{personal_workspace_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"id": "152d7ac0-1683-48c0-b1e9-2cb640a8bba7"
				}
			],
			"id": "7bb321c4-9f01-4526-9e64-e6ad796244b7"
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "9d28729f-da17-4790-9897-95f124d8224c"
							}
						}
					],
					"id": "8d9982da-5663-4717-9283-67c7fe123b2e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "133db822-9d60-4105-9387-3e7dbbfcb4f5"
							}
						}
					],
					"id": "144011f7-61f2-44ef-a75d-e72161173ea3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "e0409078-96e1-4e26-b22f-6e04518421ea",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "502d6c81-9a3b-4f85-bd8f-e531b82a026c"
							}
						}
					],
					"id": "15dcaad5-dc80-481a-8e81-56c1a2db52e0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "5f04c378-dee7-453d-9bf1-9c8148d565ed",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "f22bf8b9-aab7-4e4a-9985-5b1e2ce17a67"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "58b83b2a-3c79-49a4-ab5d-8c169335e790"
							}
						}
					],
					"id": "6fa3bbfc-2a1d-4df0-9ec2-348259150a5c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "71104f10-3d9f-4ca4-8ca9-0ea9c4932548"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "9a7d8ce4-c3b4-4b7c-a210-c980ce7a2df4"
							}
						}
					],
					"id": "f1793685-d0d5-4e13-8170-7ca360b087b2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "7bd997bd-0888-43fe-94f2-da3ce433508c"
							}
						}
					],
					"id": "a2f95aac-cc76-4aec-809c-f3add7b4686c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "d1c066bb-8084-4af3-8798-24404bc49e62",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "7fd34c14-af39-4d07-9fe6-4b2a14edceb3",
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "d3355822-7716-4e94-b348-f841645a2043",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "0b623d5f-7bc9-4dcd-938e-834e7bec02b1"
							}
						}
					],
					"id": "f82d410a-6187-49d6-876f-52f73af435d7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "3aa0eb84-0046-489d-be38-4fc33c86b9b1",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "14f3d889-934f-4e7f-8c87-7b66cd85834b",
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "76d83a16-3996-476d-bcb9-42dd5223bf65",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "f566b939-042c-416c-be65-4477a3125b8d"
							}
						}
					],
					"id": "2a1d3925-c283-4ea5-addd-0fce89b282fe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "858f8a62-4200-4737-b6a9-23d673d05fc2"
							}
						}
					],
					"id": "e9c6ef4d-1768-4d92-bc9a-7b69786afd09",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "99b2e6f9-c703-4a8c-a896-8cc44eb8cde6",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "640f09a8-fb08-48b8-92be-46dea42bf28e"
							}
						}
					],
					"id": "2800a9ea-c832-4114-93f2-208590b7460d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "dce5d9a0-73c0-4d86-98f1-0ec562d75091",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "688a4a51-0f0e-4caf-9ccb-0050ff5f5b62",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "5078f746-a367-46d8-aaff-893bf88fc02d"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "96650f05-124a-4704-8829-ef7fa28abd13"
					}
				}
			]
		},
		{
			"name": "Cleanup Copy",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "ac093a78-ea22-44d3-99ae-71b8ac0e5a91"
							}
						}
					],
					"id": "20b34b39-9c8e-46cf-94e0-dd762e3729bd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "3035167f-cc99-4cb7-b1c3-426012963972"
							}
						}
					],
					"id": "99e1e3a3-cb10-41fc-9234-84d43b6d7822",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "026bb6d0-05e0-413f-9abc-778d297d6d26",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "8519aa63-a277-42a6-8c5a-99330659df07"
							}
						}
					],
					"id": "89928a23-047f-4ba3-a1e5-1500158097b7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "65d9cabf-fb64-4ab9-ab17-219d0675e54a",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "690714f0-bf65-472d-ac39-8f0a4bcd470f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "02922220-6fe2-4962-aca8-80411f443fb7"
							}
						}
					],
					"id": "a7234202-3a66-4a04-873b-c06693230d95",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "fd1173af-2fcb-43f5-97b1-b9059e7d869e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "ff0f4d54-21f7-49ea-8a16-7113cb169f82"
							}
						}
					],
					"id": "3b3aea6c-4d91-474f-8055-eb42845f06b7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "0b36daf0-03a4-4353-9908-db545518b3ca"
							}
						}
					],
					"id": "201a7f7b-fcd1-4624-b1c2-59998528d266",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "fb0e9550-836e-46f7-b520-9bc7d22bd4a6",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "a1483bd7-a004-4c77-a4f7-96074fc8dd55",
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "5103e64f-06b9-4a4b-a794-08ebee068a39",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "d54e1ca8-e698-4092-86fd-aaa225d5be13"
							}
						}
					],
					"id": "9e9daa4b-fb05-437e-88cc-42870c689e62",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "4c16e7cc-b16e-4e13-ac05-ac825ec3fea7",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "eed0a049-d88d-4127-8f50-75ead6f5b561",
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "e123642a-a052-4fce-86b6-d55228568e09",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "b87f0d95-bb43-470f-bb9b-f43d55783c86"
							}
						}
					],
					"id": "853994f1-65e4-415a-bac7-5b594d7a7f0e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "56afc652-9641-414d-a620-3af902b8c7eb"
							}
						}
					],
					"id": "03b8ec26-97da-459b-ad64-9eaa77b8e12e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "5eb6026d-aa63-4ef2-8425-7362afe7b64a",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "2374d18a-f04d-4853-b496-207e8c631eb0"
							}
						}
					],
					"id": "19dc8491-7046-4247-a932-0398900e1f57",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "642502a1-e101-4617-8cfa-d7ff3e5c1760",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "0335769d-00f1-4d52-8ec3-1f2ed0a45e6b",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "fd20a144-a03b-4acb-8413-10a0340e43c7"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "d9f6a59e-bbd6-4066-8b28-f799eb9d2fa5"
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 2",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4a6f2c20-b29c-4825-bc21-b57449b3cef9"
							}
						}
					],
					"id": "9553e83f-9652-47bc-81d0-0715b03d796d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "effa6187-5637-4772-9904-f3022ee1f998"
							}
						}
					],
					"id": "af822f96-00dd-46dd-99c4-04f0afef7d99",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "0f6e8e11-ef87-45cc-80b0-a28b407cfd8d",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "e8e12bc9-04d9-43c2-b08c-9c06985e1d20"
							}
						}
					],
					"id": "c9f68d27-ebea-4bdb-9c69-bae58b122c8c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "7b1dcceb-a15a-474c-98fe-3b2efe8580a5",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "174e61fe-b4b4-4d55-93e4-5911087f83db"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "31ed3069-4980-4762-8a0e-02416012e001"
							}
						}
					],
					"id": "95b4c900-08ea-4903-a72c-17962c817b2c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "9a30bb2d-68bb-45b3-b5b6-0f5caebd8718"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "ce1471a4-3099-4c24-9147-13a7a69b5530"
							}
						}
					],
					"id": "d34cd0bb-214b-464a-9fdc-81d825b1053e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "8cf874b2-5b85-4cac-9542-c79d00e6e723"
							}
						}
					],
					"id": "955da93a-fce8-4572-a708-81fc7128fd20",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "18862298-0a2b-4e0c-8429-4cd7eb6ef35d",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "1f6ec193-0da5-4358-9374-aad92fe9ae24",
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "f18d25d4-4b2e-4527-8ee0-e2662fd49dac",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "3b75bfa5-b163-4c4c-a7c4-760a90a86d3d"
							}
						}
					],
					"id": "b3b724f6-8058-446e-b2e7-c2a6a22f17ba",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "c43b9a09-ef13-4408-9c6b-9f6dfe953c24",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "11e33efc-d293-48d6-91a1-d05ed062250f",
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "5386f14f-3a45-4b63-a836-e716df4b5798",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "f1c9e563-b140-4657-b06d-3f8699e08753"
							}
						}
					],
					"id": "fa81f9fa-8414-48cf-ae91-0359da59e588",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "13a80fc4-d206-41fc-9c4b-4e034d7c48e3"
							}
						}
					],
					"id": "0096cfbf-ef0a-41c9-916d-ed31abb8e7e7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "e32d0d0f-c695-42b0-90ef-acd652203bb4",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "edf1ac91-1248-4ace-b2c7-e7f227783d76"
							}
						}
					],
					"id": "4a5ff249-870c-422f-b2ef-678fbdd484e8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "eb522c9c-f089-46fd-a8fd-549e880f50f8",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "e3fad875-f90c-4826-9852-895a6cacfc0d",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "49da0b5f-d0e8-4bfe-b377-cc97009e42c4"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "40fe9eb0-ee5f-497b-bae2-ff5b6b1e78ca"
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 3",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "c5fcf779-14f0-4ce3-9165-7d319942a7de"
							}
						}
					],
					"id": "c4f85d23-b252-41bd-88f8-32919c2df207",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "877ff090-9591-42e1-96dc-1a857a2c7758"
							}
						}
					],
					"id": "82f87557-d038-47ce-a46e-894d9db7156b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "10459ac9-922b-41ba-905e-5f862c8b3194",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "ce4cd6f9-e028-4c4a-afd4-39cdadaae223"
							}
						}
					],
					"id": "48d7e784-9a7f-42ba-bb94-49eb9a9ef227",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "f1db408a-8aea-4874-8c8d-4eefa97b479f",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "6eb9162a-8f8f-43b2-ac4c-58bf499485bb"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "a84aad3c-795c-4997-b6c2-7fa2b2dd4025"
							}
						}
					],
					"id": "226fa5ff-4d60-4f34-a8c4-2e33c8b58b52",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "0cac03c3-f3ce-4ae0-a474-9f89e9707735"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "10bc765b-7ca6-4477-98df-f5aea0186651"
							}
						}
					],
					"id": "3992057d-cfe8-41f7-ad87-3d019a429fa3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "9797418a-79e9-4808-89b0-22c6f1b2f704"
							}
						}
					],
					"id": "9e33a4cb-1a66-4493-bf77-597550025648",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "77f1b900-47ae-47dd-98a7-65d05b77fbda",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "e47ba713-8945-4808-92d0-881d8ffaeb1a",
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "c0483472-33e3-413e-b853-ec554cc303d2",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "d5321102-a081-4daf-9853-30fe4c4065a3"
							}
						}
					],
					"id": "2f147579-eea7-4549-9dc7-7e85d50e2344",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "83154290-e2e1-4b1f-b239-8fd018f57099",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "55778f6d-a565-4f45-81c5-b09053d1ec8d",
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "9d17fc01-9c71-4b28-a274-632a10e5c98c",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "ed394932-ce0e-40c1-91f8-365a443ba417"
							}
						}
					],
					"id": "9d7e0132-9ddc-45ed-9ce1-7f16279e367b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "ab3f1450-ad8b-4d4f-9693-253440cdf8c4"
							}
						}
					],
					"id": "68ba37d2-5428-4b36-a0e9-cac1e6a5f865",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "b7c00d1d-836d-4e38-b4c4-72e394de3516",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "6c468f76-6cdc-4da7-b013-2c88eb26c0f2"
							}
						}
					],
					"id": "8e37400a-c2e1-4546-9384-09e3485824c1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "8e11bef8-7335-4097-8e40-ee4f3d2c6290",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "f99ed461-4805-461c-b67a-ceb609011d53",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "5e385fb9-4d3e-4159-8f33-5afca19e8ff5"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "abb571fb-8ef7-43b3-b6ff-2ede3faa329e"
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 4",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "bb5403b9-6a30-4e8f-ab19-32d5da99164b"
							}
						}
					],
					"id": "624a8422-1801-4c07-b5b5-b5382bbee58a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "ab743d30-1aa4-461d-a1a7-4e9f6062d6d8"
							}
						}
					],
					"id": "c3f125f0-343b-4d0b-a0a7-44f636163270",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "764cbda1-2f6b-4ed7-8e2a-c38bf84e4ac0",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "5e1e845b-4521-417e-8572-ffac3692dcb7"
							}
						}
					],
					"id": "039f830f-160a-4cb0-9049-df38987e671b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "445c1a5b-3be0-47c5-842f-5cf49e9e3139",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "dc739f6d-2cc9-4498-9dea-74d9dc273377"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "0f326e16-bcb7-4f39-9d3e-a8b0378581d4"
							}
						}
					],
					"id": "25568895-ab82-4229-a5a0-268f4d82e999",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "5ce5cc09-d412-4943-b288-2da82e120338"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "3895a78f-51d0-4e63-9b04-5631da01d6b9"
							}
						}
					],
					"id": "550c3f5b-35e1-4eb7-b7a6-016612006a7e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "d7265aa5-a436-4c57-b1b4-d447a1d171ce"
							}
						}
					],
					"id": "2ec2ee8c-513c-44f7-b7be-656b55274cf9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "60e131aa-74bb-4ae4-b3ce-3f6b9a42a5d4",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "a38818fa-8a82-41bc-8a84-56c0c7a15c39",
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "7033bf88-1d77-4dd7-8469-98e209ddba82",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "b9ce7be4-61a1-4557-9a10-59924126b8a0"
							}
						}
					],
					"id": "fbe3500d-b241-4ad2-a671-5d6c51a89323",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "e93396ea-3810-4953-9daa-a03cac71ccf7",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "41f7e8d7-7f4e-422c-a005-ee0abe6b17f1",
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "6720a1c5-e8ca-427a-9d78-eb236cd5b63c",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "efc704c5-eba0-420b-b4f1-5ffde4fb758c"
							}
						}
					],
					"id": "de0bd31c-7b07-40e8-ab6b-dcddcfd8622a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "c68c6135-4bb3-4af6-8c89-f0a090500f93"
							}
						}
					],
					"id": "bb2b9873-f871-4dd5-a9c8-e86670830c0b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "ca8947e6-3da3-4cab-bcf6-037c18136d8a",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "0ed6bf52-5c9a-46a2-9a2b-96a1d30bb1d3"
							}
						}
					],
					"id": "c14e6b22-b74c-4671-a566-bd6df7ed2a96",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "f8594b54-ddf9-49b7-9830-2b96706963c1",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "79e64d5d-ac0f-41cd-93a0-ec01c43db579",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "b77d5475-2804-4a15-abb7-25a804742a3c"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "6cd06c82-e694-41c9-a96f-97c5ddf7ba23"
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 5",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "6fd7cc6d-5c92-4d28-bb32-1919cd258a03"
							}
						}
					],
					"id": "1d7e5bde-5b28-4e8b-bfcb-8be407ccbb48",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "0f68e87f-e9c1-49b9-8bbc-610916f8e8f8"
							}
						}
					],
					"id": "00a3063b-1ee3-4baa-933c-7a38db05fd89",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "2c7d620e-a534-4541-a9ad-d77c3b199053",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "e3e446de-0238-48d4-a0b0-457630cb3b3f"
							}
						}
					],
					"id": "3fc76d01-b42d-4586-b947-6a11fad84b66",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "120b3884-3e5a-4471-804f-f877ea49de2b",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "c652c369-abe5-4eeb-b2ab-9e304089b8c6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "c3e79e81-5ad9-4dc0-8d83-41f0dc55b980"
							}
						}
					],
					"id": "3b93cf30-9ca2-4a7c-8ef8-46ce33ac02c6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "9a4f7423-0098-48cd-b4ec-80804ad46ab7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "376d08f5-3a1b-4129-81f0-6ae9d1168a20"
							}
						}
					],
					"id": "842f8a68-8a3e-423e-9173-90b1a8d30106",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "4891f8f7-5ec3-4f59-8a76-3922bfd875e4"
							}
						}
					],
					"id": "26e92c09-e0ff-4bce-83ad-3d045815c6ae",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "6c6b97ba-60c5-4846-bad8-6988e2429cd6",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "90b471ef-b6fb-420b-8fec-969bfbaa4a21",
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "393f2a43-32c3-45cd-9dc4-9aadd5f2fce2",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "932be597-4589-421c-935c-10f330c538f6"
							}
						}
					],
					"id": "3cae9801-0bfb-4f2f-99ed-971572e4e5fc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "93afd691-4088-4f1f-9bfa-e49edf89c1fe",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "dd50fc77-223e-4a5b-87b3-2237909a7afa",
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "129b7506-e0de-40c3-82ac-875e843ac7ed",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "f1c2949b-fd83-478c-b518-8851b3f25802"
							}
						}
					],
					"id": "f1fdeae4-d23d-4ff2-b6e5-4151f9ffe47d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "1b250309-6e74-4582-9b29-ad34263fc4f7"
							}
						}
					],
					"id": "fed2925b-bbf0-49cf-bdbf-8645e8e49759",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "217222bb-8e10-4c80-928c-476624de2fe2",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "834182c8-da03-42be-be51-54dceaacb9e9"
							}
						}
					],
					"id": "95c32d38-caaf-4a33-8c5f-1ee1c814aad7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "53825f00-089d-4089-9ed5-94ae2752a12a",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "2275e140-4879-4b50-a776-ccad3d9c683b",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "67ac5024-c823-48f5-a71c-54fdca63f22b"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "a3cb7ecf-8b2a-487c-af17-93d163e6103b"
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 6",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "398a30ef-d9e8-468d-a3d9-ccb58d2c44f3"
							}
						}
					],
					"id": "8366edd9-57a6-4ed7-b1da-e31a01ad3376",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "7adc73fd-0791-40f7-b2be-717ff6a69edd"
							}
						}
					],
					"id": "ae5ce3d0-58bf-4d93-83f1-94cbd66981df",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "5ffa74af-9033-4089-b6d0-3c450048dfae",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "43771f34-1333-4ab6-9b64-739c20fc4e66"
							}
						}
					],
					"id": "1993a9c6-0f6b-481a-b508-636b891c1944",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "39e42840-d9ca-422f-8429-bae9c2474a5d",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "fe190d16-cb74-4047-a4f4-4b26423c5634"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "825e8a9a-2b9a-4803-ba4f-49476f8c6af2"
							}
						}
					],
					"id": "f6c75c09-7162-4037-a840-09c765b498aa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "03f4d17c-6221-40b6-87c7-69b71e6e497b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "17ea3990-3c7d-48e4-a702-a61d1207a99c"
							}
						}
					],
					"id": "db851855-a2f5-4152-abe9-e7649a99b3a7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "5fa74e44-9639-45d1-a687-b2f55d3967a1"
							}
						}
					],
					"id": "4ab512c7-38e6-4fb9-b0fb-41ee4c4316d4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "26f16b62-0c08-4d33-911f-35600eb2e3bd",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "fabb6eb9-a101-4daf-a291-5703f84177e9",
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "8676dbab-9664-40de-9e28-c1b6e78347e0",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "a7b34999-a471-493f-808d-23e2aec69d74"
							}
						}
					],
					"id": "6ea18c15-799a-4d7e-9c8d-97af67c2bfff",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "2ead2f46-d3e4-444b-9a42-5bdad12b3afe",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "86e97b43-c9c1-4be3-878a-21dfdd783bf8",
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "e50e4dd2-5f23-45f6-a341-7855496f9761",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "b9940c49-aacf-4776-a985-f51c35a99cf5"
							}
						}
					],
					"id": "1e95bd43-5179-4d66-8f9a-a68bcd3cde25",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "ce2e6fe0-326c-422b-bc14-443c2619618e"
							}
						}
					],
					"id": "7cea409c-febe-4806-a47b-71074654e875",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "a458ea56-15fe-4dec-8fb7-ef61a22df825",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "fbbf2c60-1ca1-49ac-b4b2-07b9a139167d"
							}
						}
					],
					"id": "7576a5dd-b3f4-4e51-8629-fc71b5b0408b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "afbf16e1-5a19-4f59-bebf-989623c83635",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "563e76d2-db34-4790-84bb-728a1eff66bf",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "c0456fe9-3a1b-4142-924b-a52b7b3b7ac1"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "a5536a35-4715-4de5-ab19-f230513e8ad4"
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 7",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b26c7e75-da4b-432f-a3d5-5d77abf4b681"
							}
						}
					],
					"id": "b18e3f1e-3760-4710-a931-5c19f00bcfe3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "a2a6adf0-6c6e-4494-a81b-6d48ce9c6935"
							}
						}
					],
					"id": "43f8564b-eafe-4f90-8d5e-2249b0e77fec",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "cf815d92-3621-44c4-b4c5-b9f1284c1e32",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "88a9ee47-3dad-4069-abce-c7fd50195f22"
							}
						}
					],
					"id": "dc778c9c-7d7c-4c6b-915d-e286e4f70aec",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "dc156b3f-8faa-411c-b637-21ce8ba4625d",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "385e25f8-c61b-4c43-8275-ad6b68dcb15d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "a9f1d9b2-96ba-4069-9060-6476ffb23784"
							}
						}
					],
					"id": "7ff2d42a-a3c5-4eff-9dde-4ac2f0eda1b2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "a78277bd-eec5-4b3f-abb8-b4d4ecb2ac24"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "c620773f-ab5c-4499-8cbd-81b419c44401"
							}
						}
					],
					"id": "cb651a3c-8871-49dc-93b6-d05b70edcfaf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "be16c9a7-2cd3-452b-ba45-68339fe75361"
							}
						}
					],
					"id": "dcbac4b9-8c89-4852-b6aa-09be781e74d9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "34268ed7-e1fc-47e2-8a63-f3c20056845d",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "f61af68c-7d0a-4978-b637-8732e0e07002",
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "7503feac-1be4-443d-a7fc-b90a8ec4fa48",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "ac2b192c-c081-4ddc-8842-f575a215418a"
							}
						}
					],
					"id": "7f83ab16-8071-496a-9a4f-0d9ef03c4bb8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "d5304730-0f87-4d60-accf-e39300a494ce",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "ed862380-1052-4e1c-aeb6-aacaacc08846",
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "ce2b627c-2a38-4516-abe5-7b134782fa55",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "15f84608-1c5e-4cc0-a8c4-e0f8c15a1c39"
							}
						}
					],
					"id": "b36b0858-7b39-490b-9695-06f70a4637ee",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "010fa3c4-742a-47c0-be78-928a5691a5a9"
							}
						}
					],
					"id": "a8633ceb-4fc2-4770-a72a-25a9f1dd326a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "12cc41ad-2f60-41fe-9cb5-1a1a1deb11fd",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "dd85b2b6-8ae9-4f99-aef6-1435766aecd4"
							}
						}
					],
					"id": "ed6c652c-6441-4bbc-9d11-a3afbcc0c167",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "2828ffca-8b30-497e-931c-93f3402bc90b",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "22ab634b-6448-432c-ad38-cb6909c58874",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "57eecc12-5e5b-4404-bf27-58b9bd0754a6"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "413c138d-b34c-44ff-9ff9-b8fa2c59ad6f"
					}
				}
			]
		},
		{
			"name": "Cleanup Copy 8",
			"item": [
				{
					"name": "Decide Execution ENV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "7dfcd9d2-0fe8-4f5e-99e3-7ac542845125"
							}
						}
					],
					"id": "54c8560f-043a-48e7-bee5-1a6e7379260a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete the Personal Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"personal_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"personal_workspace_api_id\");",
									"pm.environment.unset(\"personal_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "0776e406-5901-4220-8d02-eb1b9ef1d378"
							}
						}
					],
					"id": "eee1b46e-471b-4177-8fea-3c264878b3cf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Access-Token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{personal_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{personal_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "694adfd4-1df9-4bf1-aeaa-66ea2fcd7092",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete the Team Workspace API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"// delete the API created for testing watch/unwatch functionality",
									"pm.test(\"API Destroy - Response should have 200 status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"API Destroy - Response should have valid structure\", function () {",
									"    pm.expect(jsonData.model_id).to.eql(pm.environment.get(\"team_workspace_api_id\"));",
									"    pm.expect(jsonData.meta).to.eql({",
									"        model: 'api',",
									"        action: 'destroy'",
									"    });",
									"",
									"",
									"    pm.expect(jsonData.data.id).to.eql(jsonData.model_id);",
									"});",
									"",
									"pm.environment.unset(\"team_workspace_api_id\");",
									"pm.environment.unset(\"team_workspace_api_version_id\");",
									""
								],
								"type": "text/javascript",
								"id": "07be8393-7a2d-4ee6-9312-c418024776e1"
							}
						}
					],
					"id": "2801b6d1-b33a-460e-a56f-3057450a4f96",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Access-Token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{url}}/apis/{{team_workspace_api_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"apis",
								"{{team_workspace_api_id}}"
							]
						},
						"description": "This endpoint deletes an API."
					},
					"response": [
						{
							"id": "a5c9dde0-514e-460b-8c8f-71a87fd4c06f",
							"name": "Success: Delete an API",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Access-Token",
										"type": "text",
										"value": "{{accessToken}}"
									}
								],
								"url": {
									"raw": "{{url}}/apis/392355ae-5f06-47b7-a5b6-854b8be41bd5",
									"host": [
										"{{url}}"
									],
									"path": [
										"apis",
										"392355ae-5f06-47b7-a5b6-854b8be41bd5"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"model_id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\",\n\t\"meta\": {\n\t\t\"model\": \"api\",\n\t\t\"action\": \"destroy\"\n\t},\n\t\"data\": {\n\t\t\"id\": \"392355ae-5f06-47b7-a5b6-854b8be41bd5\"\n\t}\n}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete Personal Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete personal Workspace- Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "064a56dd-8fc9-421f-89c2-f850326c90d8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('personal_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('personal_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "188f446e-7b9c-45ce-8f3a-420495870f53"
							}
						}
					],
					"id": "77fac9a2-02c0-40c5-8262-1b957c057817",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-access-token",
								"value": "{{api_editor_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete Team Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Team Workspace - Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"id": "1e3919cd-3eed-4a2e-9a22-3f1739683e3b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const workspace_url=pm.environment.get('test_env')=== 'prod'? `${pm.environment.get('url')}/workspace/${pm.environment.get('team_workspace_id')}` : `${pm.environment.get('url')}/api/workspace/${pm.environment.get('team_workspace_id')}`",
									"",
									"pm.environment.set('workspace_creation_url', workspace_url);"
								],
								"type": "text/javascript",
								"id": "4cd652e4-d329-4627-9664-dc0e7ab9fab8"
							}
						}
					],
					"id": "e600b2d2-e6da-4f8a-a5f1-d230f47606c1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{workspace_creation_url}}",
							"host": [
								"{{workspace_creation_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Remove API VIEWER user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "23fa4db7-1d40-45ec-a28b-a2386228d118"
							}
						}
					],
					"id": "500c506d-942f-4d41-86f9-3f9d1b144386",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "5f569720-c07a-4b8d-b9d5-47ac89523115",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "2406c333-d0cf-4a82-8ede-e3c97ea0ae63",
									"key": "target_user_id",
									"value": "{{api_viewer_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "0da0f1f1-2d46-4346-b652-d4170510fe51",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Remove API EDITOR user account from Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "a90b5886-8acc-4d3e-9ff3-dceafde29ff0"
							}
						}
					],
					"id": "d5be72f3-9cb8-49c3-8a51-ed9c02fc2879",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/organizations/:organization_id/users/:target_user_id?access_token={{admin_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"organizations",
								":organization_id",
								"users",
								":target_user_id"
							],
							"query": [
								{
									"key": "access_token",
									"value": "{{admin_access_token}}"
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "force",
									"value": "true"
								}
							],
							"variable": [
								{
									"id": "b3d6f721-8a56-4046-af95-18150d19c7be",
									"key": "organization_id",
									"value": "{{quality_team_id}}"
								},
								{
									"id": "dca4d173-0540-4953-af70-3f53ebe0225f",
									"key": "target_user_id",
									"value": "{{api_editor_user_id}}"
								}
							]
						}
					},
					"response": [
						{
							"id": "a5d6295f-10b7-461b-bcf6-688cae138d32",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "Decide Execution ENV Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.environment.get('test_env')=== 'prod'){",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									" postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript",
								"id": "1531c008-68c8-4b1e-acd0-d02e2e972b50"
							}
						}
					],
					"id": "36c3a471-66cb-4313-89ad-c221df1bafc8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cleanup] Delete API Viewer account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript",
								"id": "13f92503-2f3b-4f92-a8c8-a746d7e24e89"
							}
						}
					],
					"id": "cc422fff-8f96-4d23-9bec-04fa013b3ed0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"value": "{{api_viewer_access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_viewer_user_id}}/delete_account?user_id={{api_viewer_user_id}}&access_token={{api_viewer_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_viewer_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_viewer_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_viewer_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "f6e8fd94-f44b-4da6-8a4f-af4700669d43",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				},
				{
					"name": "[Cleanup] Delete API Editor user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status to be 200\", function(){",
									"    pm.response.to.have.status(200); ",
									"});",
									"",
									"",
									"// unset all setup runtime environment variables",
									"pm.environment.unset(\"admin_userid\");",
									"pm.environment.unset(\"admin_access_token\");",
									"",
									"",
									"pm.environment.unset(\"api_editor_user_id\");",
									"pm.environment.unset(\"api_editor_access_token\");",
									"pm.environment.unset(\"api_editor_username\");",
									"pm.environment.unset(\"api_editor_password\");",
									"pm.environment.unset(\"api_editor_email\");",
									"",
									"pm.environment.unset(\"api_viewer_user_id\");",
									"pm.environment.unset(\"api_viewer_access_token\");",
									"pm.environment.unset(\"api_viewer_username\");",
									"pm.environment.unset(\"api_viewer_password\");",
									"pm.environment.unset(\"api_viewer_email\");",
									"",
									"",
									"pm.environment.unset(\"personal_workspace_id\");",
									"pm.environment.unset(\"team_workspace_id\");",
									"pm.environment.unset(\"team_domain\");",
									"pm.environment.unset(\"team_id\");",
									"pm.environment.unset(\"team_workspace_api_name\");",
									"pm.environment.unset(\"personal_workspace_api_name\");",
									"pm.environment.unset(\"team_workspace_api_schema_id\");",
									"pm.environment.unset(\"personal_workspace_api_schema_id\");",
									"pm.environment.unset(\"workspace_creation_url\");",
									"pm.environment.unset(\"workspace_invite_url\");",
									"pm.environment.unset(\"collection_url\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "71366795-2c3c-4a52-88e3-d18fe5ba82c7"
							}
						}
					],
					"id": "4b018eaa-5b45-4e31-91f6-fb67e5f344d2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-access-token",
								"type": "text",
								"value": "{{api_editor_access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{godUrl}}/api/users/{{api_editor_user_id}}/delete_account?user_id={{api_editor_user_id}}&access_token={{api_editor_access_token}}&force=true",
							"host": [
								"{{godUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{api_editor_user_id}}",
								"delete_account"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{api_editor_user_id}}"
								},
								{
									"key": "access_token",
									"value": "{{api_editor_access_token}}"
								},
								{
									"key": "force",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"id": "02ca65eb-11ad-4473-826b-83ebf4675cd6",
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{godUrl}}/api/users/{{freeUserWithoutTeam:id}}/delete_account?user_id={{freeUserWithoutTeam:id}}&access_token={{freeUserWithoutTeam:accessToken}}",
									"host": [
										"{{godUrl}}"
									],
									"path": [
										"api",
										"users",
										"{{freeUserWithoutTeam:id}}",
										"delete_account"
									],
									"query": [
										{
											"key": "user_id",
											"value": "{{freeUserWithoutTeam:id}}"
										},
										{
											"key": "access_token",
											"value": "{{freeUserWithoutTeam:accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "89",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 31 Jul 2018 12:37:57 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; preload",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-Srv-Name",
									"value": "god",
									"name": "X-Srv-Name",
									"description": "Custom header"
								},
								{
									"key": "X-Srv-Trace",
									"value": "god65d60e13778b0802",
									"name": "X-Srv-Trace",
									"description": "Custom header"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block",
									"name": "X-Xss-Protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "app.getpostman-beta.com",
									"path": "/",
									"secure": false,
									"value": "or4l3eu4rfrt8pugrfq7p6u270",
									"key": "PHPSESSID"
								}
							],
							"responseTime": null,
							"body": "{\"result\":\"success\",\"message\":\"Your account was deleted. Signing out...\"}"
						}
					]
				}
			],
			"id": "3e42754f-2b52-4b92-a0c2-043718f6187c",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "d9abddc2-2dbb-498e-af2b-de0038b65bb0"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "c5a67dd1-9e48-4404-84fd-a033752a2818"
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "f1600772-752b-4604-86b5-84f80d788d85"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if (!pm.response.text()) {",
					"  const url = pm.request.url.toString();",
					"  const requestHeaders = pm.request.headers;",
					"",
					"  const resCode = pm.response.code;",
					"  const resHeaders = pm.response.headers;",
					"",
					"",
					"  const req = {",
					"    url: 'https://hooks.slack.com/services/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',",
					"    method: 'POST',",
					"    body: {",
					"      mode: 'raw',",
					"      raw: JSON.stringify({",
					"        \"text\": \"Empty Response\",",
					"        \"blocks\": [",
					"          {",
					"            \"type\": \"section\",",
					"            \"text\": {",
					"              \"type\": \"mrkdwn\",",
					"              \"text\": url",
					"            }",
					"          },",
					"          {",
					"            \"type\": \"divider\"",
					"          },",
					"          {",
					"            \"type\": \"section\",",
					"            \"text\": {",
					"              \"type\": \"mrkdwn\",",
					"              \"text\": \"*Request*\"",
					"            }",
					"          },",
					"          {",
					"            \"type\": \"section\",",
					"            \"text\": {",
					"              \"type\": \"mrkdwn\",",
					"              \"text\": `Headers:\\n\\`\\`\\`${JSON.stringify(requestHeaders, null, 2)}\\`\\`\\``",
					"            }",
					"          },",
					"          {",
					"            \"type\": \"divider\"",
					"          },",
					"          {",
					"            \"type\": \"section\",",
					"            \"text\": {",
					"              \"type\": \"mrkdwn\",",
					"              \"text\": \"*Response*\"",
					"            }",
					"          },",
					"          {",
					"            \"type\": \"section\",",
					"            \"text\": {",
					"              \"type\": \"mrkdwn\",",
					"              \"text\": `*Code*: ${resCode}\\n*Content*: ${response}\\n*Headers*:\\n\\`\\`\\`${JSON.stringify(resHeaders, null, 2)}\\`\\`\\``",
					"            }",
					"          },",
					"          {",
					"            \"type\": \"actions\",",
					"            \"elements\": [",
					"              {",
					"                \"type\": \"button\",",
					"                \"text\": {",
					"                  \"type\": \"plain_text\",",
					"                  \"text\": \"Open AWS\",",
					"                  \"emoji\": true",
					"                },",
					"                \"value\": \"click_me_123\"",
					"              }",
					"            ]",
					"          },",
					"          {",
					"            \"type\": \"divider\"",
					"          },",
					"          {",
					"            \"type\": \"divider\"",
					"          }",
					"        ]",
					"      })",
					"    }",
					"  };",
					"",
					"  pm.sendRequest(req);",
					"",
					"  return postman.setNextRequest(null);",
					"} else {",
					"  console.log(JSON.stringify(pm.response.json(), null, 2));",
					"}",
					"",
					"console.log(pm.response.code);"
				],
				"id": "8f140d9d-bdf1-499a-94ce-23780051ad9f"
			}
		}
	]
}